{"version":3,"sources":["../../../test/testSimple/SimpleTask.es6"],"names":["instance","SimpleTask","name","id","role","programState","library","CONSTANT","DEFAULT_STATES","READY_PROCESS","ERROR","CLOSE","console","log","global","processPid","startDisplay","stopDisplay","descriptor","setInterval","clearInterval","active","ATask"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;AAEA;AACA,IAAIA,WAAW,IAAf;;AAEA;;;AATA;AACA;AACA;;IAUqBC,U;;;AACnB;;;AAGA,wBAAc;AAAA;;AAAA;;AAAA;;AAGZ,QAAID,QAAJ,EAAc,cAAOA,QAAP;;AAEd,UAAKE,IAAL,GAAY,YAAZ;;AAEA,UAAKC,EAAL,GAAU,EAAV;;AAEA;AACA,UAAKC,IAAL,GAAY,KAAZ;;AAEAJ;;AAEA,mBAAOA,QAAP;AACD;;AAED;;;;;;AAMA;;;;;;;;;;;2GAM2BK,Y;;;;;;;wCAKrBC,kBAAQC,QAAR,CAAiBC,c,EAHnBC,a,yBAAAA,a,EACAC,K,yBAAAA,K,EACAC,K,yBAAAA,K;;;AAGFC,wBAAQC,GAAR,SAAkBC,OAAOC,UAAzB,8BAA4DV,aAAaH,IAAzE;;AAEA;;AAEA;;sBACIG,aAAaF,EAAb,KAAoBM,cAAcN,E;;;;;AACpC,qBAAKa,YAAL;;;;;;AAKF;AACA,oBAAIX,aAAaF,EAAb,KAAoBQ,MAAMR,EAA1B,IAAgCE,aAAaF,EAAb,KAAoBO,MAAMP,EAA9D,EAAkE;AAChE,uBAAKc,WAAL;AACD;;;;;;;;;;;;;;;;;AAGH;;;;;;;;mCAMe;AACbL,cAAQC,GAAR,SAAkBC,OAAOC,UAAzB;;AAEA,WAAKG,UAAL,GAAkBC,YAAY,YAAM;AAClCP,gBAAQC,GAAR,SAAkBC,OAAOC,UAAzB;AACD,OAFiB,EAEf,IAFe,CAAlB;AAGD;;;kCAEa;AACZH,cAAQC,GAAR,SAAkBC,OAAOC,UAAzB;;AAEAK,oBAAc,KAAKF,UAAnB;AACD;;AAGD;;;;;;AAMA;;;;;;;;;AAQA;;;;;;YAKEd,I,SAAAA,I;;;;;qBAEI,KAAKiB,M;;;;;kDAAe,I;;;;AAExB;AACA,qBAAKjB,IAAL,GAAYA,IAAZ;;AAEA,qBAAKiB,MAAL,GAAc,IAAd;;kDAEO,I;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;;oBAMO,KAAKA,M;;;;;kDAAe,I;;;;AAEzB,qBAAKA,MAAL,GAAc,KAAd;;AAEA;AACA,qBAAKjB,IAAL,GAAY,KAAZ;;kDAEO,I;;;;;;;;;;;;;;;;;;kCAlCY;AACnB,aAAOJ,YAAY,IAAIC,UAAJ,EAAnB;AACD;;;EA1FqCK,kBAAQgB,K;;kBAA3BrB,U","file":"SimpleTask.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\nimport library from '../../src/Library.js';\n\n// Imports\nlet instance = null;\n\n/**\n * Define a Simple task which display a message every X seconds\n */\nexport default class SimpleTask extends library.ATask {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super();\n\n    if (instance) return instance;\n\n    this.name = 'SimpleTask';\n\n    this.id = 10;\n\n    // Pointer to the role it is assigned to\n    this.role = false;\n\n    instance = this;\n\n    return instance;\n  }\n\n  /*\n   * ======================================================================================================================================\n   *                                                  HANDLE STATE CHANGE\n   * ======================================================================================================================================\n   */\n\n  /**\n   * apply the eliot state on the task\n   * @param {Number} programState\n   * @param {Number} oldEliotState\n   * @override\n   */\n  async applyNewProgramState(programState) {\n    const {\n      READY_PROCESS,\n      ERROR,\n      CLOSE,\n    } = library.CONSTANT.DEFAULT_STATES;\n\n    console.log(` > ${global.processPid} : Handling new state ${programState.name}`);\n\n    // Depending on the state of the system we are starting or stoping the dispay\n\n    // If all is ready, we start the display\n    if (programState.id === READY_PROCESS.id) {\n      this.startDisplay();\n\n      return;\n    }\n\n    // If we close of if we got an error, we stop the display\n    if (programState.id === CLOSE.id || programState.id === ERROR.id) {\n      this.stopDisplay();\n    }\n  }\n\n  /*\n   * ======================================================================================================================================\n   *                                                 TASK METHODS\n   * ======================================================================================================================================\n   */\n\n  startDisplay() {\n    console.log(` > ${global.processPid} : Start Working`);\n\n    this.descriptor = setInterval(() => {\n      console.log(` > ${global.processPid} : working in progress ...`);\n    }, 1000);\n  }\n\n  stopDisplay() {\n    console.log(` > ${global.processPid} : Stop Working`);\n\n    clearInterval(this.descriptor);\n  }\n\n\n  /*\n   * ======================================================================================================================================\n   *                                                 OVERRIDE BASICS\n   * ======================================================================================================================================\n   */\n\n  /**\n   * SINGLETON implementation\n   * @override\n   */\n  static getInstance() {\n    return instance || new SimpleTask();\n  }\n\n  /**\n   * Start to run the task\n   * @override\n   */\n  async start({\n    role,\n  }) {\n    if (this.active) return true;\n\n    // Attach the Task to the role\n    this.role = role;\n\n    this.active = true;\n\n    return true;\n  }\n\n  /**\n   * ELIOT stop to run the task\n   * @param {Object} args\n   * @override\n   */\n  async stop() {\n    if (!this.active) return true;\n\n    this.active = false;\n\n    // Dettach the Task from the role\n    this.role = false;\n\n    return true;\n  }\n}\n"]}