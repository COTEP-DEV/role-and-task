{"version":3,"sources":["../../../test/testSimple/main.es6"],"names":["roleAndTask","library","RoleAndTask","parseEqualsArrayOptions","options","name","Array","Error","tmp","parsedOptions","ret","some","x","split","length","colorsArray","colorToUse","Utils","generateRandom","processPid","colors","String","process","pid","global","console","log","declareTask","id","closureHierarchy","color","idsAllowedRole","CONSTANT","DEFAULT_ROLES","SLAVE_ROLE","MASTER_ROLE","obj","SimpleTask","getInstance","PROGRAM_LAUNCHING_PARAMETERS","MODE","alias","type","MODE_OPTIONS","multiple","modeoptions","mode","setConfiguration","launchMasterSlaveConfigurationFile","path","resolve","__dirname","pathToEntryFile","subscribeToStateChange","state","getSlaveNorMaster","role","boot"],"mappings":"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","sourcesContent":["//\n// Copyright (c) 2019 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport path from 'path';\nimport colors from 'colors';\nimport commandLineArgs from 'command-line-args';\n\nimport Utils from '../../src/Utils/Utils.js';\nimport library from '../../src/Library.js';\nimport SimpleTask from './SimpleTask.js';\n\nconst roleAndTask = new library.RoleAndTask();\n\n\n/**\n * Takes option-key = ['optA=12', 'optB=78', ...]\n * and return [\n *   optA: '12',\n *   optB: '78',\n * ]\n *\n * @param {Object} options\n * @param {String} name\n */\nfunction parseEqualsArrayOptions(options, name) {\n  // If there is none informations\n  if (!options || !options[name]) return {};\n\n  if (!(options[name] instanceof Array)) {\n    throw new Error(`INVALID_LAUNCHING_PARAMETER : ${name}`);\n  }\n\n  let tmp;\n\n  const parsedOptions = {};\n  const ret = options[name].some((x) => {\n    tmp = x.split('=');\n\n    // If the pattern optA=value isn't respected return an error\n    if (tmp.length !== 2) {\n      return true;\n    }\n\n    parsedOptions[tmp[0]] = tmp[1];\n\n    return false;\n  });\n\n  if (ret) {\n    throw new Error(`INVALID_LAUNCHING_PARAMETER : ${name}`);\n  }\n\n  return parsedOptions;\n}\n\n// Attach a color to the pid so you can easily identify it and see that there are 3 processes\nconst colorsArray = [\n  'yellow',\n  'red',\n  'blue',\n  'cyan',\n  'red',\n  'magenta',\n  'bgRed',\n  'bgGreen',\n  'bgYellow',\n  'bgBlue',\n  'bgMagenta',\n  'bgCyan',\n  'rainbow',\n  'america',\n  'trap',\n];\n\nconst colorToUse = colorsArray[Utils.generateRandom(0, colorsArray.length - 1)];\n\nconst processPid = colors[colorToUse](String(process.pid));\n\n// Store the string in global so it can be used in the Task runned in the process\nglobal.processPid = processPid;\n\nconsole.log(\n  `\n > ################################################\n >        Run TestSimple : Process ${processPid}\n >        Use : Ctrl + C to leave\n > ################################################\n\n`,\n);\n\n// Declare the Task\nroleAndTask.declareTask({\n  name: 'SimpleTask',\n\n  // Name of the task in the configuration file\n  id: 'simple-task',\n\n  // In which order we close the task ? Because we have only one task, it's 1\n  closureHierarchy: 1,\n\n  // The color to use when performing display\n  color: colorToUse,\n\n  // Say the task can be runned on both Slave and Master process\n  idsAllowedRole: [\n    library.CONSTANT.DEFAULT_ROLES.SLAVE_ROLE.id,\n    library.CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id,\n  ],\n\n  // The task object\n  obj: SimpleTask.getInstance(),\n});\n\n// Do we launch master or slave or oldway?\n// Get the options\nconst options = commandLineArgs([{\n  // Theses must be like --mode optA=12 optB=9\n  name: library.CONSTANT.PROGRAM_LAUNCHING_PARAMETERS.MODE.name,\n  alias: library.CONSTANT.PROGRAM_LAUNCHING_PARAMETERS.MODE.alias,\n  type: String,\n}, {\n  // Theses must be like --mode-options optA=12 optB=9\n  name: library.CONSTANT.PROGRAM_LAUNCHING_PARAMETERS.MODE_OPTIONS.name,\n  alias: library.CONSTANT.PROGRAM_LAUNCHING_PARAMETERS.MODE_OPTIONS.alias,\n  type: String,\n  multiple: true,\n}]);\n\n// We have something like mode-options = ['optA=12', 'optB=78', ...]\nconst modeoptions = parseEqualsArrayOptions(options, library.CONSTANT.PROGRAM_LAUNCHING_PARAMETERS.MODE_OPTIONS.name);\nconst {\n  mode,\n} = options;\n\n// Set the configuration of the library\nroleAndTask.setConfiguration({\n  // Mandatory\n  // Mode lauching (master of slave)\n  mode,\n\n  // Options object (identifier or other things)\n  modeoptions,\n\n  // Where the file describing the architecture to create is\n  launchMasterSlaveConfigurationFile: `${path.resolve(__dirname)}/../../../test/testSimple/minimalArchitecture.hjson`,\n\n  // Where is the file we use to launch the processes (the actual file)\n  pathToEntryFile: `${path.resolve(__dirname)}/main.js`,\n});\n\n/**\n * Subscribe to the state change and display it\n */\nroleAndTask.subscribeToStateChange(async (state) => {\n  try {\n    // If we are in the master we display the state\n    const role = await roleAndTask.getSlaveNorMaster();\n\n    if (role && role.id === library.CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id) {\n      console.log(` > ${processPid} : New State detected : ${state.name}/#${state.id}`);\n    }\n  } catch (e) {\n    // The getSlaveNorMaster() method can fail if no role is started, we can ignore the error\n  }\n});\n\n/**\n * Startup the whole processus launch thing\n */\nroleAndTask.boot();"],"file":"main.js"}