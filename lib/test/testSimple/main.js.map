{"version":3,"sources":["../../../test/testSimple/main.es6"],"names":["roleAndTask","library","RoleAndTask","colorsArray","colorToUse","Utils","generateRandom","length","processPid","colors","String","process","pid","global","console","log","declareTask","name","id","closureHierarchy","color","idsAllowedRole","CONSTANT","DEFAULT_ROLES","SLAVE_ROLE","MASTER_ROLE","obj","SimpleTask","getInstance","setConfiguration","launchMasterSlaveConfigurationFile","path","resolve","__dirname","pathToEntryFile","subscribeToStateChange","state","getSlaveNorMaster","role","boot"],"mappings":";;;;;;;;;;AAKA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,IAAIC,kBAAQC,WAAZ,EAApB;;AAEA;AAdA;AACA;AACA;;AAEA;AAWA,IAAMC,cAAc,CAClB,QADkB,EAElB,KAFkB,EAGlB,MAHkB,EAIlB,MAJkB,EAKlB,KALkB,EAMlB,SANkB,EAOlB,OAPkB,EAQlB,SARkB,EASlB,UATkB,EAUlB,QAVkB,EAWlB,WAXkB,EAYlB,SAZkB,EAalB,SAbkB,EAclB,SAdkB,EAelB,MAfkB,CAApB;;AAkBA,IAAMC,aAAaD,YAAYE,gBAAMC,cAAN,CAAqB,CAArB,EAAwBH,YAAYI,MAAZ,GAAqB,CAA7C,CAAZ,CAAnB;;AAEA,IAAMC,aAAaC,iBAAOL,UAAP,EAAmBM,OAAOC,QAAQC,GAAf,CAAnB,CAAnB;;AAEA;AACAC,OAAOL,UAAP,GAAoBA,UAApB;;AAEAM,QAAQC,GAAR,gGAGqCP,UAHrC;;AAUA;AACAR,YAAYgB,WAAZ,CAAwB;AACtBC,QAAM,YADgB;;AAGtB;AACAC,MAAI,aAJkB;;AAMtB;AACAC,oBAAkB,CAPI;;AAStB;AACAC,SAAOhB,UAVe;;AAYtB;AACAiB,kBAAgB,CACdpB,kBAAQqB,QAAR,CAAiBC,aAAjB,CAA+BC,UAA/B,CAA0CN,EAD5B,EAEdjB,kBAAQqB,QAAR,CAAiBC,aAAjB,CAA+BE,WAA/B,CAA2CP,EAF7B,CAbM;;AAkBtB;AACAQ,OAAKC,qBAAWC,WAAX;AAnBiB,CAAxB;;AAsBA;AACA5B,YAAY6B,gBAAZ,CAA6B;AAC3B;AACA;AACAC,sCAAuCC,eAAKC,OAAL,CAAaC,SAAb,CAAvC,wDAH2B;;AAK3B;AACAC,mBAAoBH,eAAKC,OAAL,CAAaC,SAAb,CAApB;AAN2B,CAA7B;;AASA;;;AAGAjC,YAAYmC,sBAAZ;AAAA,sFAAmC,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGZpC,YAAYqC,iBAAZ,EAHY;;AAAA;AAGzBC,gBAHyB;;;AAK/B,gBAAIA,QAAQA,KAAKpB,EAAL,KAAYjB,kBAAQqB,QAAR,CAAiBC,aAAjB,CAA+BE,WAA/B,CAA2CP,EAAnE,EAAuE;AACrEJ,sBAAQC,GAAR,SAAkBP,UAAlB,gCAAuD4B,MAAMnB,IAA7D,UAAsEmB,MAAMlB,EAA5E;AACD;AAP8B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;AASI;AATJ;;AAaA;;;AAGAlB,YAAYuC,IAAZ","file":"main.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport path from 'path';\nimport colors from 'colors';\n\nimport Utils from '../../src/Utils/Utils.js';\nimport library from '../../src/Library.js';\nimport SimpleTask from './SimpleTask.js';\n\nconst roleAndTask = new library.RoleAndTask();\n\n// Attach a color to the pid so you can easily identify it and see that there are 3 processes\nconst colorsArray = [\n  'yellow',\n  'red',\n  'blue',\n  'cyan',\n  'red',\n  'magenta',\n  'bgRed',\n  'bgGreen',\n  'bgYellow',\n  'bgBlue',\n  'bgMagenta',\n  'bgCyann',\n  'rainbow',\n  'america',\n  'trap',\n];\n\nconst colorToUse = colorsArray[Utils.generateRandom(0, colorsArray.length - 1)];\n\nconst processPid = colors[colorToUse](String(process.pid));\n\n// Store the string in global so it can be used in the Task runned in the process\nglobal.processPid = processPid;\n\nconsole.log(\n  `\n > ################################################\n >        Run TestSimple : Process ${processPid}\n >        Use : Ctrl + C to leave\n > ################################################\n\n`,\n);\n\n// Declare the Task\nroleAndTask.declareTask({\n  name: 'SimpleTask',\n\n  // Name of the task in the configuration file\n  id: 'simple-task',\n\n  // In which order we close the task ? Because we have only one task, it's 1\n  closureHierarchy: 1,\n\n  // The color to use when performing display\n  color: colorToUse,\n\n  // Say the task can be runned on both Slave and Master process\n  idsAllowedRole: [\n    library.CONSTANT.DEFAULT_ROLES.SLAVE_ROLE.id,\n    library.CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id,\n  ],\n\n  // The task object\n  obj: SimpleTask.getInstance(),\n});\n\n// Set the configuration of the library\nroleAndTask.setConfiguration({\n  // Mandatory\n  // Where the file describing the architecture to create is\n  launchMasterSlaveConfigurationFile: `${path.resolve(__dirname)}/../../../test/testSimple/minimalArchitecture.hjson`,\n\n  // Where is the file we use to launch the processes (the actual file)\n  pathToEntryFile: `${path.resolve(__dirname)}/main.js`,\n});\n\n/**\n * Subscribe to the state change and display it\n */\nroleAndTask.subscribeToStateChange(async (state) => {\n  try {\n    // If we are in the master we display the state\n    const role = await roleAndTask.getSlaveNorMaster();\n\n    if (role && role.id === library.CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id) {\n      console.log(` > ${processPid} : New State detected : ${state.name}/#${state.id}`);\n    }\n  } catch (e) {\n    // The getSlaveNorMaster() method can fail if no role is started, we can ignore the error\n  }\n});\n\n/**\n * Startup the whole processus launch thing\n */\nroleAndTask.boot();\n"]}