{"version":3,"sources":["../../../../../src/Utils/CONSTANT/ImportedConstant/Root.ts"],"names":["instance","superclass","CONSTANT","PROGRAM_LAUNCHING_MODE","MASTER","ABSTRACT_TASK","name","color","id","idsAllowedRole","LAUNCHING","READY_PROCESS","ERROR","CLOSE","Master1_0","require","Slave1_0","ABSTRACT_ROLE","ABSTRACT_MASTER_ROLE","ABSTRACT_SLAVE_ROLE","MASTER_ROLE","SLAVE_ROLE","SLAVE","MODE","alias","MODE_OPTIONS","ABSTRACT_SOCKET_COMMUNICATION_SYSTEM","ZEROMQ","HEAD","BODY","MESSAGES","SLAVE_CONFIRMATION_INFORMATIONS","LIST_TASKS","CONNECT_TASK_TO_TASK","START_TASK","STOP_TASK","STATE_CHANGE","GENERIC_CHANNEL_DATA","OUTPUT_TEXT","INFOS_ABOUT_SLAVES","ERROR_HAPPENED","TAKE_MUTEX","RELEASE_MUTEX","IP_SERVER","PORT_SERVER","IDENTIFIER","PROGRAM_STATE","ROLE_DISPLAY"],"mappings":"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","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n/**\n * This class contains high levels constant\n * It needs to be the root of extends in CONSTANT.es6\n */\n\nlet instance = null;\n\n/**\n * This class is a Singleton\n */\nexport default function (superclass) {\n  return class CONSTANT extends superclass {\n    /**\n     * Constructor of the singleton class\n     */\n    constructor() {\n      if (instance) return instance;\n\n      super();\n\n      instance = this;\n\n      return instance;\n    }\n\n    /**\n     * Return the unique instance of the class\n     */\n    static getInstance() {\n      return instance || new CONSTANT();\n    }\n\n\n    /**\n     * When you want to get the function name, how many back do you go for\n     */\n    static get NUMBER_OF_LEVEL_TO_GO_BACK_PROMISE_PATTERN() {\n      return 3;\n    }\n\n    /**\n     * When you want to get the function name, how many back do you go for\n     */\n    static get NUMBER_OF_LEVEL_TO_GO_BACK_ERROR_CLASSIC() {\n      return 3;\n    }\n\n    /**\n     * When you want to get the function name, how many back do you go for\n     */\n    static get NUMBER_OF_LEVEL_TO_GO_BACK_ERROR_HANDLE_STACK_TRACE() {\n      return 3;\n    }\n\n    /**\n     * In which mode PROGRAM is launched to by default\n     * THIS DATA IS AFFECTED BY THE CONFIGURATION FILE\n     */\n    static get DEFAULT_LAUNCHING_MODE() {\n      return CONSTANT.PROGRAM_LAUNCHING_MODE.MASTER;\n    }\n\n    /**\n     * Default tasks\n     */\n    static get DEFAULT_TASK() {\n      return {\n        ABSTRACT_TASK: {\n          name: 'Abstract Task',\n          color: 'white',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n\n          idsAllowedRole: [],\n        },\n      };\n    }\n\n    /**\n     * Default states of the system\n     */\n    static get DEFAULT_STATES() {\n      return {\n        // /!\\ DO NOT USE 0 VALUE DUE TO === COMPARAISONS\n\n        // PROGRAM is in launching progress (launching slaves, tasks, starting servers...)\n        LAUNCHING: {\n          name: 'Launching',\n          id: 1,\n        },\n\n        // The system is ready in term of Role & Task started and connected\n        READY_PROCESS: {\n          name: 'Ready process',\n          id: 2,\n        },\n\n        // The system got an error\n        ERROR: {\n          name: 'Error',\n          id: 3,\n        },\n\n        // The system have to close\n        CLOSE: {\n          name: 'Close',\n          id: 4,\n        },\n      };\n    }\n\n    /**\n     * Ids of the default roles\n     *\n     * Have to use require to avoid circular import\n     */\n    static get DEFAULT_ROLES() {\n      const Master1_0 = require('../../../RoleSystem/Role/RoleMaster/Master1_0.js')\n        .default;\n\n      const Slave1_0 = require('../../../RoleSystem/Role/RoleSlave/Slave1_0.js')\n        .default;\n\n      return {\n        ABSTRACT_ROLE: {\n          name: 'Abstract Role',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n        },\n\n        ABSTRACT_MASTER_ROLE: {\n          // -1 means not usable (need to be implemented)\n          name: 'Abstract Master Role',\n\n          id: -1,\n        },\n\n        ABSTRACT_SLAVE_ROLE: {\n          name: 'Abstract Slave Role',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n        },\n\n        MASTER_ROLE: {\n          name: 'Master',\n          id: 1,\n          class: Master1_0,\n        },\n\n        SLAVE_ROLE: {\n          name: 'Slave',\n          id: 2,\n          class: Slave1_0,\n        },\n      };\n    }\n\n    /* ************************************************************************************* */\n    /* *************************** PROGRAM LAUNCHING MODE ************************************ */\n    /* ************************************************************************************* */\n\n    /**\n     * Different program launching mode and the keywords to use in CLI to pick one of them\n     */\n    static get PROGRAM_LAUNCHING_MODE() {\n      return {\n        MASTER: 'master',\n        SLAVE: 'slave',\n      };\n    }\n\n    /**\n     * Different program launching parameters\n     */\n    static get PROGRAM_LAUNCHING_PARAMETERS() {\n      return {\n        MODE: {\n          name: 'mode',\n          alias: 'm',\n        },\n\n        MODE_OPTIONS: {\n          name: 'mode-options',\n          alias: 'o',\n        },\n      };\n    }\n\n    /**\n     * Path to get the main\n     */\n    static get PATH_TO_MAIN() {\n      return 'src/systemBoot/systemBoot.js';\n    }\n\n    /* ************************************************************************************* */\n    /* **************************** COMMUNICATION SYSTEM *********************************** */\n    /* ************************************************************************************* */\n\n    /**\n     * Socket Communication systems that can be used on PROGRAM\n     */\n    static get SOCKET_COMMUNICATION_SYSTEM() {\n      return {\n        ABSTRACT_SOCKET_COMMUNICATION_SYSTEM: 'Abstract Communication System',\n        ZEROMQ: 'ZeroMQ aka OMQ',\n      };\n    }\n\n    /* ************************************************************************************* */\n    /* ********************************* ROLE & TASKS ************************************** */\n    /* ************************************************************************************* */\n\n    /**\n     * Keywords used in communication protocols between tasks\n     */\n    static get PROTOCOL_KEYWORDS() {\n      return {\n        HEAD: 'head',\n        BODY: 'body',\n      };\n    }\n\n    /**\n     * Master/Slave messages used in theirs protocols\n     */\n    static get PROTOCOL_MASTER_SLAVE() {\n      return {\n        // Full messages that are exchanged like that master->client and used as head by client\n        MESSAGES: {\n          // We close the slave\n          CLOSE: 'clo_s',\n\n          // We list the tasks that are launched & the type of slave\n          SLAVE_CONFIRMATION_INFORMATIONS: 'l_c_i',\n\n          // Ask for a listing of tasks\n          LIST_TASKS: 'list_t',\n\n          // We connect two task together\n          CONNECT_TASK_TO_TASK: 'con_t_t',\n\n          // We start a task\n          START_TASK: 'star_ta',\n\n          // We stop a task\n          STOP_TASK: 'sto_ta',\n\n          // We declare having changed the state of PROGRAM (launching, ready...)\n          STATE_CHANGE: 's_ch',\n\n          // We send data throught a generic channel\n          GENERIC_CHANNEL_DATA: 'gen_d',\n\n          // We send text from slave to master - to display it\n          OUTPUT_TEXT: 'txt',\n\n          // Slaves send theirs infos to the master\n          INFOS_ABOUT_SLAVES: 'sl_i',\n\n          // An error happened on a slave -> It tells the master\n          ERROR_HAPPENED: 'error_happened',\n\n          // Ask to get the mutex behind specified id\n          TAKE_MUTEX: 'a_mutex',\n\n          // Release the mutex so It can be taken again\n          RELEASE_MUTEX: 'r_mutex',\n        },\n      };\n    }\n\n    /**\n     * Args that are passed to a slave to start\n     */\n    static get SLAVE_START_ARGS() {\n      return {\n        IP_SERVER: 'ipServer',\n        PORT_SERVER: 'portServer',\n        IDENTIFIER: 'identifier',\n      };\n    }\n\n    /**\n     * The amount of time a master wait for a slave message before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT() {\n      return 300000;\n    }\n\n    /**\n     * The amount of time a linkApi wait for an answer from calculApi before to timeout\n     */\n    static get WAIT_LINK_API_MESSAGE() {\n      return 300000;\n    }\n\n    /**\n     * Do we consider warning as errors?\n     */\n    static get CONSIDER_WARNING_AS_ERRORS() {\n      return false;\n    }\n\n    /**\n     * Makes error fatal, which means we are exiting instead of getting into ERROR mode\n     */\n    static get MAKES_ERROR_FATAL() {\n      return false;\n    }\n\n    /**\n     * The amount of time a master wait for a slave message to acknowledge the state change before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT_STATE_CHANGE() {\n      return 300000;\n    }\n\n    /**\n     * The amount of time a master wait for a slave message before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT_STOP_TASK() {\n      return 300000;\n    }\n\n    /**\n     * Args that are passed to a master to start\n     */\n    static get MASTER_START_ARGS() {\n      return {\n        IP_SERVER: 'ipServer',\n        PORT_SERVER: 'portServer',\n      };\n    }\n\n    /**\n     * Tags that specify the purpose of a text to display.\n     * Theses tags are used when we want to redirect the data to display\n     */\n    static get MESSAGE_DISPLAY_TAGS() {\n      return {\n        PROGRAM_STATE: 1,\n        ROLE_DISPLAY: 3,\n        ERROR: 4,\n      };\n    }\n\n    /**\n     * How many ms between we get data from all tasks and give it to master\n     */\n    static get SLAVES_INFOS_CHANGE_TIME() {\n      return 3000;\n    }\n\n    /**\n     * Say how many time between two look at CPU and memory usage for slaves and master process\n     */\n    static get DISPLAY_CPU_MEMORY_CHANGE_TIME() {\n      return 3000;\n    }\n\n    /**\n     * String that ask for a quit of PROGRAM whole system\n     */\n    static get QUIT() {\n      return '__quit_program_order__';\n    }\n  };\n}\n"],"file":"Root.js"}