{"version":3,"sources":["../../../../../src/Utils/CONSTANT/ImportedConstant/Root.es6"],"names":["superclass","instance","CONSTANT","ELIOT_LAUNCHING_MODE","MASTER","ABSTRACT_TASK","name","color","id","idsAllowedRole","LAUNCHING","READY_PROCESS","ERROR","CLOSE","Master1_0","require","default","Slave1_0","ABSTRACT_ROLE","ABSTRACT_MASTER_ROLE","ABSTRACT_SLAVE_ROLE","MASTER_ROLE","class","SLAVE_ROLE","SLAVE","MODE","alias","MODE_OPTIONS","CONFIGURATION_FILENAME","ABSTRACT_SOCKET_COMMUNICATION_SYSTEM","ZEROMQ","SOCKETIO","HEAD","BODY","MESSAGES","SLAVE_CONFIRMATION_INFORMATIONS","LIST_TASKS","CONNECT_TASK_TO_TASK","START_TASK","STOP_TASK","STATE_CHANGE","GENERIC_CHANNEL_DATA","OUTPUT_TEXT","INFOS_ABOUT_SLAVES","ERROR_HAPPENED","TAKE_MUTEX","RELEASE_MUTEX","ASK_DATABASE_CONNECTION_CHANGE","CHANGE_DATABASE_CONNECTION","IP_SERVER","PORT_SERVER","IDENTIFIER","ELIOT_STATE","ROLE_DISPLAY","getInstance","activateConsoleDisplayMode"],"mappings":"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","file":"Root.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n/**\n * This class contains high levels constant\n * It needs to be the root of extends in CONSTANT.es6\n */\n\nimport colors from 'colors';\n\nimport Utils from '../../Utils.js';\n\nlet instance = null;\n\n/**\n * This class is a Singleton\n */\nexport default function (superclass) {\n  return class CONSTANT extends superclass {\n    /**\n     * Constructor of the singleton class\n     */\n    constructor() {\n      if (instance) return instance;\n\n      super();\n\n      instance = this;\n\n      return instance;\n    }\n\n    /**\n     * Return the unique instance of the class\n     */\n    static getInstance() {\n      return instance || new CONSTANT();\n    }\n\n    /**\n     * In which mode ELIOT is launched to by default\n     * THIS DATA IS AFFECTED BY THE CONFIGURATION FILE\n     */\n    static get DEFAULT_LAUNCHING_MODE() {\n      return CONSTANT.ELIOT_LAUNCHING_MODE.MASTER;\n    }\n\n    /**\n     * Default tasks\n     */\n    static get DEFAULT_TASK() {\n      return {\n        ABSTRACT_TASK: {\n          name: 'Abstract Task',\n          color: 'white',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n\n          idsAllowedRole: [],\n        },\n      };\n    }\n\n    /**\n     * Default states of the system\n     */\n    static get DEFAULT_STATES() {\n      return {\n        // /!\\ DO NOT USE 0 VALUE DUE TO === COMPARAISONS\n\n        // ELIOT is in launching progress (launching slaves, tasks, starting servers...)\n        LAUNCHING: {\n          name: 'Launching',\n          id: 1,\n        },\n\n        // The system is ready in term of Role & Task started and connected\n        READY_PROCESS: {\n          name: 'Ready process',\n          id: 2,\n        },\n\n        // The system got an error\n        ERROR: {\n          name: 'Error',\n          id: 3,\n        },\n\n        // The system have to close\n        CLOSE: {\n          name: 'Close',\n          id: 4,\n        },\n      };\n    }\n\n    /**\n     * Ids of the default roles\n     *\n     * Have to use require to avoid circular import\n     */\n    static get DEFAULT_ROLES() {\n      const Master1_0 = require('../../../RoleSystem/Role/RoleMaster/Master1_0.js')\n        .default;\n\n      const Slave1_0 = require('../../../RoleSystem/Role/RoleSlave/Slave1_0.js')\n        .default;\n\n      return {\n        ABSTRACT_ROLE: {\n          name: 'Abstract Role',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n        },\n\n        ABSTRACT_MASTER_ROLE: {\n          // -1 means not usable (need to be implemented)\n          name: 'Abstract Master Role',\n\n          id: -1,\n        },\n\n        ABSTRACT_SLAVE_ROLE: {\n          name: 'Abstract Slave Role',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n        },\n\n        MASTER_ROLE: {\n          name: 'Master',\n          id: 1,\n          class: Master1_0,\n        },\n\n        SLAVE_ROLE: {\n          name: 'Slave',\n          id: 2,\n          class: Slave1_0,\n        },\n      };\n    }\n\n    /* ************************************************************************************* */\n    /* *************************** ELIOT LAUNCHING MODE ************************************ */\n    /* ************************************************************************************* */\n\n    /**\n     * Different eliot launching mode and the keywords to use in CLI to pick one of them\n     */\n    static get ELIOT_LAUNCHING_MODE() {\n      return {\n        MASTER: 'master',\n        SLAVE: 'slave',\n      };\n    }\n\n    /**\n     * Different eliot launching parameters\n     */\n    static get ELIOT_LAUNCHING_PARAMETERS() {\n      return {\n        MODE: {\n          name: 'mode',\n          alias: 'm',\n        },\n\n        MODE_OPTIONS: {\n          name: 'mode-options',\n          alias: 'o',\n        },\n      };\n    }\n\n    /**\n     * Options that can be passed to mode-options\n     */\n    static get DETAILED_MODE_OPTIONS_PARAMETERS() {\n      return {\n        CONFIGURATION_FILENAME: 'configurationFilename',\n      };\n    }\n\n    /**\n     * Path to get the main\n     */\n    static get PATH_TO_MAIN() {\n      return 'src/systemBoot/systemBoot.js';\n    }\n\n    /* ************************************************************************************* */\n    /* **************************** COMMUNICATION SYSTEM *********************************** */\n    /* ************************************************************************************* */\n\n    /**\n     * Socket Communication systems that can be used on ELIOT\n     */\n    static get SOCKET_COMMUNICATION_SYSTEM() {\n      return {\n        ABSTRACT_SOCKET_COMMUNICATION_SYSTEM: 'Abstract Communication System',\n        ZEROMQ: 'ZeroMQ aka OMQ',\n        SOCKETIO: 'Socket.io',\n      };\n    }\n\n    /* ************************************************************************************* */\n    /* ********************************* ROLE & TASKS ************************************** */\n    /* ************************************************************************************* */\n\n    /**\n     * Keywords used in communication protocols between tasks\n     */\n    static get PROTOCOL_KEYWORDS() {\n      return {\n        HEAD: 'head',\n        BODY: 'body',\n      };\n    }\n\n    /**\n     * Master/Slave messages used in theirs protocols\n     */\n    static get PROTOCOL_MASTER_SLAVE() {\n      return {\n        // Full messages that are exchanged like that master->client and used as head by client\n        MESSAGES: {\n          // We close the slave\n          CLOSE: 'clo_s',\n\n          // We list the tasks that are launched & the type of slave\n          SLAVE_CONFIRMATION_INFORMATIONS: 'l_c_i',\n\n          // Ask for a listing of tasks\n          LIST_TASKS: 'list_t',\n\n          // We connect two task together\n          CONNECT_TASK_TO_TASK: 'con_t_t',\n\n          // We start a task\n          START_TASK: 'star_ta',\n\n          // We stop a task\n          STOP_TASK: 'sto_ta',\n\n          // We declare having changed the state of ELIOT (launching, ready...)\n          STATE_CHANGE: 's_ch',\n\n          // We send data throught a generic channel\n          GENERIC_CHANNEL_DATA: 'gen_d',\n\n          // We send text from slave to master - to display it\n          OUTPUT_TEXT: 'txt',\n\n          // Slaves send theirs infos to the master\n          INFOS_ABOUT_SLAVES: 'sl_i',\n\n          // An error happened on a slave -> It tells the master\n          ERROR_HAPPENED: 'error_happened',\n\n          // Ask to get the mutex behind specified id\n          TAKE_MUTEX: 'a_mutex',\n\n          // Release the mutex so It can be taken again\n          RELEASE_MUTEX: 'r_mutex',\n\n          // A Slave ask the master to update the database (startup)\n          // Ask for connection change\n          ASK_DATABASE_CONNECTION_CHANGE: 'asbchan',\n\n          // Change the database connection\n          CHANGE_DATABASE_CONNECTION: 'dbcon',\n        },\n      };\n    }\n\n    /**\n     * Args that are passed to a slave to start\n     */\n    static get SLAVE_START_ARGS() {\n      return {\n        IP_SERVER: 'ipServer',\n        PORT_SERVER: 'portServer',\n        IDENTIFIER: 'identifier',\n      };\n    }\n\n    /**\n     * The amount of time a master wait for a slave message before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT() {\n      return 300000;\n    }\n\n    /**\n     * The amount of time a linkApi wait for an answer from calculApi before to timeout\n     */\n    static get WAIT_LINK_API_MESSAGE() {\n      return 300000;\n    }\n\n    /**\n     * The amount of time a master wait for a slave message to acknowledge the state change before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT_STATE_CHANGE() {\n      return 300000;\n    }\n\n    /**\n     * The amount of time a master wait for a slave message before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT_STOP_TASK() {\n      return 300000;\n    }\n\n    /**\n     * Args that are passed to a master to start\n     */\n    static get MASTER_START_ARGS() {\n      return {\n        IP_SERVER: 'ipServer',\n        PORT_SERVER: 'portServer',\n      };\n    }\n\n    /**\n     * Tags that specify the purpose of a text to display.\n     * Theses tags are used when we want to redirect the data to display\n     */\n    static get MESSAGE_DISPLAY_TAGS() {\n      return {\n        ELIOT_STATE: 1,\n        ROLE_DISPLAY: 3,\n        ERROR: 4,\n      };\n    }\n\n    /**\n     * How many ms between we get data from all tasks and give it to master\n     */\n    static get SLAVES_INFOS_CHANGE_TIME() {\n      return 3000;\n    }\n\n    /**\n     * Say how many time between two look at CPU and memory usage for slaves and master process\n     */\n    static get DISPLAY_CPU_MEMORY_CHANGE_TIME() {\n      return CONSTANT.getInstance()\n        .activateConsoleDisplayMode ? false : 3000;\n    }\n\n    /**\n     * String that ask for a quit of ELIOT whole system\n     */\n    static get QUIT() {\n      return '__quit_eliot_order__';\n    }\n  };\n}\n"]}