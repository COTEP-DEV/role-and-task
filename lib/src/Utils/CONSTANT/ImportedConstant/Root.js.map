{"version":3,"sources":["../../../../../src/Utils/CONSTANT/ImportedConstant/Root.es6"],"names":["superclass","instance","CONSTANT","ABSTRACT_TASK","name","color","id","idsAllowedRole","Master1_0","require","default","Slave1_0","ABSTRACT_ROLE","ABSTRACT_MASTER_ROLE","ABSTRACT_SLAVE_ROLE","MASTER_ROLE","class","SLAVE_ROLE","LAUNCHING","CHECKING_AND_HEAL","DATABASE_MAINTAINANCE","READY","IN_PRODUCTION","ERROR","CLOSE","ELIOT_STATE","MASTER","SLAVE","MODE","alias","MODE_OPTIONS","CONFIGURATION_FILENAME","ABSTRACT_SOCKET_COMMUNICATION_SYSTEM","ZEROMQ","SOCKETIO","HEAD","BODY","COLLECTION_CRUD","SCREEN_STATUS_NEWS","BREAKDOWN_PARAMETER_NEWS","NEW_COMMAND_FOR_OBJ","ASK_DISCONNECT_IOT","ASK_VIEW_CALCULATION","IOT_CONNECTION_EVENT","IOT_DISCONNECTION_EVENT","NOTIFY_INTEREST_INTO_IOT_SCREENSHOT","NEW_EXPORT_CONNECT_OBJECT_LAST_VALUE","EPURATE_CONNECT_OBJECT_LAST_VALUE_EXPORT","NEW_EXPORT_CONNECT_OBJECT_DISPONIBILITY_TIME","CANCEL_DATA_EXPORT","NEW_IMPORT","NOTIFY_DISPLAY_CONFIGURATION_CHANGE","MESSAGES","SLAVE_CONFIRMATION_INFORMATIONS","LIST_TASKS","CONNECT_TASK_TO_TASK","START_TASK","STOP_TASK","STATE_CHANGE","GENERIC_CHANNEL_DATA","OUTPUT_TEXT","INFOS_ABOUT_SLAVES","ERROR_HAPPENED","ASK_DB_INIT","DB_INIT_DONE","ASK_DATABASE_CONNECTION_CHANGE","CHANGE_DATABASE_CONNECTION","IP_SERVER","PORT_SERVER","IDENTIFIER","getInstance","masterMessageWaitingTimeout","waitLinkApiMessage","masterMessageWaitingTimeoutStateChange","masterMessageWaitingTimeoutStopTask","DB_INITIALIZATION","DB_INITIALIZATION_PERCENTAGE","ROLE_DISPLAY","SYSTEM_CHECKING","SYSTEM_HEALING","activateConsoleDisplayMode"],"mappings":"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","file":"Root.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n/**\n * This class contains high levels constant\n * It needs to be the root of extends in CONSTANT.es6\n */\n\nlet instance = null;\n\n/**\n * This class is a Singleton\n */\nexport default function (superclass) {\n  return class CONSTANT extends superclass {\n    /**\n     * Constructor of the singleton class\n     */\n    constructor() {\n      if (instance) return instance;\n\n      super();\n\n      instance = this;\n\n      return instance;\n    }\n\n    /**\n     * Return the unique instance of the class\n     */\n    static getInstance() {\n      return instance || new CONSTANT();\n    }\n\n    /**\n     * Default tasks\n     */\n    static get DEFAULT_TASK() {\n      return {\n        ABSTRACT_TASK: {\n          name: 'Abstract Task',\n          color: 'white',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n\n          idsAllowedRole: [],\n        },\n      };\n    }\n\n    /**\n     * Ids of the default roles\n     *\n     * Have to use require to avoid circular import\n     */\n    static get DEFAULT_ROLE() {\n      const Master1_0 = require('../../../RoleSystem/Role/RoleMaster/Master1_0.js')\n        .default;\n\n      const Slave1_0 = require('../../../RoleSystem/Role/RoleSlave/Slave1_0.js')\n        .default;\n\n      return {\n        ABSTRACT_ROLE: {\n          name: 'Abstract Role',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n        },\n\n        ABSTRACT_MASTER_ROLE: {\n          // -1 means not usable (need to be implemented)\n          name: 'Abstract Master Role',\n\n          id: -1,\n        },\n\n        ABSTRACT_SLAVE_ROLE: {\n          name: 'Abstract Slave Role',\n\n          // -1 means not usable (need to be implemented)\n          id: -1,\n        },\n\n        MASTER_ROLE: {\n          name: 'Master',\n          id: 1,\n          class: Master1_0,\n        },\n\n        SLAVE_ROLE: {\n          name: 'Slave',\n          id: 2,\n          class: Slave1_0,\n        },\n      };\n    }\n\n    /**\n     * The Eliot global state (what you can do depends on the actual state)\n     */\n    static get ELIOT_STATE() {\n      return {\n        // /!\\\n        //        DO NOT USE 0 VALUE DUE TO === COMPARAISONS\n        // /!\\\n        //\n        // /!\\    DO NOT FORGET TO LOOK AT ASCII_ART_ELIOT_STATE_DISPLAY_CONSOLE\n        //\n\n        // ELIOT is in launching progress (launching slaves, tasks, starting servers...)\n        LAUNCHING: 1,\n\n        // ELIOT is in an checking phase (look at database integrity, collections consistency...)\n        CHECKING_AND_HEAL: 2,\n\n        // We want to do something on the database, the system must be in particular position\n        DATABASE_MAINTAINANCE: 3,\n\n        // The system is ready to get started (waiting the IN_PRODUCTION to come)\n        READY: 4,\n\n        // The system is running\n        IN_PRODUCTION: 5,\n\n        // The system got an error\n        ERROR: 6,\n\n        // The system have to close\n        CLOSE: 7,\n      };\n    }\n\n    /**\n     * Translate the eliot state\n     */\n    static get ELIOT_STATE_TRANSLATION() {\n      return {\n        [CONSTANT.ELIOT_STATE.LAUNCHING]: 'Launching',\n        [CONSTANT.ELIOT_STATE.CHECKING_AND_HEAL]: 'Checking and heal',\n        [CONSTANT.ELIOT_STATE.DATABASE_MAINTAINANCE]: 'Database maintainance',\n        [CONSTANT.ELIOT_STATE.READY]: 'Ready',\n        [CONSTANT.ELIOT_STATE.IN_PRODUCTION]: 'in production',\n        [CONSTANT.ELIOT_STATE.ERROR]: 'Error',\n        [CONSTANT.ELIOT_STATE.CLOSE]: 'Close',\n      };\n    }\n\n    /* ************************************************************************************* */\n    /* *************************** ELIOT LAUNCHING MODE ************************************ */\n    /* ************************************************************************************* */\n\n    /**\n     * Different eliot launching mode and the keywords to use in CLI to pick one of them\n     */\n    static get ELIOT_LAUNCHING_MODE() {\n      return {\n        MASTER: 'master',\n        SLAVE: 'slave',\n      };\n    }\n\n    /**\n     * Different eliot launching parameters\n     */\n    static get ELIOT_LAUNCHING_PARAMETERS() {\n      return {\n        MODE: {\n          name: 'mode',\n          alias: 'm',\n        },\n\n        MODE_OPTIONS: {\n          name: 'mode-options',\n          alias: 'o',\n        },\n      };\n    }\n\n    /**\n     * Options that can be passed to mode-options\n     */\n    static get DETAILED_MODE_OPTIONS_PARAMETERS() {\n      return {\n        CONFIGURATION_FILENAME: 'configurationFilename',\n      };\n    }\n\n    /**\n     * Path to get the main\n     */\n    static get PATH_TO_MAIN() {\n      return 'src/systemBoot/systemBoot.js';\n    }\n\n    /* ************************************************************************************* */\n    /* **************************** COMMUNICATION SYSTEM *********************************** */\n    /* ************************************************************************************* */\n\n    /**\n     * Socket Communication systems that can be used on ELIOT\n     */\n    static get SOCKET_COMMUNICATION_SYSTEM() {\n      return {\n        ABSTRACT_SOCKET_COMMUNICATION_SYSTEM: 'Abstract Communication System',\n        ZEROMQ: 'ZeroMQ aka OMQ',\n        SOCKETIO: 'Socket.io',\n      };\n    }\n\n    /* ************************************************************************************* */\n    /* ********************************* ROLE & TASKS ************************************** */\n    /* ************************************************************************************* */\n\n    /**\n     * Keywords used in communication protocols between tasks\n     */\n    static get PROTOCOL_KEYWORDS() {\n      return {\n        HEAD: 'head',\n        BODY: 'body',\n      };\n    }\n\n    /**\n     * The data that are news\n     */\n    static get GENERIC_DATA_NEWS() {\n      return {\n        // News about a collection CRUD that happended\n        COLLECTION_CRUD: 'collection_crud',\n\n        // Some news about a screen status\n        SCREEN_STATUS_NEWS: 'screen_status_news',\n\n        // Some news about some parameter status\n        BREAKDOWN_PARAMETER_NEWS: 'breakdown_parameters_news',\n\n        // There is some command to execute on objects\n        NEW_COMMAND_FOR_OBJ: 'new_command_for_obj',\n\n        // We need some iot to disconnect\n        ASK_DISCONNECT_IOT: 'ask_disconnect_iot',\n\n        // Ask for a view to get calculed\n        ASK_VIEW_CALCULATION: 'ask_view_calculation',\n\n        // An IOT get connected\n        IOT_CONNECTION_EVENT: 'iot_connection_event',\n\n        // An IOT get disconnected\n        IOT_DISCONNECTION_EVENT: 'iot_disconnection_event',\n\n        // We are interested about connected object screenshots\n        NOTIFY_INTEREST_INTO_IOT_SCREENSHOT: 'iot_screenshot_interest',\n\n        // We export new data\n        NEW_EXPORT_CONNECT_OBJECT_LAST_VALUE: 'new_export_connected_object_last_value',\n\n        // We epurate exported old files\n        EPURATE_CONNECT_OBJECT_LAST_VALUE_EXPORT: 'epurate_connected_object_last_value_export',\n\n        // We export new data\n        NEW_EXPORT_CONNECT_OBJECT_DISPONIBILITY_TIME: 'new_export_connected_object_disponibility_time',\n\n        // We want to stop the calculation\n        CANCEL_DATA_EXPORT: 'cancel_data_export',\n\n        // We export new data\n        NEW_IMPORT: 'new_import',\n\n        // We export new data\n        NOTIFY_DISPLAY_CONFIGURATION_CHANGE: 'display_configuration_changed',\n      };\n    }\n\n    /**\n     * Master/Slave messages used in theirs protocols\n     */\n    static get PROTOCOL_MASTER_SLAVE() {\n      return {\n        // Full messages that are exchanged like that master->client and used as head by client\n        MESSAGES: {\n          // We close the slave\n          CLOSE: 'clo_s',\n\n          // We list the tasks that are launched & the type of slave\n          SLAVE_CONFIRMATION_INFORMATIONS: 'l_c_i',\n\n          // Ask for a listing of tasks\n          LIST_TASKS: 'list_t',\n\n          // We connect two task together\n          CONNECT_TASK_TO_TASK: 'con_t_t',\n\n          // We start a task\n          START_TASK: 'star_ta',\n\n          // We stop a task\n          STOP_TASK: 'sto_ta',\n\n          // We declare having changed the state of ELIOT (launching, ready...)\n          STATE_CHANGE: 's_ch',\n\n          // We send data throught a generic channel\n          GENERIC_CHANNEL_DATA: 'gen_d',\n\n          // We send text from slave to master - to display it\n          OUTPUT_TEXT: 'txt',\n\n          // Slaves send theirs infos to the master\n          INFOS_ABOUT_SLAVES: 'sl_i',\n\n          // An error happened on a slave -> It tells the master\n          ERROR_HAPPENED: 'error_happened',\n\n          // A Slave ask the master to initialize the database\n          // The master can answer no\n          ASK_DB_INIT: 'adi',\n\n          // A Slave tell the master the DBInitialization finished\n          DB_INIT_DONE: 'dbid',\n\n          // A Slave ask the master to update the database (startup)\n          // Ask for connection change\n          ASK_DATABASE_CONNECTION_CHANGE: 'asbchan',\n\n          // Change the database connection\n          CHANGE_DATABASE_CONNECTION: 'dbcon',\n        },\n      };\n    }\n\n    /**\n     * Args that are passed to a slave to start\n     */\n    static get SLAVE_START_ARGS() {\n      return {\n        IP_SERVER: 'ipServer',\n        PORT_SERVER: 'portServer',\n        IDENTIFIER: 'identifier',\n      };\n    }\n\n    /**\n     * The amount of time a master wait for a slave message before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT() {\n      return CONSTANT.getInstance()\n        .masterMessageWaitingTimeout || 300000;\n    }\n\n    /**\n     * The amount of time a linkApi wait for an answer from calculApi before to timeout\n     */\n    static get WAIT_LINK_API_MESSAGE() {\n      return CONSTANT.getInstance()\n        .waitLinkApiMessage || 300000;\n    }\n\n    /**\n     * The amount of time a master wait for a slave message to acknowledge the state change before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT_STATE_CHANGE() {\n      return CONSTANT.getInstance()\n        .masterMessageWaitingTimeoutStateChange || 300000;\n    }\n\n    /**\n     * The amount of time a master wait for a slave message before to timeout\n     */\n    static get MASTER_MESSAGE_WAITING_TIMEOUT_STOP_TASK() {\n      return CONSTANT.getInstance()\n        .masterMessageWaitingTimeoutStopTask || 300000;\n    }\n\n    /**\n     * Args that are passed to a master to start\n     */\n    static get MASTER_START_ARGS() {\n      return {\n        IP_SERVER: 'ipServer',\n        PORT_SERVER: 'portServer',\n      };\n    }\n\n    /**\n     * Tags that specify the purpose of a text to display.\n     * Theses tags are used when we want to redirect the data to display\n     */\n    static get MESSAGE_DISPLAY_TAGS() {\n      return {\n        ELIOT_STATE: 1,\n        DB_INITIALIZATION: 2,\n        DB_INITIALIZATION_PERCENTAGE: 3,\n        ROLE_DISPLAY: 3,\n        ERROR: 4,\n        SYSTEM_CHECKING: 5,\n        SYSTEM_HEALING: 6,\n      };\n    }\n\n    /**\n     * How many ms between we get data from all tasks and give it to master\n     */\n    static get SLAVES_INFOS_CHANGE_TIME() {\n      return 3000;\n    }\n\n    /**\n     * Say how many time between two look at CPU and memory usage for slaves and master process\n     */\n    static get DISPLAY_CPU_MEMORY_CHANGE_TIME() {\n      return CONSTANT.getInstance()\n        .activateConsoleDisplayMode ? false : 3000;\n    }\n\n    /**\n     * String that ask for a quit of ELIOT whole system\n     */\n    static get QUIT() {\n      return '__quit_eliot_order__';\n    }\n  };\n}\n"]}