{"version":3,"sources":["../../../../../src/Utils/CONSTANT/ImportedConstant/ZeroMQ.es6"],"names":["superclass","MODE","SERVER","CLIENT","SOCKET_TYPE","OMQ_REQ","OMQ_REP","OMQ_DEALER","OMQ_ROUTER","OMQ_PUB","OMQ_SUB","OMQ_XPUB","OMQ_XSUB","OMQ_PUSH","OMQ_PULL","OMQ_PAIR","OMQ_STREAM","DEFAULT_SERVER_IP_ADDRESS","DEFAULT_SERVER_IP_PORT","TRANSPORT","TCP","IPC","INPROC","PGM","EPGM","FIRST_CONNECTION_TIMEOUT","CLIENT_IDENTITY_PREFIX","SERVER_IDENTITY_PREFIX","CLIENT_KEEP_ALIVE_TIME","CLIENT_MESSAGE","ALIVE","HELLO","SERVER_MESSAGE","CLOSE_ORDER","KEYWORDS_OMQ","MESSAGE","ACCEPT","CONNECT","CLOSE","CLOSE_ERROR","DISCONNECT","MONITOR_ERROR","MONITOR_TIME_CHECK","MONITOR_RELAUNCH_TIME","TIMEOUT_CLIENT_NO_PROOF_OF_LIVE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBAKe,UAAUA,UAAV,EAAsB;AACnC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACE;;;AADF,0BAIuB;AACnB,eAAO;AACL;AACAC,gBAAM;AACJC,oBAAQ,CADJ;AAEJC,oBAAQ;AAFJ,WAFD;;AAOLC,uBAAa;AACX;AACA;AACAC,qBAAS,KAHE;AAIXC,qBAAS,KAJE;AAKXC,wBAAY,QALD;AAMXC,wBAAY,QAND;AAOXC,qBAAS,KAPE;AAQXC,qBAAS,KARE;AASXC,sBAAU,MATC;AAUXC,sBAAU,MAVC;AAWXC,sBAAU,MAXC;AAYXC,sBAAU,MAZC;AAaXC,sBAAU,MAbC;AAcXC,wBAAY;AAdD,WAPR;;AAwBL;AACAC,qCAA2B,WAzBtB;;AA2BL;AACAC,kCAAwB,OA5BnB;;AA8BL;AACAC,qBAAW;AACT;AACAC,iBAAK,KAFI;;AAIT;AACAC,iBAAK,KALI;;AAOT;AACAC,oBAAQ,QARC;;AAUT;AACAC,iBAAK,KAXI;AAYTC,kBAAM;AAZG,WA/BN;AA6CL;AACAC,oCAA0B,MA9CrB;;AAgDL;AACAC,kCAAwB,QAjDnB;;AAmDL;AACAC,kCAAwB,QApDnB;;AAsDL;AACAC,kCAAwB,KAvDnB;;AAyDL;AACAC,0BAAgB;AACd;AACAC,mBAAO,YAFO;AAGd;AACAC,mBAAO;AAJO,WA1DX;;AAiEL;AACAC,0BAAgB;AACdC,yBAAa;AADC,WAlEX;;AAsEL;AACAC,wBAAc;AACZC,qBAAS,SADG;AAEZC,oBAAQ,QAFI;AAGZC,qBAAS,SAHG;AAIZC,mBAAO,OAJK;AAKZC,yBAAa,aALD;AAMZC,wBAAY,YANA;AAOZC,2BAAe;AAPH,WAvET;;AAiFL;AACAC,8BAAoB,EAlFf;;AAoFL;AACAC,iCAAuB,GArFlB;;AAuFL;AACA;AACAC,2CAAiC;AAzF5B,SAAP;AA2FD;;AAED;;;;AAlGF;AAAA;AAAA,0BAqGiD;AAC7C,eAAO,KAAP;AACD;AAvGH;AAAA;AAAA,IAA8B5C,UAA9B;AAyGD,C","file":"ZeroMQ.js","sourcesContent":["/* ************************************************************************************* */\n/* *******************************  ZERO MQ  ******************************************* */\n/* ************************************************************************************* */\n\n\nexport default function (superclass) {\n  return class CONSTANT extends superclass {\n    /**\n     * ZeroMQ Data\n     */\n    static get ZERO_MQ() {\n      return {\n        // The mode you want run ZeroMQ on\n        MODE: {\n          SERVER: 0,\n          CLIENT: 1,\n        },\n\n        SOCKET_TYPE: {\n          // Look at the ZeroMQ documentation to learn more about which one to use\n          // http://api.zeromq.org/4-0:OMQ-socket\n          OMQ_REQ: 'req',\n          OMQ_REP: 'rep',\n          OMQ_DEALER: 'dealer',\n          OMQ_ROUTER: 'router',\n          OMQ_PUB: 'pub',\n          OMQ_SUB: 'sub',\n          OMQ_XPUB: 'xpub',\n          OMQ_XSUB: 'xsub',\n          OMQ_PUSH: 'push',\n          OMQ_PULL: 'pull',\n          OMQ_PAIR: 'pair',\n          OMQ_STREAM: 'stream',\n        },\n\n        // default IP to use for a ZeroMQ server\n        DEFAULT_SERVER_IP_ADDRESS: '127.0.0.1',\n\n        // default port to use for a ZeroMQ server\n        DEFAULT_SERVER_IP_PORT: '19222',\n\n        // The protocol of the Transport to use (ZeroMQ protocols)\n        TRANSPORT: {\n          // unicast transport using TCP\n          TCP: 'tcp',\n\n          // local inter-process communication transport\n          IPC: 'ipc',\n\n          // local in-process (inter-thread) communication transport\n          INPROC: 'inproc',\n\n          // reliable multicast transport using PGM\n          PGM: 'pgm',\n          EPGM: 'epgm',\n        },\n        // First connection timeout time in ms\n        FIRST_CONNECTION_TIMEOUT: 300000,\n\n        // Used to name the socket\n        CLIENT_IDENTITY_PREFIX: 'client',\n\n        // Used to name the socket\n        SERVER_IDENTITY_PREFIX: 'server',\n\n        // Time between two 'alive' message from client to server\n        CLIENT_KEEP_ALIVE_TIME: 30000,\n\n        // Message client send to the server\n        CLIENT_MESSAGE: {\n          // Used to know if the client still alive\n          ALIVE: 'i_am_alive',\n          // Used to connect the socket to server\n          HELLO: 'i_exist',\n        },\n\n        // Message server send to the client\n        SERVER_MESSAGE: {\n          CLOSE_ORDER: 'close_order',\n        },\n\n        // Some OMQ keywords\n        KEYWORDS_OMQ: {\n          MESSAGE: 'message',\n          ACCEPT: 'accept',\n          CONNECT: 'connect',\n          CLOSE: 'close',\n          CLOSE_ERROR: 'close_error',\n          DISCONNECT: 'disconnect',\n          MONITOR_ERROR: 'monitor_error',\n        },\n\n        // check for events every 50ms and get all available events. (socket)\n        MONITOR_TIME_CHECK: 50,\n\n        // After a monitor crash, relaunch the monitor X ms after\n        MONITOR_RELAUNCH_TIME: 500,\n\n        // After the given time without any proof that a client is connected\n        // Disconnect the user\n        TIMEOUT_CLIENT_NO_PROOF_OF_LIVE: 60000,\n      };\n    }\n\n    /**\n     * MAx time we wait the new slave to connect at his creation\n     */\n    static get SLAVE_CREATION_CONNECTION_TIMEOUT() {\n      return 60000;\n    }\n  };\n}\n"]}