{"version":3,"sources":["../../../src/Utils/DevUtils.es6"],"names":["instance","DevUtils","x","strsParts","displayIndent","level","i","push","displayOneLevel","ptr","indent","parentIsKey","Array","white","forEach","y","Utils","isAJSON","isAMongooseObjectId","Date","green","getTextDueToDataType","str","commaJump","toRet","conf","check","v","do","colors","magenta","bold","yellow","toISOString","e","String","isAnID","isAnInteger","cyan","isAnUnsignedInteger","isAFloat","underline","isABoolean","bgGreen","bgRed","isNull","isAVersion","bgMagenta","isAString","some","RoleAndTask","getInstance","displayMessage","monoline","red","Error","dre","djson","d","global","DEV"],"mappings":"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","file":"DevUtils.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n/*\n * This class contain utilitaries functions for devs\n */\n\n// Includes\nimport colors from 'colors';\nimport Utils from './Utils.js';\nimport RoleAndTask from '../RoleAndTask.js';\n\nlet instance = null;\n\n/**\n * Contain utilitaries functions\n */\nexport default class DevUtils {\n  /**\n   * constructor\n   */\n  constructor() {\n    if (instance) return instance;\n\n    instance = this;\n\n    return instance;\n  }\n\n  /**\n   * Singleton Implementation\n   */\n  static getInstance() {\n    return instance || new DevUtils();\n  }\n\n  /**\n   * Get a Line\n   */\n  static get LINE() {\n    return '\\n>------------------------------------------\\n';\n  }\n\n  /**\n   * Display some JSON using json.stringify\n   * It's a simple shortcut\n   * @param {Object} x\n   */\n  static djson(x) {\n    const strsParts = [];\n\n    const displayIndent = (level) => {\n      for (let i = 0; i < level; i += 1) strsParts.push('    ');\n    };\n\n    const displayOneLevel = (ptr, indent = 0, parentIsKey = false) => {\n      // We have an array\n      if (ptr && ptr instanceof Array) {\n        if (!parentIsKey) displayIndent(indent);\n\n        strsParts.push('[\\n'.white);\n\n        ptr.forEach(y => displayOneLevel(y, indent + 1));\n\n        displayIndent(indent);\n\n        strsParts.push('],\\n'.white);\n\n        return;\n      }\n\n      // We have a json\n      if (Utils.isAJSON(ptr) && !Utils.isAMongooseObjectId(ptr) && !(ptr instanceof Date)) {\n        if (!parentIsKey) displayIndent(indent);\n\n        strsParts.push('{\\n'.white);\n\n        Object.keys(ptr)\n          .forEach((y) => {\n            displayIndent(indent + 1);\n\n            strsParts.push(`${y}: `.green);\n\n            displayOneLevel(ptr[y], indent + 1, true);\n          });\n\n        displayIndent(indent);\n\n        if (indent) strsParts.push('},\\n'.white);\n        else strsParts.push('}\\n'.white);\n\n        return;\n      }\n\n      const getTextDueToDataType = () => {\n        const str = `${ptr},\\n`;\n\n        const commaJump = ',\\n'.white;\n\n        let toRet = str;\n\n        // If we have a string do something\n        const conf = [{\n          check: v => v instanceof Date,\n\n          do: () => {\n            try {\n              return `${colors.magenta.bold('\\'')}${colors.yellow(ptr.toISOString())}${colors.magenta.bold('\\'')}${commaJump}`;\n            } catch (e) {\n              // Handle the range error\n              return `${colors.magenta.bold('\\'')}${colors.yellow(ptr)}${colors.magenta.bold('\\'')}${commaJump}`;\n            }\n          },\n        }, {\n          check: Utils.isAMongooseObjectId,\n\n          do: () => `${colors.magenta.bold('\\'')}${colors.yellow(String(ptr))}${colors.magenta.bold('\\'')}${commaJump}`,\n        }, {\n          check: Utils.isAnID,\n\n          do: () => `${colors.magenta.bold('\\'')}${colors.yellow(ptr)}${colors.magenta.bold('\\'')}${commaJump}`,\n        }, {\n          check: Utils.isAnInteger,\n\n          do: () => `${colors.cyan.bold(ptr)}${commaJump}`,\n        }, {\n          check: Utils.isAnUnsignedInteger,\n\n          do: () => `${colors.cyan.bold(ptr)}${commaJump}`,\n        }, {\n          check: Utils.isAFloat,\n\n          do: () => `${colors.cyan.bold.underline(ptr)}${commaJump}`,\n        }, {\n          check: Utils.isABoolean,\n\n          do: () => `${ptr ? colors.bgGreen.white(ptr) : colors.bgRed.white(ptr)}${commaJump}`,\n        }, {\n          check: Utils.isNull,\n\n          do: () => `${colors.bgRed.white.bold.underline(ptr)}${commaJump}`,\n        }, {\n          check: Utils.isAVersion,\n\n          do: () => `${colors.bgMagenta.bold('\\'')}${colors.bgMagenta.white(ptr)}${colors.bgMagenta.bold('\\'')}${commaJump}`,\n        }, {\n          check: Utils.isAString,\n\n          do: () => `${colors.magenta.bold('\\'')}${colors.magenta.bold(ptr)}${colors.magenta.bold('\\'')}${commaJump}`,\n        }];\n\n        conf.some((y) => {\n          if (y.check(ptr)) {\n            toRet = y.do();\n\n            return true;\n          }\n\n          return false;\n        });\n\n        return toRet;\n      };\n\n      // We have something else\n      if (!parentIsKey) displayIndent(indent);\n      strsParts.push(getTextDueToDataType());\n    };\n\n    displayOneLevel(x);\n\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: Utils.monoline(strsParts),\n      });\n  }\n\n  /**\n   * Display something\n   * It's a simple shortcut\n   * @param {Object} x\n   */\n  static d(x) {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `${x}`.red,\n      });\n  }\n\n  /**\n   * Display an Error\n   * It's a simple shortcut\n   * @param {Object} x\n   */\n  static dre(x) {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: String(x)\n          .bgRed.bold.white,\n      });\n  }\n\n  /**\n   * Smart display\n   * You gives something in enter and display it (Json or other)\n   * @param {Object} x\n   */\n  static sd(x) {\n    if (x instanceof Error) DevUtils.dre(x);\n    else if (Utils.isAJSON(x)) DevUtils.djson(x);\n    else DevUtils.d(x);\n  }\n}\n\n// export the var to other files using GLOBAL variable\nglobal.DEV = DevUtils;\n"]}