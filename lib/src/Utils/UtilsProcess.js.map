{"version":3,"sources":["../../../src/Utils/UtilsProcess.es6"],"names":["instance","UtilsProcess","allPids","goodPids","filter","x","Utils","checkThatAtLeastOneElementOfArray1ExistInArray2","RoleAndTask","getInstance","getFullSystemPids","healthy","evaluateNumberOfProcessThatExist","allProcess","zombies","getZombieFromAllPid","Promise","resolve","reject","childProcess","exec","monoline","error","stdout","stderr","Errors","String","regexp","filtered","match","pids","map","split","pid"],"mappings":";;;;;;;;;;;;;;;;;AAKA;;AACA;;AACA;;AACA;;AARA;AACA;AACA;AAEA;AAMA,IAAIA,QAAQ,GAAG,IAAf;AAEA;;;;IAGqBC,Y;;;AACnB;;;AAGA,0BAAc;AAAA;AACZ,QAAID,QAAJ,EAAc,OAAOA,QAAP;AAEdA,IAAAA,QAAQ,GAAG,IAAX;AAEA,WAAOA,QAAP;AACD;AAED;;;;;;;kCAGqB;AACnB,aAAOA,QAAQ,IAAI,IAAIC,YAAJ,EAAnB;AACD;AAED;;;;;;;;wCAK2BC,O,EAASC,Q,EAAU;AAC5C,aAAOD,OAAO,CAACE,MAAR,CAAe,UAAAC,CAAC;AAAA,eAAI,CAACC,kBAAMC,+CAAN,CAAsD,CAACF,CAAD,CAAtD,EAA2DF,QAA3D,CAAL;AAAA,OAAhB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;uBAKwBK,wBAAYC,WAAZ,GACnBC,iBADmB,E;;;AAAhBC,gBAAAA,O;;uBAImBV,YAAY,CAACW,gCAAb,E;;;AAAnBC,gBAAAA,U;AAEN;AACMC,gBAAAA,O,GAAUb,YAAY,CAACc,mBAAb,CAAiCF,UAAjC,EAA6CF,OAA7C,C;iDAET;AACLG,kBAAAA,OAAO,EAAPA,OADK;AAELH,kBAAAA,OAAO,EAAPA;AAFK,iB;;;;;;;;;;;;;;;;AAMT;;;;;;;;;;;;;;kDAIS,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,4CAAaC,IAAb,CAAkBd,kBAAMe,QAAN,CAAe,CAC/B;AACA,0BAF+B,EAI/B;AACA,uBAL+B,EAO/B;AACA,yGAR+B,CAAf,CAAlB,EAiBI,UAACC,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;AAC7B;AACA,wBAAIF,KAAJ,EAAW,OAAOJ,MAAM,CAAC,IAAIO,kBAAJ,CAAW,OAAX,YAAuBC,MAAM,CAACJ,KAAD,CAA7B,EAAD,CAAb,CAFkB,CAI7B;;AACA,wBAAIE,MAAJ,EAAY,OAAON,MAAM,CAAC,IAAIO,kBAAJ,CAAW,OAAX,YAAuBC,MAAM,CAACF,MAAD,CAA7B,EAAD,CAAb,CALiB,CAO7B;;AACA,wBAAMG,MAAM,GAAG,uBAAf;AAEA,wBAAMC,QAAQ,GAAGL,MAAM,CAACM,KAAP,CAAaF,MAAb,CAAjB,CAV6B,CAY7B;;AACA,wBAAMG,IAAI,GAAGF,QAAQ,CAACG,GAAT,CAAa,UAAA1B,CAAC;AAAA,6BAAIqB,MAAM,CAACrB,CAAC,CAAC2B,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAD,CAAV;AAAA,qBAAd,CAAb,CAb6B,CAe7B;;AACA,2BAAOf,OAAO,CAACa,IAAD,CAAd;AACD,mBAlCD;AAmCD,iBApCM,C;;;;;;;;;;;;;;;;AAuCT;;;;;;mCAGsBG,G,EAAK;AACzB,aAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,kCAAaC,IAAb,mBAA6Ba,GAA7B,GAAoC,UAACX,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;AAC7D;AACA,cAAIF,KAAJ,EAAW,OAAOJ,MAAM,CAAC,IAAIO,kBAAJ,CAAW,OAAX,YAAuBC,MAAM,CAACJ,KAAD,CAA7B,EAAD,CAAb,CAFkD,CAI7D;;AACA,cAAIE,MAAJ,EAAY,OAAON,MAAM,CAAC,IAAIO,kBAAJ,CAAW,OAAX,YAAuBC,MAAM,CAACF,MAAD,CAA7B,EAAD,CAAb;AAEZ,iBAAOP,OAAO,CAACgB,GAAD,CAAd;AACD,SARD;AASD,OAVM,CAAP;AAWD","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// imports\nimport childProcess from 'child_process';\nimport Utils from './Utils.js';\nimport Errors from './Errors.js';\nimport RoleAndTask from '../RoleAndTask.js';\n\nlet instance = null;\n\n/**\n * This class handle all processes that are related to PROGRAM instance\n */\nexport default class UtilsProcess {\n  /**\n   * Constructor\n   */\n  constructor() {\n    if (instance) return instance;\n\n    instance = this;\n\n    return instance;\n  }\n\n  /**\n   * Singleton implementation\n   */\n  static getInstance() {\n    return instance || new UtilsProcess();\n  }\n\n  /**\n   * Return an array that contains all zombies pids\n   * @param {Array} allPids\n   * @param {Array} goodPids\n   */\n  static getZombieFromAllPid(allPids, goodPids) {\n    return allPids.filter(x => !Utils.checkThatAtLeastOneElementOfArray1ExistInArray2([x], goodPids));\n  }\n\n  /**\n   * Evaluate PROGRAM processes and return a list of Zombies and Healthy processes that are actually running\n   */\n  static async evaluateProgramProcesses() {\n    // Get the processes that have right to exist\n    const healthy = await RoleAndTask.getInstance()\n      .getFullSystemPids();\n\n    // We first evalutate all process that exist\n    const allProcess = await UtilsProcess.evaluateNumberOfProcessThatExist();\n\n    // Extract the zombies from all pids that get detected\n    const zombies = UtilsProcess.getZombieFromAllPid(allProcess, healthy);\n\n    return {\n      zombies,\n      healthy,\n    };\n  }\n\n  /**\n   * Evaluate the number of processus that exist\n   */\n  static async evaluateNumberOfProcessThatExist() {\n    return new Promise((resolve, reject) => {\n      childProcess.exec(Utils.monoline([\n        // Display the processes\n        'ps aux',\n\n        // Give the result to the next command\n        ' | ',\n\n        // Use a regexp to identify the lines that correspond to PROGRAM processes only [+ tests mocha processes]\n        'grep -oEi \\'([0-9].+?node.+src/systemBoot.+)|([0-9].+?node.+node_modules.+?mocha.+)\\'',\n\n        //\n        // WARNING problem here, ps aux return the processes created by the command itself\n        // so we need to exclude it later using another regexp\n        //\n        // WARNING problem here, ps return the processes created by npm\n        // so we need to exclude it later using another regexp\n        //\n      ]), (error, stdout, stderr) => {\n        // Error of childProcess\n        if (error) return reject(new Errors('E8083', `${String(error)}`));\n\n        // Error of the console command\n        if (stderr) return reject(new Errors('E8083', `${String(stderr)}`));\n\n        // Pass a second regexp to remove the pid of the commands themselves moreover npm scripts\n        const regexp = /^((?!grep|npm).)+$/img;\n\n        const filtered = stdout.match(regexp);\n\n        // Now we extract pid from filtered data\n        const pids = filtered.map(x => String(x.split(' ')[0]));\n\n        // Exclude processes about the command itself\n        return resolve(pids);\n      });\n    });\n  }\n\n  /**\n   * Kill one process\n   */\n  static killOneProcess(pid) {\n    return new Promise((resolve, reject) => {\n      childProcess.exec(`kill -9 ${pid}`, (error, stdout, stderr) => {\n        // Error of childProcess\n        if (error) return reject(new Errors('E8083', `${String(error)}`));\n\n        // Error of the console command\n        if (stderr) return reject(new Errors('E8083', `${String(stderr)}`));\n\n        return resolve(pid);\n      });\n    });\n  }\n}\n"],"file":"UtilsProcess.js"}