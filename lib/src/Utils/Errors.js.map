{"version":3,"sources":["../../../src/Utils/Errors.es6"],"names":["ErrorsLibrary","declareCodes","ESTACKTRACE","E0000","EUNEXPECTED","OUT_OF_MEMORY","INVALID_LAUNCHING_MODE","INVALID_LAUNCHING_PARAMETER","ERROR_CREATING_FILE_API","SLAVE_ERROR","GENERAL_CATCH","MAINTAINANCE","E2000","E2001","E2002","E2003","E2004","E2005","E2006","E2007","E2008","Errors","RoleAndTask","getInstance","displayMessage","str","getColoredErrorString","tags","CONSTANT","MESSAGE_DISPLAY_TAGS","ERROR","getErrorString","red","bold"],"mappings":";;;;;;;;;;;;;;;;;;;AASA;;AAEA;;AACA;;AAZA;AACA;AACA;;AAEA;;;AAIA;AAKA;AAEA;AAEAA,mBAAcC,YAAd,CAA2B;AACzB;AACAC,EAAAA,WAAW,EAAE,aAFY;AAIzB;AACAC,EAAAA,KAAK,EAAE,oBALkB;AAOzB;AACAC,EAAAA,WAAW,EAAE,kBARY;AAUzB;AACAC,EAAAA,aAAa,EAAE,oDAXU;AAazB;AACAC,EAAAA,sBAAsB,EAAE,wBAdC;AAezBC,EAAAA,2BAA2B,EAAE,8BAfJ;AAgBzBC,EAAAA,uBAAuB,EAAE,wCAhBA;AAkBzB;AACAC,EAAAA,WAAW,EAAE,aAnBY;AAqBzB;AACAC,EAAAA,aAAa,EAAE,eAtBU;AAwBzB;AACAC,EAAAA,YAAY,EAAE,4BAzBW;AA2BzB;AACAC,EAAAA,KAAK,EAAE,yBA5BkB;AA6BzBC,EAAAA,KAAK,EAAE,wBA7BkB;AA8BzBC,EAAAA,KAAK,EAAE,sCA9BkB;AA+BzBC,EAAAA,KAAK,EAAE,yBA/BkB;AAgCzBC,EAAAA,KAAK,EAAE,wBAhCkB;AAiCzBC,EAAAA,KAAK,EAAE,mCAjCkB;AAkCzBC,EAAAA,KAAK,EAAE,iCAlCkB;AAmCzBC,EAAAA,KAAK,EAAE,gCAnCkB;AAoCzBC,EAAAA,KAAK,EAAE;AApCkB,CAA3B;AAuCA;;;;;IAGqBC,M;;;;;;;;;;;;;AACnB;;;;0CAIsB;AACpBC,8BAAYC,WAAZ,GACGC,cADH,CACkB;AACdC,QAAAA,GAAG,YAAK,KAAKC,qBAAL,CAA2B,IAA3B,CAAL,SADW;AAGdC,QAAAA,IAAI,EAAE,CACJC,qBAASC,oBAAT,CAA8BC,KAD1B;AAHQ,OADlB;AAQD;AAED;;;;;;;mCAIe;AACbR,8BAAYC,WAAZ,GACGC,cADH,CACkB;AACdC,QAAAA,GAAG,EAAE,UAAG,KAAKM,cAAL,EAAH,UAA+BC,GAA/B,CAAmCC,IAD1B;AAEdN,QAAAA,IAAI,EAAE,CACJC,qBAASC,oBAAT,CAA8BC,KAD1B;AAFQ,OADlB;AAOD;;;EA5BiC9B,kB","sourcesContent":["//\n// Copyright (c) 2019 by Cotep. All Rights Reserved.\n//\n\n/*\n * This class handle errors in the app\n */\n\n// Includes\nimport ErrorsLibrary from '@cotep/errors';\n\nimport RoleAndTask from '../RoleAndTask.js';\nimport CONSTANT from './CONSTANT/CONSTANT.js';\n// ----------------------\n\n// To do once\n\nErrorsLibrary.declareCodes({\n  // Special error that say we just want to add some extra stack trace data (but without using new error code)\n  ESTACKTRACE: 'Stack Trace',\n\n  // Default error\n  E0000: 'No Specified Error',\n\n  // Unexpected error\n  EUNEXPECTED: 'Unexpected Error',\n\n  // It's bad, very bad! :()\n  OUT_OF_MEMORY: 'Out of memory. Prevent a memory allocation failure',\n\n  // Launching error\n  INVALID_LAUNCHING_MODE: 'Invalid launching mode',\n  INVALID_LAUNCHING_PARAMETER: 'Invalid launching parameters',\n  ERROR_CREATING_FILE_API: 'Impossible ti create the api.json file',\n\n  // Slave Error\n  SLAVE_ERROR: 'Slave Error',\n\n  // General catch\n  GENERAL_CATCH: 'General Catch',\n\n  // MAINTAINANCE\n  MAINTAINANCE: 'Program is in maintainance',\n\n  // Server Error\n  E2000: 'Cannot start API server',\n  E2001: 'Cannot stop API server',\n  E2002: 'Unknown API server at the given port',\n  E2003: 'Cannot start OBJ server',\n  E2004: 'Cannot stop OBJ server',\n  E2005: 'ZeroMQ: Cannot connect the server',\n  E2006: 'ZeroMQ: Cannot close the socket',\n  E2007: 'ZeroMQ: Cannot bind the server',\n  E2008: 'ZeroMQ: Bad socketType for the kind of ZeroMQ implementation you choose',\n});\n\n/**\n * Handles errors in application. It contains Error codes and functions to manage them\n */\nexport default class Errors extends ErrorsLibrary {\n  /**\n   * Display the colored error\n   * @override\n   */\n  displayColoredError() {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `${this.getColoredErrorString(true)} - 2`,\n\n        tags: [\n          CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n        ],\n      });\n  }\n\n  /**\n   * Display the recorded error\n   * @override\n   */\n  displayError() {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `${this.getErrorString()} - 1`.red.bold,\n        tags: [\n          CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n        ],\n      });\n  }\n}\n"],"file":"Errors.js"}