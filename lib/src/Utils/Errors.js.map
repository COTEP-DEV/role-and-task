{"version":3,"sources":["../../../src/Utils/Errors.es6"],"names":["ErrorsLibrary","declareCodes","ESTACKTRACE","E0000","EUNEXPECTED","INVALID_LAUNCHING_MODE","INVALID_LAUNCHING_PARAMETER","ERROR_CREATING_FILE_API","SLAVE_ERROR","GENERAL_CATCH","MAINTAINANCE","E2000","E2001","E2002","E2003","E2004","E2005","E2006","E2007","E2008","Errors","RoleAndTask","getInstance","displayMessage","str","getColoredErrorString","tags","CONSTANT","MESSAGE_DISPLAY_TAGS","ERROR","getErrorString","red","bold"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AAEA;;;;AACA;;;;;;AACA;;AAEA;;AAEAA,iBAAcC,YAAd,CAA2B;AACzB;AACAC,eAAa,aAFY;;AAIzB;AACAC,SAAO,oBALkB;;AAOzB;AACAC,eAAa,kBARY;;AAUzB;AACAC,0BAAwB,wBAXC;AAYzBC,+BAA6B,8BAZJ;AAazBC,2BAAyB,wCAbA;;AAezB;AACAC,eAAa,aAhBY;;AAkBzB;AACAC,iBAAe,eAnBU;;AAqBzB;AACAC,gBAAc,4BAtBW;;AAwBzB;AACAC,SAAO,yBAzBkB;AA0BzBC,SAAO,wBA1BkB;AA2BzBC,SAAO,sCA3BkB;AA4BzBC,SAAO,yBA5BkB;AA6BzBC,SAAO,wBA7BkB;AA8BzBC,SAAO,mCA9BkB;AA+BzBC,SAAO,iCA/BkB;AAgCzBC,SAAO,gCAhCkB;AAiCzBC,SAAO;AAjCkB,CAA3B;;AAoCA;;;AArDA;AACA;AACA;;AAEA;;;;AAIA;;IAgDqBC,M;;;;;;;;;;;AACnB;;;;0CAIsB;AACpBC,4BAAYC,WAAZ,GACGC,cADH,CACkB;AACdC,aAAQ,KAAKC,qBAAL,CAA2B,IAA3B,CAAR,SADc;;AAGdC,cAAM,CACJC,mBAASC,oBAAT,CAA8BC,KAD1B;AAHQ,OADlB;AAQD;;AAED;;;;;;;mCAIe;AACbR,4BAAYC,WAAZ,GACGC,cADH,CACkB;AACdC,aAAK,CAAG,KAAKM,cAAL,EAAH,WAA+BC,GAA/B,CAAmCC,IAD1B;AAEdN,cAAM,CACJC,mBAASC,oBAAT,CAA8BC,KAD1B;AAFQ,OADlB;AAOD;;;EA5BiC7B,gB;;kBAAfoB,M","file":"Errors.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n/*\n * This class handle errors in the app\n */\n\n// Includes\nimport ErrorsLibrary from '@cotep/errors';\n\nimport RoleAndTask from '../RoleAndTask.js';\nimport CONSTANT from './CONSTANT/CONSTANT.js';\n// ----------------------\n\n// To do once\n\nErrorsLibrary.declareCodes({\n  // Special error that say we just want to add some extra stack trace data (but without using new error code)\n  ESTACKTRACE: 'Stack Trace',\n\n  // Default error\n  E0000: 'No Specified Error',\n\n  // Unexpected error\n  EUNEXPECTED: 'Unexpected Error',\n\n  // Launching error\n  INVALID_LAUNCHING_MODE: 'Invalid launching mode',\n  INVALID_LAUNCHING_PARAMETER: 'Invalid launching parameters',\n  ERROR_CREATING_FILE_API: 'Impossible ti create the api.json file',\n\n  // Slave Error\n  SLAVE_ERROR: 'Slave Error',\n\n  // General catch\n  GENERAL_CATCH: 'General Catch',\n\n  // MAINTAINANCE\n  MAINTAINANCE: 'Program is in maintainance',\n\n  // Server Error\n  E2000: 'Cannot start API server',\n  E2001: 'Cannot stop API server',\n  E2002: 'Unknown API server at the given port',\n  E2003: 'Cannot start OBJ server',\n  E2004: 'Cannot stop OBJ server',\n  E2005: 'ZeroMQ: Cannot connect the server',\n  E2006: 'ZeroMQ: Cannot close the socket',\n  E2007: 'ZeroMQ: Cannot bind the server',\n  E2008: 'ZeroMQ: Bad socketType for the kind of ZeroMQ implementation you choose',\n});\n\n/**\n * Handles errors in application. It contains Error codes and functions to manage them\n */\nexport default class Errors extends ErrorsLibrary {\n  /**\n   * Display the colored error\n   * @override\n   */\n  displayColoredError() {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `${this.getColoredErrorString(true)} - 2`,\n\n        tags: [\n          CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n        ],\n      });\n  }\n\n  /**\n   * Display the recorded error\n   * @override\n   */\n  displayError() {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `${this.getErrorString()} - 1`.red.bold,\n        tags: [\n          CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n        ],\n      });\n  }\n}\n"]}