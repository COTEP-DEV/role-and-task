{"version":3,"sources":["../../../src/Utils/Errors.es6"],"names":["Errors","errCode","supString","functionName","Utils","getFunctionName","CONSTANT","NUMBER_OF_LEVEL_TO_GO_BACK_ERROR_CLASSIC","stringError","errorCode","happened","dad","error","setDad","_stringify","serialize","checkErrorOccur","Code","getErrorString","_dad","json","avoid","errorMeaning","getMeaning","moreInfos","happenedAt","RoleAndTask","getInstance","displayMessage","str","getColoredErrorString","tags","MESSAGE_DISPLAY_TAGS","ERROR","isFirst","strsParts","dadsDisplay","push","monoline","red","yellow","blue","grey","finalArrayToDisplay","spacesOffset","bold","underline","forEach","x","y","toRet","length","unknown","ptr","obj","convertStringToJSON","constructError","newErrorObj","err","funcName","handleStackTraceAdd","errToAdd","NUMBER_OF_LEVEL_TO_GO_BACK_ERROR_HANDLE_STACK_TRACE","staticIsAnError","String","stack","stackTrace","ESTACKTRACE","E0000","EUNEXPECTED","INVALID_LAUNCHING_MODE","INVALID_LAUNCHING_PARAMETER","ERROR_CREATING_FILE_API","SLAVE_ERROR","GENERAL_CATCH","MAINTAINANCE","E2000","E2001","E2002","E2003","E2004","E2005","E2006","E2007","E2008"],"mappings":"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","file":"Errors.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n/*\n * This class handle errors in the app\n */\n\n// Includes\nimport RoleAndTask from '../RoleAndTask.js';\n\nimport Utils from './Utils.js';\nimport CONSTANT from './CONSTANT/CONSTANT.js';\n// ----------------------\n\n/**\n * Handles errors in application. It contains Error codes and functions to manage them\n */\nexport default class Errors {\n  /**\n   * @param {String} errCode - the key associated to the error\n   * @param {String} functionName - where the error happened\n   * @param {String} supString - Supplement infos about the error\n   */\n  constructor(errCode, supString, functionName = Utils.getFunctionName(CONSTANT.NUMBER_OF_LEVEL_TO_GO_BACK_ERROR_CLASSIC)) {\n    this.stringError = '';\n    this.errorCode = 'E0000';\n    this.happened = '';\n\n    if (errCode) {\n      this.errorCode = errCode;\n\n      if (functionName) this.happened = functionName;\n    }\n\n    if (supString) this.stringError = supString;\n\n    this.dad = false;\n  }\n\n  /**\n   * We call this function to add some trace to the error\n   * @param {Errors} error - new Error that will help the trace\n   */\n  stackTrace(error) {\n    error.setDad(this);\n\n    return error;\n  }\n\n  /**\n   * Set a dad to the error (used by stack trace to create a stack trace using simple errors)\n   * @param {Errors} error\n   */\n  setDad(error) {\n    this.dad = error;\n  }\n\n  /**\n   * We serialize the error to be able to deserialize it after\n   * @param {?Boolean} _stringify - do we need to stringify before end? Used to call it recurively\n   *\n   * WARNING RECURSIVE FUNCTION\n   */\n  serialize(_stringify = true) {\n    const serialize = {\n      stringError: this.stringError,\n      errorCode: this.errorCode,\n      happened: this.happened,\n      dad: this.dad ? this.dad.serialize(false) : false,\n    };\n\n    return _stringify ? JSON.stringify(serialize) : serialize;\n  }\n\n  /**\n   * We deserialize a previously serialized error\n   * If the string is not a serialized error, create a new error with the string as new error infos\n   * @param {String} str\n   */\n  static deserialize(str) {\n    const obj = Utils.convertStringToJSON(str);\n\n    const constructError = (ptr) => {\n      const newErrorObj = new Errors();\n\n      newErrorObj.stringError = ptr.stringError || '';\n      newErrorObj.errorCode = ptr.errorCode || 'EUNEXPECTED';\n      newErrorObj.happened = ptr.happened || '';\n\n      if (ptr.dad) newErrorObj.dad = constructError(ptr.dad);\n\n      return newErrorObj;\n    };\n\n    // If the str is not an Errors serialized data\n    if (!obj) return new Errors('UNKNOWN_ERROR', str);\n\n    return constructError(obj);\n  }\n\n  /**\n   * Enum that contains errorCodes\n   * @return {{EX: number}}\n   */\n  static get Code() {\n    return {\n      // Special error that say we just want to add some extra stack trace data (but without using new error code)\n      ESTACKTRACE: 'Stack Trace',\n\n      // Default error\n      E0000: 'No Specified Error',\n\n      // Unexpected error\n      EUNEXPECTED: 'Unexpected Error',\n\n      // Launching error\n      INVALID_LAUNCHING_MODE: 'Invalid launching mode',\n      INVALID_LAUNCHING_PARAMETER: 'Invalid launching parameters',\n      ERROR_CREATING_FILE_API: 'Impossible ti create the api.json file',\n\n      // Slave Error\n      SLAVE_ERROR: 'Slave Error',\n\n      // General catch\n      GENERAL_CATCH: 'General Catch',\n\n      // MAINTAINANCE\n      MAINTAINANCE: 'Program is in maintainance',\n\n      // Server Error\n      E2000: 'Cannot start API server',\n      E2001: 'Cannot stop API server',\n      E2002: 'Unknown API server at the given port',\n      E2003: 'Cannot start OBJ server',\n      E2004: 'Cannot stop OBJ server',\n      E2005: 'ZeroMQ: Cannot connect the server',\n      E2006: 'ZeroMQ: Cannot close the socket',\n      E2007: 'ZeroMQ: Cannot bind the server',\n      E2008: 'ZeroMQ: Bad socketType for the kind of ZeroMQ implementation you choose',\n    };\n  }\n\n  /**\n   * Shortcut to handle an add to stack trace (special add --> ESTACKTRACE type)\n   * @param {String} funcName\n   * @param {?(Errors|Error)} err\n   */\n  static shortcutStackTraceSpecial(err, funcName) {\n    return Errors.handleStackTraceAdd(err, new Errors('ESTACKTRACE', '', funcName), funcName);\n  }\n\n  /**\n   * Add an error into a stack trace, handle the fact of unexpected errors\n   * @param {?(Errors|Error)} err\n   * @param {String} funcName\n   * @param {Errors} errToAdd\n   * @param {Boolean} logIt\n   * @param {?Number} type\n   */\n  static handleStackTraceAdd(err, errToAdd, funcName = Utils.getFunctionName(CONSTANT.NUMBER_OF_LEVEL_TO_GO_BACK_ERROR_HANDLE_STACK_TRACE)) {\n    if (!Errors.staticIsAnError(err)) return new Errors('EUNEXPECTED', String(err.stack || err), funcName);\n\n    return err.stackTrace(errToAdd);\n  }\n\n  /**\n   * Check if the errCode is a part of the stackTrace errors\n   * @param {String} errCode\n   */\n  checkErrorOccur(errCode) {\n    if (this.errorCode === errCode) return true;\n\n    if (!this.dad) return false;\n\n    return this.dad.checkErrorOccur(errCode);\n  }\n\n  /**\n   * Get the description associated to the recorded error\n   * @return {string}\n   */\n  getMeaning() {\n    return Errors.Code[this.errorCode] || '';\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return this.getErrorString();\n  }\n\n  /**\n   * Get the string that correspond to the recorded error (its a stringified json)\n   * @param {?Boolean} _dad\n   * @return {string}\n   */\n  getErrorString(_dad = false) {\n    const json = {};\n    let avoid = true;\n\n    if (this.errorCode !== 'ESTACKTRACE' || (!_dad && this.errorCode === 'ESTACKTRACE')) {\n      avoid = false;\n      json.errorCode = this.errorCode;\n      json.errorMeaning = this.getMeaning();\n\n      if (this.stringError) json.moreInfos = this.stringError;\n\n      if (this.happened) json.happenedAt = this.happened;\n    }\n\n    if (this.dad) json.dad = this.dad.getErrorString(true);\n\n    if (_dad && avoid) return json.dad;\n\n    if (_dad) return json;\n\n    if (avoid) return JSON.stringify(json.dad);\n\n    return JSON.stringify(json);\n  }\n\n  /**\n   * Display the colored error\n   */\n  displayColoredError() {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `${this.getColoredErrorString(true)} - 2`,\n\n        tags: [\n          CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n        ],\n      });\n  }\n\n  /**\n   * display the error into the console\n   * WARNING THIS FUNCTION IS RECURSIVE\n   * @param {Boolean} isFirst\n   */\n  getColoredErrorString(isFirst = true) {\n    const strsParts = [];\n    let dadsDisplay = [];\n\n    // Get the dad display\n    if (this.dad) {\n      // Here we have something like [dad, dad, dad, dad, dad, dad] displays with the latests the most high level trace\n      dadsDisplay = this.dad.getColoredErrorString(false);\n    }\n\n    // Create our own display\n    if (isFirst || this.errorCode !== 'ESTACKTRACE') {\n      strsParts.push(Utils.monoline([\n        '--> Error['.red,\n        `${this.errorCode}`.yellow,\n        ']: ['.red,\n        `${this.getMeaning()}`.yellow,\n        ']\\n'.red,\n      ]));\n    }\n\n    if (this.stringError) strsParts.push(`More infos: [${this.stringError}]\\n`.blue);\n\n    if (this.happened) strsParts.push(`Happened at: [${this.happened}]\\n`.grey);\n\n    // If we are the first called function, it means we have to actually handle the display\n    if (isFirst) {\n      // So have dad to display we have\n      // strsParts which is the highest level trace we have\n      // [dad, dad, dad, dad] which are the others traces, with the last dad the highest level trace\n\n      // Starting with the highest dad we start the display\n      const finalArrayToDisplay = [];\n\n      let spacesOffset = ' ';\n\n      finalArrayToDisplay.push(Utils.monoline([\n        'TRACE: '.bold.underline.red,\n        '--------------------------------------------------------------'.bold.red,\n        '\\n',\n      ]));\n\n      strsParts.forEach(x => finalArrayToDisplay.push(`| ${spacesOffset}${x}`));\n\n      dadsDisplay.forEach((x) => {\n        spacesOffset += ' ';\n\n        // When we add it in the final array, we insert the graphical '    ' spaces offset\n        x.forEach(y => finalArrayToDisplay.push(`| ${spacesOffset}${y}`));\n      });\n\n      finalArrayToDisplay.push(Utils.monoline([\n        '---------------------------------------------------------------------'.bold.red,\n        '\\n',\n      ]));\n\n      return Utils.monoline(finalArrayToDisplay);\n    }\n\n    // We do not have to handle the display just return our display and our dad display\n    let toRet = [];\n\n    if (strsParts.length) toRet.push(strsParts);\n\n    if (dadsDisplay.length) {\n      toRet = [\n        ...toRet,\n        ...dadsDisplay,\n      ];\n    }\n\n    return toRet;\n  }\n\n  /**\n   * Display the recorded error\n   */\n  displayError() {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `${this.getErrorString()} - 1`.red.bold,\n        tags: [\n          CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n        ],\n      });\n  }\n\n  /**\n   * Say if the parameter is an instance of the class Error\n   * @param {Object} unknown\n   * @return {Boolean}\n   */\n  isAnError(unknown) {\n    return unknown instanceof Errors;\n  }\n\n  /**\n   * Say if the parameter is an instance of the class Error\n   * @param {Object} unknown\n   * @return {Boolean}\n   */\n  static staticIsAnError(unknown) {\n    return unknown instanceof Errors;\n  }\n\n  /**\n   * Set a string to specify more the error\n   * @param {string} error - description of the error\n   */\n  setString(error) {\n    this.stringError = error;\n  }\n\n  /**\n   * Set the error code\n   * @param {String} errCode - key that refer to an error\n   */\n  setErrorCode(errCode) {\n    this.errorCode = errCode;\n  }\n\n  /**\n   * Get the string associated to the last code in stack\n   */\n  getLastStringInStack() {\n    let ptr = this;\n\n    while (ptr.dad) ptr = ptr.dad;\n\n    return ptr.stringError;\n  }\n\n  /**\n   * Get the error code (key that refer to the error)\n   * The last in the stack\n   * @return {String}\n   */\n  getLastErrorCodeInStack() {\n    let ptr = this;\n\n    while (ptr.dad) ptr = ptr.dad;\n\n    return ptr.errorCode;\n  }\n\n  /**\n   * Get the error\n   * The last in the stack\n   * @return {String}\n   */\n  getLastErrorInStack() {\n    let ptr = this;\n\n    while (ptr.dad) ptr = ptr.dad;\n\n    return ptr;\n  }\n\n  /**\n   * Get the error code (key that refer to the error)\n   * @return {String}\n   */\n  getErrorCode() {\n    return this.errorCode;\n  }\n}\n"]}