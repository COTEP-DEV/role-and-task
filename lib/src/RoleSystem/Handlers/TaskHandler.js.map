{"version":3,"sources":["../../../../src/RoleSystem/Handlers/TaskHandler.es6"],"names":["TaskHandler","getAllSomething","filter","x","isActive","activeTasks","getAllActiveTasks","length","all","map","gatherInfosFromTask","ret","xi","idTask","id","eliotState","oldEliotState","applyNewEliotState","args","startSomething","RoleAndTask","getInstance","displayMessage","str","green","blue","stopSomething","stopAllSomething","getSomethingListStatus","getSomething","AHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;AARA;AACA;AACA;;AAEA;IAoBqBA,W;;;;;;;;;;;AACnB;;;wCAGoB;AAClB,aAAO,KAAKC,eAAL,GACJC,MADI,CACG;AAAA,eAAKC,EAAEC,QAAF,EAAL;AAAA,OADH,CAAP;AAED;;AAED;;;;;;;;;;;;;AAIQC,2B,GAAc,KAAKC,iBAAL,E;;AAEpB;;oBACKD,YAAYE,M;;;;;iDAAe,E;;;;uBAEd,kBAAQC,GAAR,CAAYH,YAAYI,GAAZ,CAAgB;AAAA,yBAAKN,EAAEO,mBAAF,EAAL;AAAA,iBAAhB,CAAZ,C;;;;;;;;;;8BAA8D,E;;;AAA1EC,mB;iDAECA,IAAIF,GAAJ,CAAQ,UAACN,CAAD,EAAIS,EAAJ;AAAA,oDACVT,CADU;;AAGbU,4BAAQR,YAAYO,EAAZ,EAAgBE;AAHX;AAAA,iBAAR,C;;;;;;;;;;;;;;;;;AAOT;;;;;;;;;6GAKyBC,U,EAAYC,a;;;;;;AAC7BX,2B,GAAc,KAAKC,iBAAL,E;;AAEpB;;oBACKD,YAAYE,M;;;;;kDAAe,E;;;;uBAE1B,kBAAQC,GAAR,CAAYH,YAAYI,GAAZ,CAAgB;AAAA,yBAAKN,EAAEc,kBAAF,CAAqBF,UAArB,EAAiCC,aAAjC,CAAL;AAAA,iBAAhB,CAAZ,C;;;kDAEC,I;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;6GAKgBH,M,EAAQK,I;;;;;;;uBACJ,KAAKC,cAAL,CAAoBN,MAApB,EAA4BK,IAA5B,C;;;AAAZP,mB;;;AAENS,sCAAYC,WAAZ,GACGC,cADH,CACkB;AACdC,uBAAK,8BAAwBV,MAAxB,eAAyCW;AADhC,iBADlB;;kDAKOb,G;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;6GAKeE,M,EAAQK,I;;;;;;AACrBE,sCAAYC,WAAZ,GACGC,cADH,CACkB;AACdC,uBAAK,kCAA4BV,MAA5B,eAA6CY;AADpC,iBADlB;;;uBAKkB,KAAKC,aAAL,CAAmBb,MAAnB,EAA2BK,IAA3B,C;;;AAAZP,mB;;;AAENS,sCAAYC,WAAZ,GACGC,cADH,CACkB;AACdC,uBAAK,8BAAwBV,MAAxB,cAAwCW;AAD/B,iBADlB;;kDAKOb,G;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;YAIkBO,I,uEAAO,E;;;;;kDAChB,KAAKS,gBAAL,CAAsBT,IAAtB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;wCAGoB;AAClB,aAAO,KAAKU,sBAAL,EAAP;AACD;;AAED;;;;;;;;6GAIcf,M;;;;;kDACL,KAAKgB,YAAL,CAAkBhB,MAAlB,C;;;;;;;;;;;;;;;;;;EApG8BiB,kB;;kBAApB9B,W","file":"TaskHandler.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport AHandler from './AHandler.js';\nimport RoleAndTask from '../../RoleAndTask.js';\n\n/**\n * This class handle Task for the process\n * Meaning launching a Task, stop a Task\n *\n * data => [{\n *    name: String,\n *    color: String,\n *    id: Number,\n *    idsAllowedRole: [Number],\n *    obj: ATask,\n * }],\n *\n * (For example with Role)\n *\n * Call -> constructor(data, mapTaskConstantAndObject);\n */\nexport default class TaskHandler extends AHandler {\n  /**\n   * Get all active task in array\n   */\n  getAllActiveTasks() {\n    return this.getAllSomething()\n      .filter(x => x.isActive());\n  }\n\n  /**\n   * Get infos tasks relative to the type of tasks\n   */\n  async getInfosFromAllActiveTasks() {\n    const activeTasks = this.getAllActiveTasks();\n\n    // If there is no active tasks, no infos to retrieve\n    if (!activeTasks.length) return [];\n\n    const ret = await Promise.all(activeTasks.map(x => x.gatherInfosFromTask())) || [];\n\n    return ret.map((x, xi) => ({\n      ...x,\n\n      idTask: activeTasks[xi].id,\n    }));\n  }\n\n  /**\n   * To all tasks apply the new eliot state\n   * @param {Number} eliotState\n   * @param {Number} oldEliotState\n   */\n  async applyNewEliotState(eliotState, oldEliotState) {\n    const activeTasks = this.getAllActiveTasks();\n\n    // If there is no active tasks, no infos to retrieve\n    if (!activeTasks.length) return [];\n\n    await Promise.all(activeTasks.map(x => x.applyNewEliotState(eliotState, oldEliotState)));\n\n    return true;\n  }\n\n  /**\n   * Start the given Task\n   * @param {Number} idTask\n   * @param {Object} args\n   */\n  async startTask(idTask, args) {\n    const ret = await this.startSomething(idTask, args);\n\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `[TaskHandler] Task N°${idTask} started`.green,\n      });\n\n    return ret;\n  }\n\n  /**\n   * Stop the given Task\n   * @param {Number} idTask\n   * @param {Object} args\n   */\n  async stopTask(idTask, args) {\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `[TaskHandler] Ask Task N°${idTask} to stop`.blue,\n      });\n\n    const ret = await this.stopSomething(idTask, args);\n\n    RoleAndTask.getInstance()\n      .displayMessage({\n        str: `[TaskHandler] Task N°${idTask} stoped`.green,\n      });\n\n    return ret;\n  }\n\n  /**\n   * Stop all the running Tasks\n   * @param {?Object} args\n   */\n  async stopAllTask(args = {}) {\n    return this.stopAllSomething(args);\n  }\n\n  /**\n   * Get a list of running Task status (active or not)\n   */\n  getTaskListStatus() {\n    return this.getSomethingListStatus();\n  }\n\n  /**\n   * Get a task\n   * @param {idTask}\n   */\n  async getTask(idTask) {\n    return this.getSomething(idTask);\n  }\n}\n"]}