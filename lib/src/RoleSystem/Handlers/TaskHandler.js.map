{"version":3,"sources":["../../../../src/RoleSystem/Handlers/TaskHandler.ts"],"names":["TaskHandler","getAllSomething","filter","x","isActive","PromiseCommandPattern","func","activeTasks","getAllActiveTasks","length","Promise","all","map","gatherInfosFromTask","ret","xi","idTask","id","programState","oldProgramState","applyNewProgramState","args","startSomething","RoleAndTask","getInstance","displayMessage","str","green","blue","stopSomething","stopAllSomething","getSomethingListStatus","getSomething","AHandler"],"mappings":"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","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport AHandler from './AHandler.js';\nimport RoleAndTask from '../../RoleAndTask.js';\nimport PromiseCommandPattern from '../../Utils/PromiseCommandPattern.js';\n\n/**\n * This class handle Task for the process\n * Meaning launching a Task, stop a Task\n *\n * data => [{\n *    name: String,\n *    color: String,\n *    id: Number,\n *    idsAllowedRole: [Number],\n *    obj: ATask,\n * }],\n *\n * (For example with Role)\n *\n * Call -> constructor(data, mapTaskConstantAndObject);\n */\nexport default class TaskHandler extends AHandler {\n  /**\n   * Get all active task in array\n   */\n  getAllActiveTasks() {\n    return this.getAllSomething()\n      .filter(x => x.isActive());\n  }\n\n  /**\n   * Get infos tasks relative to the type of tasks\n   */\n  getInfosFromAllActiveTasks() {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const activeTasks = this.getAllActiveTasks();\n\n        // If there is no active tasks, no infos to retrieve\n        if (!activeTasks.length) return [];\n\n        const ret = await Promise.all(activeTasks.map(x => x.gatherInfosFromTask())) || [];\n\n        return ret.map((x, xi) => ({\n          ...x,\n\n          idTask: activeTasks[xi].id,\n        }));\n      },\n    });\n  }\n\n  /**\n   * To all tasks apply the new program state\n   * @param {Number} programState\n   * @param {Number} oldProgramState\n   */\n  applyNewProgramState(programState, oldProgramState) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const activeTasks = this.getAllActiveTasks();\n\n        // If there is no active tasks, no infos to retrieve\n        if (!activeTasks.length) return [];\n\n        await Promise.all(activeTasks.map(x => x.applyNewProgramState(programState, oldProgramState)));\n\n        return true;\n      },\n    });\n  }\n\n  /**\n   * Start the given Task\n   * @param {Number} idTask\n   * @param {Object} args\n   */\n  startTask(idTask, args) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const ret = await this.startSomething(idTask, args);\n\n        RoleAndTask.getInstance()\n          .displayMessage({\n            str: `[TaskHandler] Task N°${idTask} started`.green,\n          });\n\n        return ret;\n      },\n    });\n  }\n\n  /**\n   * Stop the given Task\n   * @param {Number} idTask\n   * @param {Object} args\n   */\n  stopTask(idTask, args) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        RoleAndTask.getInstance()\n          .displayMessage({\n            str: `[TaskHandler] Ask Task N°${idTask} to stop`.blue,\n          });\n\n        const ret = await this.stopSomething(idTask, args);\n\n        RoleAndTask.getInstance()\n          .displayMessage({\n            str: `[TaskHandler] Task N°${idTask} stoped`.green,\n          });\n\n        return ret;\n      },\n    });\n  }\n\n  /**\n   * Stop all the running Tasks\n   * @param {?Object} args\n   */\n  stopAllTask(args = {}) {\n    return new PromiseCommandPattern({\n      func: () => this.stopAllSomething(args),\n    });\n  }\n\n  /**\n   * Get a list of running Task status (active or not)\n   */\n  getTaskListStatus() {\n    return this.getSomethingListStatus();\n  }\n\n  /**\n   * Get a task\n   * @param {idTask}\n   */\n  getTask(idTask) {\n    return new PromiseCommandPattern({\n      func: () => this.getSomething(idTask),\n    });\n  }\n}\n"],"file":"TaskHandler.js"}