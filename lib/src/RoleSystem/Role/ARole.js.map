{"version":3,"sources":["../../../../src/RoleSystem/Role/ARole.es6"],"names":["ARole","name","CONSTANT","DEFAULT_ROLES","ABSTRACT_ROLE","id","active","taskHandler","idTask","Errors","getTask","args","startTask","role","stopTask","stopAllTask","getTaskListStatus","Utils","getFunctionName","head","body","PROTOCOL_KEYWORDS","HEAD","BODY"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;IAYqBA,K;AACnB,mBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAYC,mBAASC,aAAT,CAAuBC,aAAvB,CAAqCH,IAAjD;;AAEA,SAAKI,EAAL,GAAUH,mBAASC,aAAT,CAAuBC,aAAvB,CAAqCC,EAA/C;;AAEA,SAAKC,MAAL,GAAc,KAAd;;AAEA;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACD;;AAED;;;;;;;;;mCAKeA,W,EAAa;AAC1B,WAAKA,WAAL,GAAmBA,WAAnB;AACD;;AAED;;;;;;qCAGiB;AACf,aAAO,KAAKA,WAAZ;AACD;;AAED;;;;;;;;2GAIcC,M;;;;;oBACP,KAAKD,W;;;;;sBAAmB,IAAIE,gBAAJ,CAAW,OAAX,EAAoB,wBAApB,C;;;iDAEtB,KAAKF,WAAL,CAAiBG,OAAjB,CAAyBF,MAAzB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;6GAKgBA,M,EAAQG,I;;;;;oBACjB,KAAKJ,W;;;;;sBAAmB,IAAIE,gBAAJ,CAAW,OAAX,EAAoB,wBAApB,C;;;kDAEtB,KAAKF,WAAL,CAAiBK,SAAjB,CAA2BJ,MAA3B,6BACFG,IADE;AAELE,wBAAM;AAFD,mB;;;;;;;;;;;;;;;;;AAMT;;;;;;;;6GAIeL,M;;;;;oBACR,KAAKD,W;;;;;sBAAmB,IAAIE,gBAAJ,CAAW,OAAX,EAAoB,wBAApB,C;;;kDAEtB,KAAKF,WAAL,CAAiBO,QAAjB,CAA0BN,MAA1B,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;oBAIO,KAAKD,W;;;;;sBAAmB,IAAIE,gBAAJ,CAAW,OAAX,EAAoB,wBAApB,C;;;kDAEtB,KAAKF,WAAL,CAAiBQ,WAAjB,E;;;;;;;;;;;;;;;;;AAGT;;;;;;wCAGoB;AAClB,UAAI,CAAC,KAAKR,WAAV,EAAuB,OAAO,IAAIE,gBAAJ,CAAW,OAAX,EAAoB,wBAApB,CAAP;;AAEvB,aAAO,KAAKF,WAAL,CAAiBS,iBAAjB,EAAP;AACD;;AAED;;;;;;;;;AAQA;;;+BAGW;AACT,aAAO,KAAKV,MAAZ;AACD;;AAED;;;;;;;;;AAQA;;;;;;;;;;;sBAMQ,IAAIG,gBAAJ,CAAW,OAAX,4CAA4DQ,gBAAMC,eAAN,EAA5D,Y;;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;;;;sBAMQ,IAAIT,gBAAJ,CAAW,OAAX,4CAA4DQ,gBAAMC,eAAN,EAA5D,Y;;;;;;;;;;;;;;;;;AAGR;;;;;;;;yCAKqBC,I,EAAMC,I,EAAM;AAAA;;AAC/B,aAAO,iGACJlB,mBAASmB,iBAAT,CAA2BC,IADvB,EAC8BH,IAD9B,mDAEJjB,mBAASmB,iBAAT,CAA2BE,IAFvB,EAE8BH,IAF9B,qBAAP;AAID;;;;;;;;;sBA/BO,IAAIX,gBAAJ,CAAW,OAAX,4CAA4DQ,gBAAMC,eAAN,EAA5D,Y;;;;;;;;;;;;;;;;;;wBAhBU;AAChB,aAAO,KAAKjB,IAAZ;AACD;;;KA3GH;AACA;AACA;;AAEA;;;kBAiBqBD,K","file":"ARole.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport CONSTANT from '../../Utils/CONSTANT/CONSTANT.js';\nimport Utils from '../../Utils/Utils.js';\nimport Errors from '../../Utils/Errors.js';\n\n/**\n * ELIOT process have 0 or + defined Role\n *\n * A Role can be described as a purpose to fulfill\n *\n * Example: Master or Slave -> (The purpose of Master is to manage Slave)\n *\n * A ROLE MUST BE DEFINED AS A SINGLETON (Which means the implementation of getInstance)\n *\n * A ROLE CAN BE APPLIED ONLY ONCE (Ex: You can apply the ServerAPI only once, can't apply twice the ServerAPI Role for a ELIOT instance)\n * @interface\n */\nexport default class ARole {\n  constructor() {\n    this.name = CONSTANT.DEFAULT_ROLES.ABSTRACT_ROLE.name;\n\n    this.id = CONSTANT.DEFAULT_ROLES.ABSTRACT_ROLE.id;\n\n    this.active = false;\n\n    // Tasks handled (You need one)\n    this.taskHandler = false;\n  }\n\n  /**\n   * Setup a taskHandler to the role\n   * Every Role have its specific tasks\n   * @param {TaskHandler} taskHandler\n   */\n  setTaskHandler(taskHandler) {\n    this.taskHandler = taskHandler;\n  }\n\n  /**\n   * Return the task handler\n   */\n  getTaskHandler() {\n    return this.taskHandler;\n  }\n\n  /**\n   * Return the given task\n   * @param {Number} idTask\n   */\n  async getTask(idTask) {\n    if (!this.taskHandler) throw new Errors('EXXXX', 'No taskHandler defined');\n\n    return this.taskHandler.getTask(idTask);\n  }\n\n  /**\n   * Start a new task inside the role\n   * @param {String} idTask\n   * @param {Object} args\n   */\n  async startTask(idTask, args) {\n    if (!this.taskHandler) throw new Errors('EXXXX', 'No taskHandler defined');\n\n    return this.taskHandler.startTask(idTask, ({\n      ...args,\n      role: this,\n    }));\n  }\n\n  /**\n   * Stop a task inside a role\n   * @param {String} idTask\n   */\n  async stopTask(idTask) {\n    if (!this.taskHandler) throw new Errors('EXXXX', 'No taskHandler defined');\n\n    return this.taskHandler.stopTask(idTask);\n  }\n\n  /**\n   * Get tasks that are available to the role\n   */\n  async stopAllTask() {\n    if (!this.taskHandler) throw new Errors('EXXXX', 'No taskHandler defined');\n\n    return this.taskHandler.stopAllTask();\n  }\n\n  /**\n   * Return the list of tasks and theirs status (isActive: true/false)\n   */\n  getTaskListStatus() {\n    if (!this.taskHandler) return new Errors('EXXXX', 'No taskHandler defined');\n\n    return this.taskHandler.getTaskListStatus();\n  }\n\n  /**\n   * Get the name of the Role\n   * @return {String}\n   */\n  static get name() {\n    return this.name;\n  }\n\n  /**\n   * Is the Role active?\n   */\n  isActive() {\n    return this.active;\n  }\n\n  /**\n   * SINGLETON implementation\n   * @abstract\n   */\n  static async getInstance() {\n    throw new Errors('EXXXX', `Unimplemented getInstance methods in ${Utils.getFunctionName()} child`);\n  }\n\n  /**\n   * ELIOT start to play the role\n   * @param {Object} args\n   * @abstract\n   */\n  async start() {\n    throw new Errors('EXXXX', `Unimplemented getInstance methods in ${Utils.getFunctionName()} child`);\n  }\n\n  /**\n   * ELIOT stop to play the role\n   * @param {Object} args\n   * @abstract\n   */\n  async stop() {\n    throw new Errors('EXXXX', `Unimplemented getInstance methods in ${Utils.getFunctionName()} child`);\n  }\n\n  /**\n   * Build an head/body pattern message\n   * @param {String} head\n   * @param {Object} body\n   */\n  buildHeadBodyMessage(head, body) {\n    return JSON.stringify({\n      [CONSTANT.PROTOCOL_KEYWORDS.HEAD]: head,\n      [CONSTANT.PROTOCOL_KEYWORDS.BODY]: body,\n    });\n  }\n}\n"]}