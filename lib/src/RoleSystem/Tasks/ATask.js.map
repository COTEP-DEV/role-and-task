{"version":3,"sources":["../../../../src/RoleSystem/Tasks/ATask.es6"],"names":["ATask","name","CONSTANT","DEFAULT_TASK","ABSTRACT_TASK","id","active","connectedTasks","resolve","_","reject","Errors","Utils","getFunctionName","head","body","PROTOCOL_KEYWORDS","HEAD","BODY"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;IAMqBA,K;AACnB,mBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAYC,mBAASC,YAAT,CAAsBC,aAAtB,CAAoCH,IAAhD;;AAEA,SAAKI,EAAL,GAAUH,mBAASC,YAAT,CAAsBC,aAAtB,CAAoCC,EAA9C;;AAEA,SAAKC,MAAL,GAAc,KAAd;;AAEA;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACD;;AAED;;;;;;;;;;AAQA;;;+BAGW;AACT,aAAO,KAAKD,MAAZ;AACD;;AAED;;;;;;;;;AAQA;;;0CAGsB;AACpB,aAAO,sBAAY;AAAA,eAAWE,QAAQ,EAAR,CAAX;AAAA,OAAZ,CAAP;AACD;;AAED;;;;;;;;4BAKQ;AACN,aAAO,sBAAY,UAACC,CAAD,EAAIC,MAAJ;AAAA,eAAeA,OAAO,IAAIC,gBAAJ,CAAW,OAAX,sCAAsDC,gBAAMC,eAAN,EAAtD,YAAP,CAAf;AAAA,OAAZ,CAAP;AACD;;AAED;;;;;;;;2BAKO;AACL,aAAO,sBAAY,UAACJ,CAAD,EAAIC,MAAJ;AAAA,eAAeA,OAAO,IAAIC,gBAAJ,CAAW,OAAX,qCAAqDC,gBAAMC,eAAN,EAArD,YAAP,CAAf;AAAA,OAAZ,CAAP;AACD;;AAED;;;;;;;;;oCAMgB;AACd,aAAO,sBAAY,UAACJ,CAAD,EAAIC,MAAJ;AAAA,eAAeA,OAAO,IAAIC,gBAAJ,CAAW,OAAX,8CAA8DC,gBAAMC,eAAN,EAA9D,YAAP,CAAf;AAAA,OAAZ,CAAP;AACD;;AAED;;;;;;;;2CAKuB;AACrB,aAAO,sBAAY;AAAA,eAAWL,SAAX;AAAA,OAAZ,CAAP;AACD;;AAED;;;;;;;;;;sCAOkB,CAEjB;AADC;;;AAGF;;;;;;;;yCAKqBM,I,EAAMC,I,EAAM;AAAA;;AAC/B,aAAO,iGACJb,mBAASc,iBAAT,CAA2BC,IADvB,EAC8BH,IAD9B,mDAEJZ,mBAASc,iBAAT,CAA2BE,IAFvB,EAE8BH,IAF9B,qBAAP;AAID;;;kCArEoB;AACnB,aAAO,sBAAY,UAACN,CAAD,EAAIC,MAAJ;AAAA,eAAeA,OAAO,IAAIC,gBAAJ,CAAW,OAAX,4CAA4DC,gBAAMC,eAAN,EAA5D,YAAP,CAAf;AAAA,OAAZ,CAAP;AACD;;;wBAjBiB;AAChB,aAAO,KAAKZ,IAAZ;AACD;;;KAjCH;AACA;AACA;;AAEA;;;kBAWqBD,K","file":"ATask.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport CONSTANT from '../../Utils/CONSTANT/CONSTANT.js';\nimport Utils from '../../Utils/Utils.js';\nimport Errors from '../../Utils/Errors.js';\n\n/**\n * Define what a Task is\n *\n * A Task is a job PROGRAM have to perform (For example, Log, ServerAPI, Calcul... are all tasks)\n * @interface\n */\nexport default class ATask {\n  constructor() {\n    this.name = CONSTANT.DEFAULT_TASK.ABSTRACT_TASK.name;\n\n    this.id = CONSTANT.DEFAULT_TASK.ABSTRACT_TASK.id;\n\n    this.active = false;\n\n    // List of connected tasks\n    this.connectedTasks = [];\n  }\n\n  /**\n   * Get the name of the Task\n   * @return {String}\n   */\n  static get name() {\n    return this.name;\n  }\n\n  /**\n   * Is the Task active?\n   */\n  isActive() {\n    return this.active;\n  }\n\n  /**\n   * SINGLETON implementation\n   * @abstract\n   */\n  static getInstance() {\n    return new Promise((_, reject) => reject(new Errors('EXXXX', `Unimplemented getInstance methods in ${Utils.getFunctionName()} child`)));\n  }\n\n  /**\n   * Get some infos from the task\n   */\n  gatherInfosFromTask() {\n    return new Promise(resolve => resolve({}));\n  }\n\n  /**\n   * PROGRAM start to run the task\n   * @param {Object} args\n   * @abstract\n   */\n  start() {\n    return new Promise((_, reject) => reject(new Errors('EXXXX', `Unimplemented start methods in ${Utils.getFunctionName()} child`)));\n  }\n\n  /**\n   * PROGRAM stop to run the task\n   * @param {Object} args\n   * @abstract\n   */\n  stop() {\n    return new Promise((_, reject) => reject(new Errors('EXXXX', `Unimplemented stop methods in ${Utils.getFunctionName()} child`)));\n  }\n\n  /**\n   * Connect the actual task to the given task\n   * @param {String} idTaskToConnect\n   * @param {Object} args\n   * @abstract\n   */\n  connectToTask() {\n    return new Promise((_, reject) => reject(new Errors('EXXXX', `Unimplemented connectToTask methods in ${Utils.getFunctionName()} child`)));\n  }\n\n  /**\n   * apply the program state on the task\n   * @param {Number} programState\n   * @param {Number} oldProgramState\n   */\n  applyNewProgramState() {\n    return new Promise(resolve => resolve());\n  }\n\n  /**\n   * We get news data from here, use it or not, it depends from the task\n   *\n   * @param {String} dataName\n   * @param {Object} data\n   * @param {Date} timestamp\n   */\n  consumeNewsData() {\n    // Do not consume the data\n  }\n\n  /**\n   * Build an head/body pattern message\n   * @param {String} head\n   * @param {Object} body\n   */\n  buildHeadBodyMessage(head, body) {\n    return JSON.stringify({\n      [CONSTANT.PROTOCOL_KEYWORDS.HEAD]: head,\n      [CONSTANT.PROTOCOL_KEYWORDS.BODY]: body,\n    });\n  }\n}\n"]}