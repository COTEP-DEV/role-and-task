{"version":3,"sources":["../../../../../src/CommunicationSystem/SocketCommunicationSystem/ZeroMQ/AZeroMQ.es6"],"names":["AZeroMQ","name","CONSTANT","SOCKET_COMMUNICATION_SYSTEM","ZEROMQ","mode","socket","monitorTimeout","clearTimeout","unmonitor","on","ZERO_MQ","KEYWORDS_OMQ","MONITOR_ERROR","setTimeout","monitor","MONITOR_TIME_CHECK","MONITOR_RELAUNCH_TIME","ASocketCommunicationSystem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;;;AANA;AACA;AACA;;AAEA;IAIqBA,O;;;AACnB,qBAAc;AAAA;;AAGZ;AAHY;;AAIZ,UAAKC,IAAL,GAAYC,mBAASC,2BAAT,CAAqCC,MAAjD;;AAEA;AACA,UAAKC,IAAL,GAAY,KAAZ;;AAEA;AACA,UAAKC,MAAL,GAAc,KAAd;;AAEA;AACA,UAAKC,cAAL,GAAsB,KAAtB;AAbY;AAcb;;AAED;;;;;;;;gCAIY;AACV,aAAO,KAAKD,MAAZ;AACD;;AAED;;;;;;kCAGc;AACZ,UAAI,KAAKC,cAAT,EAAyBC,aAAa,KAAKD,cAAlB;;AAEzB,WAAKA,cAAL,GAAsB,KAAtB;;AAEA,UAAI,KAAKD,MAAT,EAAiB,KAAKA,MAAL,CAAYG,SAAZ;AAClB;;AAED;;;;;;;mCAIe;AAAA;;AACb;AACA,WAAKH,MAAL,CAAYI,EAAZ,CAAeR,mBAASS,OAAT,CAAiBC,YAAjB,CAA8BC,aAA7C,EAA4D,YAAM;AAChE,YAAI,OAAKP,MAAT,EAAiB;AACf;AACA,iBAAKC,cAAL,GAAsBO,WAAW,YAAM;AACrC,gBAAI,OAAKR,MAAT,EAAiB;AACf,qBAAKA,MAAL,CAAYS,OAAZ,CAAoBb,mBAASS,OAAT,CAAiBK,kBAArC,EAAyD,CAAzD;AACD;AACF,WAJqB,EAInBd,mBAASS,OAAT,CAAiBM,qBAJE,CAAtB;AAKD;AACF,OATD;;AAWA;AACA,WAAKX,MAAL,CAAYS,OAAZ,CAAoBb,mBAASS,OAAT,CAAiBK,kBAArC,EAAyD,CAAzD;AACD;;;EAvDkCE,oC;;kBAAhBlB,O","file":"AZeroMQ.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport CONSTANT from '../../../Utils/CONSTANT/CONSTANT.js';\nimport ASocketCommunicationSystem from '../ASocketCommunicationSystem.js';\n\nexport default class AZeroMQ extends ASocketCommunicationSystem {\n  constructor() {\n    super();\n\n    // Name of the protocol of communication\n    this.name = CONSTANT.SOCKET_COMMUNICATION_SYSTEM.ZEROMQ;\n\n    // Mode we are running in (Server or Client)\n    this.mode = false;\n\n    // Socket\n    this.socket = false;\n\n    // Store a ptr to monitor restart timeout\n    this.monitorTimeout = false;\n  }\n\n  /**\n   * Return an object that can be used to act the communication system\n   * @override\n   */\n  getSocket() {\n    return this.socket;\n  }\n\n  /**\n   * Stop the monitor\n   */\n  stopMonitor() {\n    if (this.monitorTimeout) clearTimeout(this.monitorTimeout);\n\n    this.monitorTimeout = false;\n\n    if (this.socket) this.socket.unmonitor();\n  }\n\n  /**\n   * Start the monitor that will listen to socket news\n   * Check for events every 500ms and get all available events.\n   */\n  startMonitor() {\n    // Handle monitor error\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.MONITOR_ERROR, () => {\n      if (this.socket) {\n        // Restart the monitor if it fail\n        this.monitorTimeout = setTimeout(() => {\n          if (this.socket) {\n            this.socket.monitor(CONSTANT.ZERO_MQ.MONITOR_TIME_CHECK, 0);\n          }\n        }, CONSTANT.ZERO_MQ.MONITOR_RELAUNCH_TIME);\n      }\n    });\n\n    // Call monitor, check for events every 50ms and get all available events.\n    this.socket.monitor(CONSTANT.ZERO_MQ.MONITOR_TIME_CHECK, 0);\n  }\n}\n"]}