{"version":3,"sources":["../../../../../../src/CommunicationSystem/SocketCommunicationSystem/ZeroMQ/Server/AZeroMQServerLight.es6"],"names":["AZeroMQServerLight","mode","CONSTANT","ZERO_MQ","MODE","SERVER","ipServer","DEFAULT_SERVER_IP_ADDRESS","portServer","DEFAULT_SERVER_IP_PORT","socketType","SOCKET_TYPE","OMQ_PULL","transport","TRANSPORT","TCP","identityPrefix","SERVER_IDENTITY_PREFIX","resolve","reject","active","socket","check","some","x","Error","zmq","identity","process","pid","startMonitor","bind","err","console","log","stopMonitor","treatMessageFromClient","on","KEYWORDS_OMQ","CLOSE","CLOSE_ERROR","ep","String","close","MESSAGE","msg","dataString","Utils","fireUp","incomingMessageListeningFunction","AZeroMQ"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAVA;AACA;AACA;;AAEA;IASqBA,kB;;;AACnB,gCAAc;AAAA;;AAGZ;AAHY;;AAIZ,UAAKC,IAAL,GAAYC,mBAASC,OAAT,CAAiBC,IAAjB,CAAsBC,MAAlC;AAJY;AAKb;;AAED;;;;;;;;sCAUG;AAAA;;AAAA,+BALDC,QAKC;AAAA,UALDA,QAKC,iCALUJ,mBAASC,OAAT,CAAiBI,yBAK3B;AAAA,iCAJDC,UAIC;AAAA,UAJDA,UAIC,mCAJYN,mBAASC,OAAT,CAAiBM,sBAI7B;AAAA,iCAHDC,UAGC;AAAA,UAHDA,UAGC,mCAHYR,mBAASC,OAAT,CAAiBQ,WAAjB,CAA6BC,QAGzC;AAAA,gCAFDC,SAEC;AAAA,UAFDA,SAEC,kCAFWX,mBAASC,OAAT,CAAiBW,SAAjB,CAA2BC,GAEtC;AAAA,qCADDC,cACC;AAAA,UADDA,cACC,uCADgBd,mBAASC,OAAT,CAAiBc,sBACjC;;AACD,aAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,YAAI,OAAKC,MAAT,EAAiB,OAAOF,QAAQ,OAAKG,MAAb,CAAP;;AAEjB;AACA,YAAMC,QAAQ,CACZpB,mBAASC,OAAT,CAAiBQ,WAAjB,CAA6BC,QADjB,EAGZW,IAHY,CAGP;AAAA,iBAAKC,MAAMd,UAAX;AAAA,SAHO,CAAd;;AAKA,YAAI,CAACY,KAAL,EAAY,OAAOH,OAAO,IAAIM,KAAJ,0BAAiCf,UAAjC,CAAP,CAAP;;AAEZ;AACA,eAAKW,MAAL,GAAcK,cAAIL,MAAJ,CAAWX,UAAX,CAAd;;AAEA;AACA,eAAKW,MAAL,CAAYM,QAAZ,GAA0BX,cAA1B,SAA4CY,QAAQC,GAApD;;AAEA;AACA,eAAKC,YAAL;;AAEA;AACA,eAAO,OAAKT,MAAL,CAAYU,IAAZ,CAAoBlB,SAApB,WAAmCP,QAAnC,SAA+CE,UAA/C,EAA6D,UAACwB,GAAD,EAAS;AAC3E,cAAIA,GAAJ,EAAS;AACP;AACAC,oBAAQC,GAAR,2CAAoDrB,SAApD,cAAsEL,UAAtE,YAAuFF,QAAvF;;AAEA;AACA,mBAAK6B,WAAL;;AAEA;AACA,mBAAO,OAAKd,MAAZ;;AAEA,mBAAKA,MAAL,GAAc,KAAd;AACA,mBAAKD,MAAL,GAAc,KAAd;;AAEA;AACA,mBAAOD,OAAO,IAAIM,KAAJ,wBAA+BO,GAA/B,CAAP,CAAP;AACD;;AAED;AACA,iBAAKI,sBAAL;;AAEA,iBAAKhB,MAAL,GAAc,IAAd;;AAEA;AACA,iBAAOF,QAAQ,OAAKG,MAAb,CAAP;AACD,SAzBM,CAAP;AA0BD,OAhDM,CAAP;AAiDD;;AAED;;;;;;iCAGa;AAAA;;AACX,aAAO,sBAAY,UAACH,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,YAAI,CAAC,OAAKC,MAAV,EAAkB,OAAOF,SAAP;;AAElB;AACA,eAAKG,MAAL,CAAYgB,EAAZ,CAAenC,mBAASC,OAAT,CAAiBmC,YAAjB,CAA8BC,KAA7C,EAAoD,YAAM;AACxD;AACA;AACA,iBAAKJ,WAAL;;AAEA;AACA,iBAAO,OAAKd,MAAZ;;AAEA,iBAAKA,MAAL,GAAc,KAAd;AACA,iBAAKD,MAAL,GAAc,KAAd;;AAEA,iBAAOF,SAAP;AACD,SAZD;;AAcA;AACA,eAAKG,MAAL,CAAYgB,EAAZ,CAAenC,mBAASC,OAAT,CAAiBmC,YAAjB,CAA8BE,WAA7C,EAA0D,UAACR,GAAD,EAAMS,EAAN;AAAA,iBAAatB,OAAO,IAAIM,KAAJ,wBAA+BiB,OAAOV,GAAP,CAA/B,WAAgDS,EAAhD,CAAP,CAAb;AAAA,SAA1D;;AAEA;AACA,eAAO,OAAKpB,MAAL,CAAYsB,KAAZ,EAAP;AACD,OAxBM,CAAP;AAyBD;;AAED;;;;;;;6CAIyB;AAAA;;AACvB,WAAKtB,MAAL,CAAYgB,EAAZ,CAAenC,mBAASC,OAAT,CAAiBmC,YAAjB,CAA8BM,OAA7C,EAAsD,UAACC,GAAD,EAAS;AAC7D,YAAMC,aAAaJ,OAAOG,GAAP,CAAnB;;AAEAE,wBAAMC,MAAN,CAAa,OAAKC,gCAAlB,EAAoD,CAACH,UAAD,CAApD;AACD,OAJD;AAKD;;;EA/G6CI,iB;;kBAA3BlD,kB","file":"AZeroMQServerLight.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport zmq from 'zmq';\nimport CONSTANT from '../../../../Utils/CONSTANT/CONSTANT.js';\nimport AZeroMQ from '../AZeroMQ.js';\nimport Utils from '../../../../Utils/Utils.js';\n\n/**\n * Server used when you have Unidirectionnal server (like PULL)\n */\nexport default class AZeroMQServerLight extends AZeroMQ {\n  constructor() {\n    super();\n\n    // Mode we are running in\n    this.mode = CONSTANT.ZERO_MQ.MODE.SERVER;\n  }\n\n  /**\n   * Start a ZeroMQ Server\n   * @param {{ipServer: String, portServer: String, socketType: String, transport: String, identityPrefix: String}} args\n   */\n  startServer({\n    ipServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_ADDRESS,\n    portServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_PORT,\n    socketType = CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_PULL,\n    transport = CONSTANT.ZERO_MQ.TRANSPORT.TCP,\n    identityPrefix = CONSTANT.ZERO_MQ.SERVER_IDENTITY_PREFIX,\n  }) {\n    return new Promise((resolve, reject) => {\n      // If the server is already up\n      if (this.active) return resolve(this.socket);\n\n      // Check the socket Type\n      const check = [\n        CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_PULL,\n        // ... add here is required\n      ].some(x => x === socketType);\n\n      if (!check) return reject(new Error(`E2008 : socketType: ${socketType}`));\n\n      // Create the server socket\n      this.socket = zmq.socket(socketType);\n\n      // Set an identity to the server\n      this.socket.identity = `${identityPrefix}_${process.pid}`;\n\n      // Start the monitor that will listen to socket news\n      this.startMonitor();\n\n      // Bind the server to a port\n      return this.socket.bind(`${transport}://${ipServer}:${portServer}`, (err) => {\n        if (err) {\n          // Log something\n          console.log(`Server ZeroMQ Bind Failed. Transport=${transport} Port=${portServer} IP:${ipServer}`);\n\n          // Stop the monitoring\n          this.stopMonitor();\n\n          // Remove the socket\n          delete this.socket;\n\n          this.socket = false;\n          this.active = false;\n\n          // Return an error\n          return reject(new Error(`E2007 : Specific: ${err}`));\n        }\n\n        // Start to handle client messages\n        this.treatMessageFromClient();\n\n        this.active = true;\n\n        // We successfuly bind the server\n        return resolve(this.socket);\n      });\n    });\n  }\n\n  /**\n   * Stop a ZeroMQ Server\n   */\n  stopServer() {\n    return new Promise((resolve, reject) => {\n      // If the server is already down\n      if (!this.active) return resolve();\n\n      // Listen to the closure of the socket\n      this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CLOSE, () => {\n        // Successfuly close\n        // Stop the monitoring\n        this.stopMonitor();\n\n        // Delete the socket\n        delete this.socket;\n\n        this.socket = false;\n        this.active = false;\n\n        return resolve();\n      });\n\n      // Error in closure\n      this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CLOSE_ERROR, (err, ep) => reject(new Error(`E2006 : Endpoint: ${String(err)} - ${ep}`)));\n\n      // Ask for closure\n      return this.socket.close();\n    });\n  }\n\n  /**\n   * Treat messages that comes from clients\n   * send them to the listeners)\n   */\n  treatMessageFromClient() {\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.MESSAGE, (msg) => {\n      const dataString = String(msg);\n\n      Utils.fireUp(this.incomingMessageListeningFunction, [dataString]);\n    });\n  }\n}\n"]}