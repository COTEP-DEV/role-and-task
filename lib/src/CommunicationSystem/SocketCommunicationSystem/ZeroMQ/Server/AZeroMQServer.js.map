{"version":3,"sources":["../../../../../../src/CommunicationSystem/SocketCommunicationSystem/ZeroMQ/Server/AZeroMQServer.es6"],"names":["AZeroMQServer","mode","CONSTANT","ZERO_MQ","MODE","SERVER","clientList","infosServer","newConnectionListeningFunction","newDisconnectionListeningFunction","map","x","clientIdentityString","ipServer","DEFAULT_SERVER_IP_ADDRESS","portServer","DEFAULT_SERVER_IP_PORT","socketType","SOCKET_TYPE","OMQ_ROUTER","transport","TRANSPORT","TCP","identityPrefix","SERVER_IDENTITY_PREFIX","resolve","reject","active","socket","check","OMQ_DEALER","some","Error","zmq","identity","process","pid","startMonitor","bind","err","console","error","stopMonitor","treatMessageFromClient","on","KEYWORDS_OMQ","CLOSE","CLOSE_ERROR","ep","String","close","func","ACCEPT","message","forEach","sendMessageToClient","clientIdentityByte","SERVER_MESSAGE","CLOSE_ORDER","removeClientToServer","closeConnectionToClient","exist","push","timeoutAlive","Utils","fireUp","timeoutClientConnection","timeout","disconnectClientDueToTimeoutNoProofOfLive","xi","clearTimeout","setTimeout","TIMEOUT_CLIENT_NO_PROOF_OF_LIVE","send","filter","MESSAGE","data","dataString","ret","keyStr","CLIENT_MESSAGE","ALIVE","handleAliveInformationFromSpecifiedClient","HELLO","handleNewClientToServer","incomingMessageListeningFunction","context","AZeroMQ"],"mappings":"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","file":"AZeroMQServer.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport zmq from 'zmq';\nimport CONSTANT from '../../../../Utils/CONSTANT/CONSTANT.js';\nimport AZeroMQ from '../AZeroMQ.js';\nimport Utils from '../../../../Utils/Utils.js';\n\n/**\n * Server used when you have Bidirectionnal server (like ROUTER)\n */\nexport default class AZeroMQServer extends AZeroMQ {\n  constructor() {\n    super();\n\n    // Mode we are running in\n    this.mode = CONSTANT.ZERO_MQ.MODE.SERVER;\n\n    // List of server client\n    this.clientList = [];\n\n    // Infos about server options\n    this.infosServer = false;\n\n    // Function to deal with the incoming regular messages\n    this.newConnectionListeningFunction = [];\n\n    this.newDisconnectionListeningFunction = [];\n  }\n\n  /**\n   * Get infos from the server -> ip/port ...etc\n   */\n  getInfosServer() {\n    return this.infosServer;\n  }\n\n  /**\n   * Return the list of connected clients\n   * @return {Array}\n   */\n  getConnectedClientList() {\n    return this.clientList.map(x => x.clientIdentityString);\n  }\n\n  /**\n   * Start a ZeroMQ Server\n   * @param {{ipServer: String, portServer: String, socketType: String, transport: String, identityPrefix: String}} args\n   */\n  startServer({\n    ipServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_ADDRESS,\n    portServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_PORT,\n    socketType = CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_ROUTER,\n    transport = CONSTANT.ZERO_MQ.TRANSPORT.TCP,\n    identityPrefix = CONSTANT.ZERO_MQ.SERVER_IDENTITY_PREFIX,\n  }) {\n    return new Promise((resolve, reject) => {\n      // If the server is already up\n      if (this.active) return resolve(this.socket);\n\n      // Check the socket Type\n      const check = [\n        CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_ROUTER,\n        CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_DEALER,\n        // ... add here is required\n      ].some(x => x === socketType);\n\n      if (!check) return reject(new Error(`E2008 : socketType: ${socketType}`));\n\n      // Create the server socket\n      this.socket = zmq.socket(socketType);\n\n      // Set an identity to the server\n      this.socket.identity = `${identityPrefix}_${process.pid}`;\n\n      // Start the monitor that will listen to socket news\n      this.startMonitor();\n\n      // Bind the server to a port\n      return this.socket.bind(`${transport}://${ipServer}:${portServer}`, (err) => {\n        if (err) {\n          // Log something\n          console.error(`Server ZeroMQ Bind Failed. Transport=${transport} Port=${portServer} IP:${ipServer}`);\n\n          // Stop the monitoring\n          this.stopMonitor();\n\n          // Remove the socket\n          delete this.socket;\n\n          this.socket = false;\n          this.active = false;\n\n          // Return an error\n          return reject(new Error(`E2007 : Specific: ${err}`));\n        }\n\n        // Start to handle client messages\n        this.treatMessageFromClient();\n\n        this.infosServer = {\n          ipServer,\n          portServer,\n          socketType,\n          transport,\n          identityPrefix,\n        };\n\n        this.active = true;\n\n        // We successfuly bind the server\n        return resolve(this.socket);\n      });\n    });\n  }\n\n  /**\n   * Stop a ZeroMQ Server\n   */\n  stopServer() {\n    return new Promise((resolve, reject) => {\n      // If the server is already down\n      if (!this.active) return resolve();\n\n      // Listen to the closure of the socket\n      this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CLOSE, () => {\n        // Successfuly close\n        // Stop the monitoring\n        this.stopMonitor();\n\n        // Delete the socket\n        delete this.socket;\n\n        this.socket = false;\n        this.active = false;\n\n        // Empty the clientList\n        this.clientList = [];\n\n        this.infosServer = false;\n\n        return resolve();\n      });\n\n      // Error in closure\n      this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CLOSE_ERROR, (err, ep) => reject(new Error(`E2006 : Endpoint: ${String(err)} ${ep}`)));\n\n      // Ask for closure\n      return this.socket.close();\n    });\n  }\n\n  /**\n   * Setup a function that is called when a new client get connected\n   * @param {Function} func\n   */\n  listenNewConnectedClientEvent(func) {\n    if (!this.active) return;\n\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.ACCEPT, func);\n  }\n\n  /**\n   * Send a message to every connected client\n   * @param {String} message\n   */\n  sendBroadcastMessage(message) {\n    this.clientList.forEach(x => this.sendMessageToClient(x.clientIdentityByte, x.clientIdentityString, message));\n  }\n\n  /**\n   * Close a connection to a client\n   */\n  closeConnectionToClient(clientIdentityByte, clientIdentityString) {\n    this.sendMessageToClient(clientIdentityByte, clientIdentityString, CONSTANT.ZERO_MQ.SERVER_MESSAGE.CLOSE_ORDER);\n\n    // Remove the client data from the array\n    this.removeClientToServer(clientIdentityByte, clientIdentityString);\n  }\n\n  /**\n   * Disconnect a user because we have got no proof of life from it since too long\n   * long defined by CONSTANT.ZERO_MQ.TIMEOUT_CLIENT_NO_PROOF_OF_LIVE\n   * @param {Arrray} clientIdentityByte\n   * @param {String} clientIdentityString\n   */\n  disconnectClientDueToTimeoutNoProofOfLive(clientIdentityByte, clientIdentityString) {\n    // Send a bye message to the client, in case he's coming back\n    this.closeConnectionToClient(clientIdentityByte, clientIdentityString);\n  }\n\n  /**\n   * Handle a new connection of client to the server\n   * (Store it into a list that will be useful create clientConnection/clientDisconnection event)\n   * @param {Arrray} clientIdentityByte\n   * @param {String} clientIdentityString\n   */\n  handleNewClientToServer(clientIdentityByte, clientIdentityString) {\n    // We put the client into a list of connected client\n    const exist = this.clientList.some(x => x.clientIdentityString === clientIdentityString);\n\n    if (!exist) {\n      this.clientList.push({\n        clientIdentityString,\n        clientIdentityByte,\n        timeoutAlive: false,\n      });\n\n      Utils.fireUp(this.newConnectionListeningFunction, [\n        clientIdentityByte,\n        clientIdentityString,\n      ]);\n    }\n\n    // Call a function that will disconnected the client from the server is he sent nothing\n    // in a pre-defined period\n    this.timeoutClientConnection(clientIdentityByte, clientIdentityString);\n  }\n\n  /**\n   * Function that is executed to handle client timeout\n   * Not proof of life from too long\n   * @param {Arrray} clientIdentityByte\n   * @param {String} clientIdentityString\n   */\n  timeoutClientConnection(clientIdentityByte, clientIdentityString) {\n    // Function execution\n    const timeout = () => {\n      // Disconnect the user to the server\n      this.disconnectClientDueToTimeoutNoProofOfLive(clientIdentityByte, clientIdentityString);\n    };\n\n    this.clientList.some((x, xi) => {\n      if (x.clientIdentityString === clientIdentityString) {\n        // If we had a pre-existing timeout, relaunch it\n        if (this.clientList[xi].timeoutAlive) clearTimeout(this.clientList[xi].timeoutAlive);\n\n        // Create a timeout\n        this.clientList[xi].timeoutAlive = setTimeout(() => timeout(), CONSTANT.ZERO_MQ.TIMEOUT_CLIENT_NO_PROOF_OF_LIVE);\n\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * Send a message to the client\n   * @param {Arrray} clientIdentityByte\n   * @param {String} clientIdentityString\n   * @param {String} message\n   */\n  sendMessageToClient(clientIdentityByte, clientIdentityString, message) {\n    if (this.socket && this.active) {\n      this.socket.send([\n        clientIdentityString,\n        message,\n      ]);\n    }\n  }\n\n  /**\n   * We know that the specified client is alive (he sent something to us)\n   * @param {Arrray} clientIdentityByte\n   * @param {String} clientIdentityString\n   */\n  handleAliveInformationFromSpecifiedClient(clientIdentityByte, clientIdentityString) {\n    this.clientList.some((x) => {\n      if (clientIdentityString === x.clientIdentityString) {\n        // Handle the user timeout\n        this.timeoutClientConnection(clientIdentityByte, clientIdentityString);\n\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * Remove a client from the clientList array\n   * @param {Arrray} clientIdentityByte\n   * @param {String} clientIdentityString\n   */\n  removeClientToServer(clientIdentityByte, clientIdentityString) {\n    this.clientList = this.clientList.filter(x => x.clientIdentityString !== clientIdentityString);\n\n    Utils.fireUp(this.newDisconnectionListeningFunction, [\n      clientIdentityByte,\n      clientIdentityString,\n    ]);\n  }\n\n  /**\n   * Treat messages that comes from clients\n   */\n  treatMessageFromClient() {\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.MESSAGE, (clientIdentityByte, data) => {\n      const dataString = String(data);\n      const clientIdentityString = String(clientIdentityByte);\n\n      const ret = [\n        //\n        //\n        // Here we treat special strings\n        //\n        //\n        {\n          keyStr: CONSTANT.ZERO_MQ.CLIENT_MESSAGE.ALIVE,\n          func: () => {\n            // We got a keepAlive message from client\n            // We got something from the client we know he's not disconnected\n            this.handleAliveInformationFromSpecifiedClient(clientIdentityByte, clientIdentityString);\n          },\n        }, {\n          keyStr: CONSTANT.ZERO_MQ.CLIENT_MESSAGE.HELLO,\n          func: () => this.handleNewClientToServer(clientIdentityByte, clientIdentityString),\n        },\n      ].some((x) => {\n        if (x.keyStr === dataString) {\n          x.func();\n\n          return true;\n        }\n\n        return false;\n      });\n\n      // If the user have a function to deal with incoming messages\n      if (!ret) {\n        Utils.fireUp(this.incomingMessageListeningFunction, [\n          clientIdentityByte,\n          clientIdentityString,\n          dataString,\n        ]);\n      }\n\n      if (!ret) {\n        // We got something from the client we know he's not disconnected\n        this.handleAliveInformationFromSpecifiedClient(clientIdentityByte, clientIdentityString);\n      }\n    });\n  }\n\n  /**\n   * Push the function that will get when a new connection is detected\n   * @param {Function} func\n   * @param {Object} context\n   */\n  listenClientConnectionEvent(func, context) {\n    this.newConnectionListeningFunction.push({\n      func,\n      context,\n    });\n  }\n\n  /**\n   * Push the function that will get when a disconnection is detected\n   * @param {Function} func\n   * @param {Object} context\n   */\n  listenClientDisconnectionEvent(func, context) {\n    this.newDisconnectionListeningFunction.push({\n      func,\n      context,\n    });\n  }\n}\n"]}