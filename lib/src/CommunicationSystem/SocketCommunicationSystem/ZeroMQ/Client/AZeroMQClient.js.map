{"version":3,"sources":["../../../../../../src/CommunicationSystem/SocketCommunicationSystem/ZeroMQ/Client/AZeroMQClient.es6"],"names":["AZeroMQClient","keepAliveTime","CONSTANT","ZERO_MQ","CLIENT_KEEP_ALIVE_TIME","mode","MODE","CLIENT","lastMessageSent","ipServer","DEFAULT_SERVER_IP_ADDRESS","portServer","DEFAULT_SERVER_IP_PORT","socketType","SOCKET_TYPE","OMQ_DEALER","transport","TRANSPORT","TCP","identityPrefix","CLIENT_IDENTITY_PREFIX","PromiseCommandPattern","func","resolve","reject","active","socket","zmq","identity","process","pid","timeoutConnect","setTimeout","unmonitor","Errors","FIRST_CONNECTION_TIMEOUT","once","KEYWORDS_OMQ","CONNECT","clearTimeout","Date","now","treatMessageFromServer","clientSayHelloToServer","clientSayHeIsAlive","startMonitor","connect","stopMonitor","close","timeoutAlive","on","DISCONNECT","message","send","MESSAGE","data","dataString","String","ret","keyStr","SERVER_MESSAGE","CLOSE_ORDER","stop","some","x","Utils","fireUp","incomingMessageListeningFunction","sendMessageToServer","CLIENT_MESSAGE","HELLO","ALIVE","AZeroMQ"],"mappings":"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","file":"AZeroMQClient.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport zmq from 'zmq';\nimport CONSTANT from '../../../../Utils/CONSTANT/CONSTANT.js';\nimport AZeroMQ from '../AZeroMQ.js';\nimport Utils from '../../../../Utils/Utils.js';\nimport Errors from '../../../../Utils/Errors.js';\nimport PromiseCommandPattern from '../../../../Utils/PromiseCommandPattern.js';\n\n/**\n * Client to use when you have an Bidirectionnal connection - exemple socketType = DEALER\n * This class include custom KeepAlive\n */\nexport default class AZeroMQClient extends AZeroMQ {\n  constructor(keepAliveTime = CONSTANT.ZERO_MQ.CLIENT_KEEP_ALIVE_TIME) {\n    super();\n\n    // Mode we are running in\n    this.mode = CONSTANT.ZERO_MQ.MODE.CLIENT;\n\n    // Maximal time between messages (if you pass that time between two message, the server will probably say your disconnected)\n    this.keepAliveTime = keepAliveTime;\n\n    // Last time the client sent something to the server\n    this.lastMessageSent = false;\n  }\n\n  /**\n   * Start a ZeroMQ Client\n   * @param {{ipServer: String, portServer: String, socketType: String, transport: String, identityPrefix: String}} args\n   */\n  startClient({\n    ipServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_ADDRESS,\n    portServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_PORT,\n    socketType = CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_DEALER,\n    transport = CONSTANT.ZERO_MQ.TRANSPORT.TCP,\n    identityPrefix = CONSTANT.ZERO_MQ.CLIENT_IDENTITY_PREFIX,\n  }) {\n    return new PromiseCommandPattern({\n      func: () => new Promise((resolve, reject) => {\n        // If the client is already up\n        if (this.active) return resolve();\n\n        // Create the client socket\n        this.socket = zmq.socket(socketType);\n\n        // Set an identity to the client\n        this.socket.identity = `${identityPrefix}_${process.pid}`;\n\n        // Set a timeout to the connection\n        const timeoutConnect = setTimeout(() => {\n          // Stop the monitoring\n          this.socket.unmonitor();\n\n          // Remove the socket\n          delete this.socket;\n\n          this.socket = false;\n          this.active = false;\n\n          // Return an error\n          return reject(new Errors('E2005'));\n        }, CONSTANT.ZERO_MQ.FIRST_CONNECTION_TIMEOUT);\n\n        // Wait the accept of the socket to the server\n        // We successfuly get connected\n        this.socket.once(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CONNECT, () => {\n          // Clear the connection timeout\n          clearTimeout(timeoutConnect);\n\n          // Set the last time message we sent a message as now\n          this.lastMessageSent = Date.now();\n\n          this.active = true;\n\n          // Treat messages that comes from the server\n          this.treatMessageFromServer();\n\n          // First message to send to be declared on the server\n          this.clientSayHelloToServer();\n\n          // Send messages every x ms for the server to know you are alive\n          this.clientSayHeIsAlive();\n\n          return resolve(this.socket);\n        });\n\n        // Start the monitor that will listen to socket news\n        this.startMonitor();\n\n        // Connection to the server\n        return this.socket.connect(`${transport}://${ipServer}:${portServer}`);\n      }),\n    });\n  }\n\n  /**\n   * Stop a ZeroMQ Client\n   */\n  stopClient() {\n    return new PromiseCommandPattern({\n      func: () => new Promise((resolve) => {\n        // If the client is already down\n        if (!this.active) return resolve();\n\n        // Stop the monitoring\n        this.stopMonitor();\n\n        // Ask for closure\n        this.socket.close();\n\n        // Delete the socket\n        delete this.socket;\n\n        this.socket = false;\n        this.active = false;\n\n        // Stop the keepAliveTime\n        clearTimeout(this.timeoutAlive);\n\n        return resolve();\n      }),\n    });\n  }\n\n  /**\n   * Setup a function that is calleed when socket get connected\n   * @param {Function} func\n   * @param {Object} context\n   */\n  listenConnectEvent(func) {\n    if (!this.active) return;\n\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CONNECT, func);\n  }\n\n  /**\n   * Setup a function that is calleed when socket get disconnected\n   * @param {Function} func\n   */\n  listenDisconnectEvent(func) {\n    if (!this.active) return;\n\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.DISCONNECT, func);\n  }\n\n  /**\n   * Send a message to the server\n   */\n  sendMessageToServer(message) {\n    if (this.socket && this.active) {\n      this.socket.send(message);\n    }\n  }\n\n  /**\n   * Treat messages that comes from server\n   */\n  treatMessageFromServer() {\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.MESSAGE, (data) => {\n      const dataString = String(data);\n\n      const ret = [{\n        //\n        //\n        // Here we treat special strings\n        //\n        //\n        keyStr: CONSTANT.ZERO_MQ.SERVER_MESSAGE.CLOSE_ORDER,\n\n        func: () => {\n          // Call the stop\n          this.stop();\n        },\n      }].some((x) => {\n        if (x.keyStr === dataString) {\n          x.func();\n\n          return true;\n        }\n\n        return false;\n      });\n\n      // If the user have a function to deal with incoming messages\n      if (!ret) Utils.fireUp(this.incomingMessageListeningFunction, [dataString]);\n    });\n  }\n\n  /**\n   * First message to send to the server to be regristered into it\n   */\n  clientSayHelloToServer() {\n    this.sendMessageToServer(CONSTANT.ZERO_MQ.CLIENT_MESSAGE.HELLO);\n  }\n\n  /**\n   * Say to the server that you are alive\n   */\n  clientSayHeIsAlive() {\n    // Send a message to the server, to him know that you are alive\n    this.timeoutAlive = setTimeout(() => {\n      // If the communication is not active anymore\n      if (!this.active) return;\n\n      // Set the last time message we sent a message as now\n      this.lastMessageSent = Date.now();\n\n      // Send a message to the server\n      this.sendMessageToServer(CONSTANT.ZERO_MQ.CLIENT_MESSAGE.ALIVE);\n\n      // Call again\n      this.clientSayHeIsAlive();\n    }, this.keepAliveTime);\n  }\n}\n"]}