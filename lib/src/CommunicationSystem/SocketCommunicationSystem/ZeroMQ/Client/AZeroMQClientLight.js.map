{"version":3,"sources":["../../../../../../src/CommunicationSystem/SocketCommunicationSystem/ZeroMQ/Client/AZeroMQClientLight.es6"],"names":["AZeroMQClientLight","mode","CONSTANT","ZERO_MQ","MODE","CLIENT","ipServer","DEFAULT_SERVER_IP_ADDRESS","portServer","DEFAULT_SERVER_IP_PORT","socketType","SOCKET_TYPE","OMQ_DEALER","transport","TRANSPORT","TCP","identityPrefix","CLIENT_IDENTITY_PREFIX","resolve","reject","active","socket","zmq","identity","process","pid","timeoutConnect","setTimeout","unmonitor","Error","FIRST_CONNECTION_TIMEOUT","once","KEYWORDS_OMQ","CONNECT","clearTimeout","startMonitor","connect","stopMonitor","close","func","on","DISCONNECT","message","send","AZeroMQ"],"mappings":"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","file":"AZeroMQClientLight.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport zmq from 'zmq';\nimport CONSTANT from '../../../../Utils/CONSTANT/CONSTANT.js';\nimport AZeroMQ from '../AZeroMQ.js';\n\n/**\n * Client to use when you have an unidirectionnal connection - exemple socketType = Push\n */\nexport default class AZeroMQClientLight extends AZeroMQ {\n  constructor() {\n    super();\n\n    // Mode we are running in\n    this.mode = CONSTANT.ZERO_MQ.MODE.CLIENT;\n  }\n\n  /**\n   * Start a ZeroMQ Client\n   * @param {{ipServer: String, portServer: String, socketType: String, transport: String, identityPrefix: String}} args\n   */\n  startClient({\n    ipServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_ADDRESS,\n    portServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_PORT,\n    socketType = CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_DEALER,\n    transport = CONSTANT.ZERO_MQ.TRANSPORT.TCP,\n    identityPrefix = CONSTANT.ZERO_MQ.CLIENT_IDENTITY_PREFIX,\n  }) {\n    return new Promise((resolve, reject) => {\n      // If the client is already up\n      if (this.active) return resolve();\n\n      // Create the client socket\n      this.socket = zmq.socket(socketType);\n\n      // Set an identity to the client\n      this.socket.identity = `${identityPrefix}_${process.pid}`;\n\n      // Set a timeout to the connection\n      const timeoutConnect = setTimeout(() => {\n        // Stop the monitoring\n        this.socket.unmonitor();\n\n        // Remove the socket\n        delete this.socket;\n\n        this.socket = false;\n        this.active = false;\n\n        // Return an error\n        return reject(new Error('E2005'));\n      }, CONSTANT.ZERO_MQ.FIRST_CONNECTION_TIMEOUT);\n\n      // Wait the accept of the socket to the server\n      // We successfuly get connected\n      this.socket.once(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CONNECT, () => {\n        // Clear the connection timeout\n        clearTimeout(timeoutConnect);\n\n        this.active = true;\n\n        return resolve(this.socket);\n      });\n\n      // Start the monitor that will listen to socket news\n      this.startMonitor();\n\n      // Connection to the server\n      return this.socket.connect(`${transport}://${ipServer}:${portServer}`);\n    });\n  }\n\n  /**\n   * Stop a ZeroMQ Client\n   */\n  stopClient() {\n    return new Promise((resolve) => {\n      // If the client is already down\n      if (!this.active) return resolve();\n\n      // Stop the monitoring\n      this.stopMonitor();\n\n      // Ask for closure\n      this.socket.close();\n\n      // Delete the socket\n      delete this.socket;\n\n      this.socket = false;\n      this.active = false;\n\n      return resolve();\n    });\n  }\n\n  /**\n   * Setup a function that is calleed when socket get connected\n   * @param {Function} func\n   * @param {Object} context\n   */\n  listenConnectEvent(func) {\n    if (!this.active) return;\n\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CONNECT, func);\n  }\n\n  /**\n   * Setup a function that is calleed when socket get disconnected\n   * @param {Function} func\n   */\n  listenDisconnectEvent(func) {\n    if (!this.active) return;\n\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.DISCONNECT, func);\n  }\n\n  /**\n   * Send a message to the server\n   */\n  sendMessageToServer(message) {\n    if (this.socket && this.active) this.socket.send(message);\n  }\n}\n"]}