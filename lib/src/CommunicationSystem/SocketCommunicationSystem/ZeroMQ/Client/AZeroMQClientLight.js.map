{"version":3,"sources":["../../../../../../src/CommunicationSystem/SocketCommunicationSystem/ZeroMQ/Client/AZeroMQClientLight.ts"],"names":["AZeroMQClientLight","mode","CONSTANT","ZERO_MQ","MODE","CLIENT","ipServer","DEFAULT_SERVER_IP_ADDRESS","portServer","DEFAULT_SERVER_IP_PORT","socketType","SOCKET_TYPE","OMQ_DEALER","transport","TRANSPORT","TCP","identityPrefix","CLIENT_IDENTITY_PREFIX","PromiseCommandPattern","func","Promise","resolve","reject","active","socket","zmq","identity","process","pid","timeoutConnect","setTimeout","unmonitor","Errors","FIRST_CONNECTION_TIMEOUT","once","KEYWORDS_OMQ","CONNECT","clearTimeout","startMonitor","connect","stopMonitor","close","on","DISCONNECT","message","send","AZeroMQ"],"mappings":"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","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport zmq from 'zeromq';\nimport CONSTANT from '../../../../Utils/CONSTANT/CONSTANT.js';\nimport AZeroMQ from '../AZeroMQ.js';\nimport PromiseCommandPattern from '../../../../Utils/PromiseCommandPattern.js';\nimport Errors from '../../../../Utils/Errors.js';\n\n/**\n * Client to use when you have an unidirectionnal connection - exemple socketType = Push\n */\nexport default class AZeroMQClientLight extends AZeroMQ {\n  constructor() {\n    super();\n\n    // Mode we are running in\n    this.mode = CONSTANT.ZERO_MQ.MODE.CLIENT;\n  }\n\n  /**\n   * Start a ZeroMQ Client\n   * @param {{ipServer: String, portServer: String, socketType: String, transport: String, identityPrefix: String}} args\n   */\n  startClient({\n    ipServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_ADDRESS,\n    portServer = CONSTANT.ZERO_MQ.DEFAULT_SERVER_IP_PORT,\n    socketType = CONSTANT.ZERO_MQ.SOCKET_TYPE.OMQ_DEALER,\n    transport = CONSTANT.ZERO_MQ.TRANSPORT.TCP,\n    identityPrefix = CONSTANT.ZERO_MQ.CLIENT_IDENTITY_PREFIX,\n  }) {\n    return new PromiseCommandPattern({\n      func: () => new Promise((resolve, reject) => {\n        // If the client is already up\n        if (this.active) return resolve();\n\n        // Create the client socket\n        this.socket = zmq.socket(socketType);\n\n        // Set an identity to the client\n        this.socket.identity = `${identityPrefix}_${process.pid}`;\n\n        // Set a timeout to the connection\n        const timeoutConnect = setTimeout(() => {\n          // Stop the monitoring\n          this.socket.unmonitor();\n\n          // Remove the socket\n          delete this.socket;\n\n          this.socket = false;\n          this.active = false;\n\n          // Return an error\n          return reject(new Errors('E2005'));\n        }, CONSTANT.ZERO_MQ.FIRST_CONNECTION_TIMEOUT);\n\n        // Wait the accept of the socket to the server\n        // We successfuly get connected\n        this.socket.once(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CONNECT, () => {\n          // Clear the connection timeout\n          clearTimeout(timeoutConnect);\n\n          this.active = true;\n\n          return resolve(this.socket);\n        });\n\n        // Start the monitor that will listen to socket news\n        this.startMonitor();\n\n        // Connection to the server\n        return this.socket.connect(`${transport}://${ipServer}:${portServer}`);\n      }),\n    });\n  }\n\n  /**\n   * Stop a ZeroMQ Client\n   */\n  stopClient() {\n    return new PromiseCommandPattern({\n      func: () => new Promise((resolve) => {\n        // If the client is already down\n        if (!this.active) return resolve();\n\n        // Stop the monitoring\n        this.stopMonitor();\n\n        // Ask for closure\n        this.socket.close();\n\n        // Delete the socket\n        delete this.socket;\n\n        this.socket = false;\n        this.active = false;\n\n        return resolve();\n      }),\n    });\n  }\n\n  /**\n   * Setup a function that is calleed when socket get connected\n   * @param {Function} func\n   * @param {Object} context\n   */\n  listenConnectEvent(func) {\n    if (!this.active) return;\n\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.CONNECT, func);\n  }\n\n  /**\n   * Setup a function that is calleed when socket get disconnected\n   * @param {Function} func\n   */\n  listenDisconnectEvent(func) {\n    if (!this.active) return;\n\n    this.socket.on(CONSTANT.ZERO_MQ.KEYWORDS_OMQ.DISCONNECT, func);\n  }\n\n  /**\n   * Send a message to the server\n   */\n  sendMessageToServer(message) {\n    if (this.socket && this.active) this.socket.send(message);\n  }\n}\n"],"file":"AZeroMQClientLight.js"}