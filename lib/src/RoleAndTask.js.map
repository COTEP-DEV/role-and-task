{"version":3,"sources":["../../src/RoleAndTask.es6"],"names":["instance","RoleAndTask","launchMasterSlaveConfigurationFile","pathToEntryFile","tasks","CONSTANT","DEFAULT_TASK","map","x","filter","id","roles","DEFAULT_ROLE","states","DEFAULT_STATES","stateChangeCallbacks","eliotState","LAUNCHING","eliotStateChangeWaitingList","quitOrder","displayLog","makesErrorsFatal","handleSignals","length","inProgress","errorElement","some","ERROR","elem","lookAtEliotStateChangePipe","forEach","callback","find","elementToTreat","getEliotStateChangeToTreat","resolve","eliotChangeElementGotTreated","oldEliotState","getSlaveNorMaster","role","MASTER_ROLE","handleEliotStateChange","ret","spreadStateToListener","reject","SystemBoot","require","default","systemBoot","initialization","obj","class","getInstance","roleHandler","RoleHandler","launch","startDate","Date","displayTask","filePath","descriptor","Utils","generateLittleID","push","stateConfiguration","roleConfiguration","taskConfiguration","taskName","idRole","idsAllowedRole","includes","possibilities","i","Error","getRole","isActive","promiseCallUntilTrue","functionToCall","getActualRole","context","args","idEliotState","param","isString","isAString","str","displayMessage","from","getTheTaskWhoPerformTheDisplay","time","now","newParam","err","String","stack","out","process","stderr","tellMasterErrorHappened","changeEliotState","tags","MESSAGE_DISPLAY_TAGS","getMakesErrorFatal","exitEliotUnproperDueToError","exitEliotMsg","CLOSE","quit","makeTheMasterToQuitEverySlaveAndTask","exitEliotGood","errorHappened","signalActionProper","makeTheMasterToQuitTheWholeApp","signalActionUnproper","SIGNAL","on","SIGNAL_UNPROPER","dataName","data","timestamp","limitToTaskList","DATABASE_MAINTAINANCE","DEFAULT_STATE","GENERIC_DATA_NEWS","COLLECTION_CRUD","SCREEN_STATUS_NEWS","BREAKDOWN_PARAMETER_NEWS","checkThatAtLeastOneElementOfArray1ExistInArray2","sendDataToEveryELIOTTaskWhereverItIs","getTaskHandler","getAllActiveTasks","y","setTimeout","consumeNewsData","stop","getMasterRole","getFullSystemPids","roleMaster","boot","activeTasks","name","txt","e","exit","TIMEOUT_LEAVE_ELIOT_UNPROPER","declareRole","declareState","declareTask","removeTask"],"mappings":"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","file":"RoleAndTask.js","sourcesContent":["import CONSTANT from './Utils/CONSTANT/CONSTANT.js';\nimport Utils from './Utils/Utils.js';\nimport RoleHandler from './RoleSystem/Handlers/RoleHandler.js';\n\nlet instance = null;\n\n/**\n * Class which is the interface with the library user\n */\nexport default class RoleAndTask {\n  /**\n   * Constructor working the Singleton way\n   */\n  constructor() {\n    if (instance) return instance;\n\n    // Set the Master Slave Configuration File to load\n    this.launchMasterSlaveConfigurationFile = false;\n\n    // Path to the entry point of your program, we use to pop a new slave\n    this.pathToEntryFile = false;\n\n    // Contains all the tasks referenced\n    this.tasks = [\n      ...Object.keys(CONSTANT.DEFAULT_TASK)\n      .map(x => CONSTANT.DEFAULT_TASK[x]),\n    ].filter(x => x.id !== -1);\n\n    // Contains all the roles referenced\n    this.roles = [\n      ...Object.keys(CONSTANT.DEFAULT_ROLE)\n      .map(x => CONSTANT.DEFAULT_ROLE[x]),\n    ].filter(x => x.id !== -1);\n\n    // Contains all the states the system can have\n    this.states = [\n      ...Object.keys(CONSTANT.DEFAULT_STATES)\n      .map(x => CONSTANT.DEFAULT_STATES[x]),\n    ];\n\n    // Array where we store the functions to call when the state change\n    this.stateChangeCallbacks = [];\n\n    // The state of eliot patform\n    this.eliotState = CONSTANT.DEFAULT_STATES.LAUNCHING;\n\n    // All the orders in a row to change the eliot state\n    this.eliotStateChangeWaitingList = [];\n\n    // Are we quitting?\n    this.quitOrder = false;\n\n    // Are we displaying the logs ?\n    this.displayLog = true;\n\n    // Do we makes the error to be fatal ?\n    this.makesErrorsFatal = false;\n\n    // Handle the signals\n    this.handleSignals();\n\n    instance = this;\n\n    return instance;\n  }\n\n  /**\n   * Singleton getter\n   */\n  static getInstance() {\n    return instance || new RoleAndTask();\n  }\n\n  /*\n   ***********************************************************************************************************\n   *\n   *                          PROTECTED METHODS TO USE\n   *\n   ***********************************************************************************************************\n   */\n\n  /**\n   * Get the good element to treat (Look at specific behavior described into lookAtEliotStateChangePipe comment)\n   * (If there is actually something in progress, do nothing)\n   */\n  getEliotStateChangeToTreat() {\n    // No change to perform\n    if (!this.eliotStateChangeWaitingList.length) return false;\n\n    let inProgress = false;\n    let errorElement = false;\n\n    this.eliotStateChangeWaitingList.some((x) => {\n      // We do nothing if something is in progress exept if error\n      if (x.inProgress) inProgress = true;\n\n      if (x.eliotState.id === CONSTANT.DEFAULT_STATES.ERROR.id) {\n        errorElement = x;\n\n        return true;\n      }\n\n      return false;\n    });\n\n    // Error comes first\n    if (errorElement) return errorElement;\n\n    // Then in progress\n    if (inProgress) return false;\n\n    // Then regular\n    return this.eliotStateChangeWaitingList[0];\n  }\n\n  /**\n   * Some eliot element got treated, remove them from the pipe\n   * @param {Object} elem\n   */\n  eliotChangeElementGotTreated(elem) {\n    this.eliotStateChangeWaitingList = this.eliotStateChangeWaitingList.filter(x => x !== elem);\n\n    // look if there is something else to do\n    this.lookAtEliotStateChangePipe();\n  }\n\n  /**\n   * Send the message saying the state change to whom is interested to know\n   */\n  spreadStateToListener() {\n    this.stateChangeCallbacks.forEach(({\n      callback,\n    }) => {\n      setImmediate(() => callback(this.states.find(x => x.id === this.eliotState.id)), 0);\n    });\n  }\n\n  /**\n   * Look at the eliotStateChangeWaitingList array, and perform an eliot state change if we need to\n   * Specific behavior:\n   *\n   * (1) Error change state always pass first\n   * (2) When you want to change the state as something already true, resolve() directly\n   */\n  async lookAtEliotStateChangePipe() {\n    const elementToTreat = this.getEliotStateChangeToTreat();\n\n    // Nothing to do\n    if (!elementToTreat) return false;\n\n    elementToTreat.inProgress = true;\n\n    // If the state is already the good one\n    if (elementToTreat.eliotState.id === this.eliotState.id) {\n      // Resolve the eliot change as a success\n      elementToTreat.resolve();\n\n      return this.eliotChangeElementGotTreated(elementToTreat);\n    }\n\n    const oldEliotState = this.eliotState;\n\n    this.eliotState = elementToTreat.eliotState;\n\n    try {\n      const role = await this.getSlaveNorMaster();\n\n      // If we are the master - handle it\n      if (role.id === CONSTANT.DEFAULT_ROLE.MASTER_ROLE.id) {\n        const ret = await role.handleEliotStateChange(elementToTreat.eliotState, oldEliotState);\n\n        // Say to everyone which is listening that the state changed\n        this.spreadStateToListener();\n\n        elementToTreat.resolve(ret);\n\n        return this.eliotChangeElementGotTreated(elementToTreat);\n      }\n\n      // If we are the slave - Do nothing here (we just set the this.eliotState)\n      elementToTreat.resolve();\n\n      return this.eliotChangeElementGotTreated(elementToTreat);\n    } catch (err) {\n      elementToTreat.reject(err);\n\n      return this.eliotChangeElementGotTreated(elementToTreat);\n    }\n  }\n\n  /*\n   ***********************************************************************************************************\n   *\n   *                          PUBLIC METHODS TO USE\n   *\n   ***********************************************************************************************************\n   */\n\n  /**\n   * Launch the system\n   *\n   * We have to load dynamically systemBoot to avoid recursive import\n   */\n  boot() {\n    const SystemBoot = require('./systemBoot/systemBoot.js')\n      .default;\n\n    this.systemBoot = new SystemBoot()\n      .initialization();\n\n    // Get the instances of the roles class before to push it into the roleHandler\n    this.roles = this.roles.map(x => ({\n      ...x,\n\n      obj: x.class.getInstance(),\n    }));\n\n    // Initialize the role handler in here\n    this.roleHandler = new RoleHandler(this.roles);\n\n    this.systemBoot\n      .launch(this.launchMasterSlaveConfigurationFile);\n\n    this.startDate = new Date();\n  }\n\n  /**\n   * Launch the system ** can be called static **\n   */\n  static boot() {\n    RoleAndTask.getInstance()\n      .boot();\n  }\n\n  /**\n   * Getter\n   */\n  getMakesErrorFatal() {\n    return this.makesErrorsFatal;\n  }\n\n  /**\n   * Do we exit the processes after any error ?\n   */\n  setMakesErrorFatal(makesErrorsFatal) {\n    this.makesErrorsFatal = makesErrorsFatal;\n  }\n\n  /**\n   * Getter\n   */\n  getDisplayLog() {\n    return this.displayLog;\n  }\n\n  /**\n   * Are we displaying messages or cut them all of ?\n   */\n  setDisplayLog(displayLog) {\n    this.displayLog = displayLog;\n  }\n\n  /**\n   * Getter\n   */\n  getDisplayTask() {\n    return this.displayTask;\n  }\n\n  /**\n   * Set the task which will gonna handle the display, if there is not specified, the display is going to be made in stdout\n   *\n   * We are waiting for a task id\n   */\n  setDisplayTask(displayTask) {\n    this.displayTask = displayTask;\n  }\n\n  /**\n   * Getter\n   */\n  getPathToEntryFile() {\n    return this.pathToEntryFile;\n  }\n\n  /**\n   * Setup the entry point of your program\n   *\n   * We we are launching new slaves, we gonna use it\n   */\n  setPathToEntryFile(pathToEntryFile) {\n    this.pathToEntryFile = pathToEntryFile;\n  }\n\n  /**\n   * Setup the name of the file to read in order to get the configuration\n   */\n  setLaunchConfigurationFile(filePath) {\n    this.launchMasterSlaveConfigurationFile = filePath;\n  }\n\n  /**\n   * Subscribe to the state change. Returns the descriptor to use to unsubscribe\n   */\n  subscribeToStateChange(callback) {\n    const descriptor = Utils.generateLittleID();\n\n    this.stateChangeCallbacks.push({\n      callback,\n      descriptor,\n    });\n\n    return descriptor;\n  }\n\n  /**\n   * Unsubscribe to state change, passing the descriptor returned by subscribe function\n   */\n  unSubscribeToStateChange(descriptor) {\n    this.stateChangeCallbacks = this.stateChangeCallbacks.filter(x => x.descriptor !== descriptor);\n  }\n\n  /**\n   * Declare a new state\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   * }\n   */\n  declareState(stateConfiguration) {\n    this.states.push(stateConfiguration);\n  }\n\n  /**\n   * Declare a new Role\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   * }\n   */\n  declareRole(roleConfiguration) {\n    this.roles.push(roleConfiguration);\n  }\n\n  /**\n   * Declare the given task to the task system\n   *\n   * {\n   *   name: String,\n   *   color: String,\n   *   closureHierarchy: Number,\n   *   idsAllowedRole: [String],\n   *   obj: ATask,\n   * }\n   */\n  declareTask(taskConfiguration) {\n    this.tasks.push(taskConfiguration);\n  }\n\n  /**\n   * Remove the task from the task list using the task id\n   */\n  removeTask(taskName) {\n    this.tasks = this.tasks.filter(x => x.id !== taskName);\n  }\n\n  /**\n   * Get the tasks related to the given role id\n   */\n  getRoleTasks(idRole) {\n    return this.tasks.filter(x => x.idsAllowedRole.includes(idRole));\n  }\n\n  /**\n   * Get the roles configuration\n   */\n  getRoles() {\n    return this.roles.map((x) => {\n        if (x.id === -1) return false;\n\n        return {\n          ...x,\n\n          obj: x.class.getInstance(),\n        };\n      })\n      .filter(x => x);\n  }\n\n  /**\n   * Get the actual running role\n   */\n  async getActualRole(possibilities, i) {\n    // If there is no more possibilities - Error\n    if (i >= possibilities.length) throw new Error('EXXXX : No role available');\n\n    // Try one\n    const role = await this.roleHandler.getRole(possibilities[i]);\n\n    // If its not active, do nothing\n    if (!role.isActive()) {\n      // Try next\n      return false;\n    }\n\n    // Its good we can stop now\n    return role;\n  }\n\n  /**\n   * Get the slave role nor the master\n   * Take the first that is active\n   */\n  async getSlaveNorMaster() {\n    return Utils.promiseCallUntilTrue({\n      functionToCall: this.getActualRole,\n      context: this,\n\n      args: [\n        this.roles.map(x => x.id),\n      ],\n    });\n  }\n\n  /**\n   * Change the eliot state\n   * Role master: Set this.eliotState & spread the news to itselfs tasks and slaves\n   * Role slate: Set the this.eliotState\n   */\n  changeEliotState(idEliotState) {\n    return new Promise((resolve, reject) => {\n      // Push the order in the list of state change to perform\n      this.eliotStateChangeWaitingList.push({\n        resolve,\n        reject,\n        eliotState: this.states.find(x => x.id === idEliotState),\n        inProgress: false,\n      });\n\n      this.lookAtEliotStateChangePipe();\n    });\n  }\n\n  /**\n   * Get the name of the task who asked for the display\n   */\n  static getTheTaskWhoPerformTheDisplay(role) {\n    const activeTasks = role.getTaskHandler()\n      .getAllActiveTasks();\n\n    if (!activeTasks.length) return 'unknown';\n\n    return activeTasks[0].name;\n  }\n\n  /**\n   * Handle the display message throught the slaves and master\n   * If we are master we display the message\n   * If we are a slave we give the messsage to the master\n   * @param {Object} param\n   */\n  async displayMessage(param) {\n    try {\n      const role = await this.getSlaveNorMaster();\n\n      // Handle the fact we are trying to display an object\n      const isString = Utils.isAString(param.str);\n\n      if (isString) {\n        return role.displayMessage({\n          ...param,\n\n          // Add the task who perform the display\n          from: RoleAndTask.getTheTaskWhoPerformTheDisplay(role),\n\n          time: Date.now(),\n        });\n      }\n\n      const newParam = {\n        ...param,\n\n        // Add the task who perform the display\n        from: RoleAndTask.getTheTaskWhoPerformTheDisplay(role),\n\n        time: Date.now(),\n      };\n\n      newParam.str = JSON.stringify(newParam.str, null, 2);\n\n      // Add here the task who performed the display and the time of it\n\n      return role.displayMessage(newParam);\n    } catch (e) {\n      // Here means that we have no role available, and so that we try to display message\n      // when the role is not even launched\n      // We simply ignore the message\n      // MESSAGE TO THE DEVELOPPER, DISPLAY NOTHING BEFORE ROLES GET STARTED\n      return false;\n    }\n  }\n\n  /**\n   * Here we come when an error happened on the system and we want to deal with it,\n   * If we are the master, we tell ourselves about it\n   * If we are a slave or ... we tell the master about it\n   */\n  async errorHappened(err) {\n    // Error happens\n    Utils.displayMessage({\n      str: String((err && err.stack) || err),\n\n      out: process.stderr,\n    });\n\n    try {\n      const role = await this.getSlaveNorMaster();\n\n      if (role.id !== CONSTANT.DEFAULT_ROLE.MASTER_ROLE.id) {\n        // Send a message to the master\n        return role.tellMasterErrorHappened(err);\n      }\n\n      try {\n        // If we are the master ourselves, we put eliot in error\n        await this.changeEliotState(CONSTANT.DEFAULT_STATES.ERROR.id);\n\n        // We did sent the message :)\n        // Display the error message\n        this.displayMessage({\n          str: String((err && err.stack) || err),\n\n          tags: [\n            CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n          ],\n        });\n\n        // If the errors are supposed to be fatal, exit!\n        if (RoleAndTask.getInstance()\n          .getMakesErrorFatal()) {\n          RoleAndTask.exitEliotUnproperDueToError();\n        }\n      } catch (e) {\n        // We exit ELIOT, nothing more we can do\n        // We locally display the error so it will finish into the node-error.log file\n        RoleAndTask.exitEliotMsg('Exit eliot unproper ERROR HAPPENED', err, e);\n\n        // We use setTimeout tho if there is some others things to do before the quit it will\n        RoleAndTask.exitEliotUnproperDueToError();\n      }\n    } catch (e) {\n      RoleAndTask.exitEliotMsg('Exit eliot unproper ERROR HAPPENED CATCH', err, e);\n\n      // We use setTimeout tho if there is some others things to do before the quit it will\n      RoleAndTask.exitEliotUnproperDueToError();\n    }\n\n    return false;\n  }\n\n  /**\n   * Display messages about exiting eliot in errorHappened\n   */\n  static exitEliotMsg(txt, err, e) {\n    // We exit ELIOT, nothing more we can do\n    Utils.displayMessage({\n      str: String((err && err.stack) || err),\n      out: process.stderr,\n    });\n\n    // We locally display the error so it will finish into the node-error.log file\n    Utils.displayMessage({\n      str: String(e),\n      out: process.stderr,\n    });\n\n    Utils.displayMessage({\n      str: 'Exit eliot unproper ERROR HAPPENED CATCH',\n      out: process.stderr,\n    });\n  }\n\n  /**\n   * Make the master to quit every slaves and every task\n   * DO NOT QUIT THE APP\n   */\n  async makeTheMasterToQuitEverySlaveAndTask() {\n    // Do nothing when we already got an order for closure\n    if (this.quitOrder) return false;\n\n    this.quitOrder = true;\n\n    const role = await this.getSlaveNorMaster();\n\n    // If we are the master - handle it\n    if (role.id !== CONSTANT.DEFAULT_ROLE.MASTER_ROLE.id) throw new Error('EXXXX : Closure not possible in a slave');\n\n    /**\n     * We change the eliot state to CLOSE\n     */\n    await this.changeEliotState(CONSTANT.DEFAULT_STATES.CLOSE.id);\n\n    return this.quit();\n  }\n\n  /**\n   * Properly quit the app if we are on master\n   * Ignore if we are inside something else\n   */\n  async makeTheMasterToQuitTheWholeApp() {\n    // If the state is LAUNCHING do not quit the app\n    if (this.eliotState.id === CONSTANT.DEFAULT_STATES.LAUNCHING.id) {\n      this.displayMessage({\n        str: 'Cannot close ELIOT when the state is LAUNCHING',\n      });\n\n      return;\n    }\n\n    try {\n      const quit = await this.makeTheMasterToQuitEverySlaveAndTask();\n\n      if (quit) RoleAndTask.exitEliotGood();\n\n      // Do nothing if quit equal to false\n      // ...\n    } catch (err) {\n      RoleAndTask.getInstance()\n        .errorHappened(err);\n    }\n  }\n\n  /**\n   * We exit ELIOT unproperly due to an error that can't be fixed regulary\n   * (Ex: lose the communication between the slave and the master and we are the slave)\n   */\n  static exitEliotUnproperDueToError() {\n    // Exit after a timeout to let the system makes the displays\n    setTimeout(() => process.exit(1), CONSTANT.TIMEOUT_LEAVE_ELIOT_UNPROPER);\n  }\n\n  /**\n   * We exit ELIOT when everything had been closed the right way\n   */\n  static exitEliotGood() {\n    Utils.displayMessage({\n      str: 'Exit eliot good',\n      out: process.stderr,\n    });\n\n    process.exit(0);\n  }\n\n  /**\n   * Handle signals\n   */\n  handleSignals() {\n    // Exit ELIOT properly\n    const signalActionProper = async () => {\n      const role = await this.getSlaveNorMaster();\n\n      // If we are the master - handle it - if we are a slave ignore it\n      if (role.id !== CONSTANT.DEFAULT_ROLE.MASTER_ROLE.id) return;\n\n      this.makeTheMasterToQuitTheWholeApp();\n    };\n\n    // Exit ELIOT unproperly\n    const signalActionUnproper = () => {\n      RoleAndTask.exitEliotUnproperDueToError();\n    };\n\n    Object.keys(CONSTANT.SIGNAL)\n      .forEach((x) => {\n        process.on(CONSTANT.SIGNAL[x], () => signalActionProper());\n      });\n\n    Object.keys(CONSTANT.SIGNAL_UNPROPER)\n      .forEach((x) => {\n        process.on(CONSTANT.SIGNAL_UNPROPER[x], () => signalActionUnproper());\n      });\n  }\n\n  // ===========================================================================\n  //                        ROLE/TASK COMMUNICATION\n  // ===========================================================================\n\n  /**\n   * Send data from here to every tasks of ELIOT.\n   * We are going to send messages from communication channel's to every Slave.\n   *\n   * @param {String} dataName\n   * @param {Object} data\n   * @param {Date} timestamp\n   */\n  async sendDataToEveryELIOTTaskWhereverItIs({\n    // The name that represent the data\n    dataName,\n\n    // The data to send\n    data,\n\n    // Date of the data\n    timestamp = new Date(),\n\n    // limit to given tasks\n    limitToTaskList = false,\n  }) {\n    const {\n      DATABASE_MAINTAINANCE,\n    } = CONSTANT.DEFAULT_STATE;\n\n    const {\n      COLLECTION_CRUD,\n      SCREEN_STATUS_NEWS,\n      BREAKDOWN_PARAMETER_NEWS,\n    } = CONSTANT.GENERIC_DATA_NEWS;\n\n    // If the eliotState is one of the specified and the message type one of the specified we do not send the message\n    if (Utils.checkThatAtLeastOneElementOfArray1ExistInArray2([\n        DATABASE_MAINTAINANCE.id,\n      ], [\n        this.eliotState.id,\n      ]) && Utils.checkThatAtLeastOneElementOfArray1ExistInArray2([\n        dataName,\n      ], [\n        COLLECTION_CRUD,\n        SCREEN_STATUS_NEWS,\n        BREAKDOWN_PARAMETER_NEWS,\n      ])) {\n      return true;\n    }\n\n    const role = await this.getSlaveNorMaster();\n\n    return role.sendDataToEveryELIOTTaskWhereverItIs({\n      dataName,\n      data,\n      timestamp,\n      limitToTaskList,\n    });\n  }\n\n  /**\n   * Spread data to every tasks we locally hold\n   * @param {{dataName: String, data: Object, timestamp: Date, limitToTaskList: [String] | false}} args\n   */\n  async spreadDataToEveryLocalTask({\n    dataName,\n    data,\n    timestamp,\n    limitToTaskList,\n  }) {\n    try {\n      const role = await this.getSlaveNorMaster();\n\n      role.getTaskHandler()\n        .getAllActiveTasks()\n        .forEach((x) => {\n          // Do not tell the tasks that do not require to know\n          if (!limitToTaskList || limitToTaskList.some(y => x.id === y)) {\n            // Make it asynchronous!\n            setTimeout(() => {\n              x.consumeNewsData(dataName, data, timestamp);\n            }, 0);\n          }\n        });\n    } catch (err) {\n      this.errorHappened(err);\n    }\n  }\n\n  // ===========================================================================\n\n  // Getter\n  getRoleHandler() {\n    return this.roleHandler;\n  }\n\n  /**\n   * Quit everything that is open\n   *\n   * Including:\n   *\n   * -> Close the role (Slave or Master)\n   * ----> If slave: Close its running tasks\n   * ----> If master: Close all the slaves\n   */\n  async quit() {\n    const role = await this.getSlaveNorMaster();\n\n    await role.stop();\n\n    return true;\n  }\n\n  /**\n   * THIS METHOD WORK ONLY IN THE MASTER\n   * (It get called by HandleEliotTask)\n   *\n   * It returns in an array the whole system pids (Master + Slaves processes)\n   */\n  async getFullSystemPids() {\n    const role = await this.getMasterRole();\n\n    return role.getFullSystemPids();\n  }\n\n  /**\n   * Get the master role (error if we are not in master role process)\n   */\n  async getMasterRole() {\n    const roleMaster = await this.roleHandler.getRole(CONSTANT.DEFAULT_ROLE.MASTER_ROLE.id);\n\n    // If its not active, do nothing\n    if (!roleMaster.isActive()) throw new Error('EXXXX : No role available');\n\n    // Its good\n    return roleMaster;\n  }\n\n  /*\n   ********************************************************************\n   *               STATIC METHODS TO ACCESS DIRECTLY\n   ********************************************************************\n   */\n\n  /**\n   * Declare a new Role\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   * }\n   */\n  static declareRole(roleConfiguration) {\n    this.getInstance()\n      .declareRole(roleConfiguration);\n  }\n\n  /**\n   * Declare a new State in addition of the defaults ones\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   * }\n   */\n  static declareState(stateConfiguration) {\n    this.getInstance()\n      .declareState(stateConfiguration);\n  }\n\n  /**\n   * Declare the given task to the task system\n   *\n   * {\n   *   name: String,\n   *   color: String,\n   *   closureHierarchy: Number,\n   *   idsAllowedRole: [Number],\n   *   obj: ATask,\n   * }\n   */\n  static declareTask(taskConfiguration) {\n    this.getInstance()\n      .declareTask(taskConfiguration);\n  }\n\n  /**\n   * Remove the task from the task list using the task id\n   */\n  static removeTask(taskName) {\n    this.getInstance()\n      .removeTask(taskName);\n  }\n}\n"]}