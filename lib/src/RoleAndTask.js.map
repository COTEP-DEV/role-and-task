{"version":3,"sources":["../../src/RoleAndTask.es6"],"names":["instance","RoleAndTask","launchMasterSlaveConfigurationFile","pathToEntryFile","displayTask","displayLog","makesErrorFatal","CONSTANT","MAKES_ERROR_FATAL","considerWarningAsErrors","CONSIDER_WARNING_AS_ERRORS","masterMessageWaitingTimeout","MASTER_MESSAGE_WAITING_TIMEOUT","masterMessageWaitingTimeoutStateChange","MASTER_MESSAGE_WAITING_TIMEOUT_STATE_CHANGE","masterMessageWaitingTimeoutStopTask","MASTER_MESSAGE_WAITING_TIMEOUT_STOP_TASK","tasks","DEFAULT_TASK","map","x","filter","id","roles","DEFAULT_ROLES","states","DEFAULT_STATES","stateChangeCallbacks","programState","LAUNCHING","programStateChangeWaitingList","customLaunchingMode","quitOrder","masterMutexValidationFunctions","handleSignals","opts","availableOpts","setted","reduce","tmp","includes","displayMessage","str","PromiseCommandPattern","func","getSlaveNorMaster","role","takeMutex","releaseMutex","funcTake","funcRelease","push","length","inProgress","errorElement","some","ERROR","elem","lookAtProgramStateChangePipe","forEach","callback","find","elementToTreat","getProgramStateChangeToTreat","resolve","programChangeElementGotTreated","oldProgramState","MASTER_ROLE","handleProgramStateChange","ret","spreadStateToListener","reject","SystemBoot","require","default","systemBoot","initialization","obj","class","getInstance","roleHandler","RoleHandler","launch","startDate","Date","descriptor","Utils","generateLittleID","name","stateConfiguration","roleConfiguration","taskConfiguration","taskName","idRole","idsAllowedRole","possibilities","i","Errors","getRole","isActive","promiseCallUntilTrue","functionToCall","getActualRole","context","args","idProgramState","param","isString","isAString","from","getTheTaskWhoPerformTheDisplay","time","now","newParam","err","String","stack","out","process","stderr","tellMasterErrorHappened","changeProgramState","tags","MESSAGE_DISPLAY_TAGS","exitProgramUnproperDueToError","exitProgramMsg","CLOSE","quit","makeTheMasterToQuitEverySlaveAndTask","exitProgramGood","errorHappened","signalActionProper","makeTheMasterToQuitTheWholeApp","signalActionUnproper","SIGNAL","on","SIGNAL_UNPROPER","dataName","data","timestamp","limitToTaskList","getTaskHandler","getAllActiveTasks","y","setTimeout","consumeNewsData","getMasterRole","getFullSystemPids","getRoleHandler","roleMaster","stop","boot","activeTasks","txt","e","exit","TIMEOUT_LEAVE_PROGRAM_UNPROPER","declareRole","declareState","declareTask","removeTask"],"mappings":"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","file":"RoleAndTask.js","sourcesContent":["import CONSTANT from './Utils/CONSTANT/CONSTANT.js';\nimport Utils from './Utils/Utils.js';\nimport Errors from './Utils/Errors.js';\nimport RoleHandler from './RoleSystem/Handlers/RoleHandler.js';\nimport PromiseCommandPattern from './Utils/PromiseCommandPattern.js';\n\nlet instance = null;\n\n/**\n * Class which is the interface with the library user\n */\nexport default class RoleAndTask {\n  /**\n   * Constructor working the Singleton way\n   */\n  constructor() {\n    if (instance) return instance;\n\n    //\n    // Mandatory to fill\n    //\n\n    // Set the Master Slave Configuration File to load\n    this.launchMasterSlaveConfigurationFile = false;\n\n    // Path to the entry point of your program, we use to pop a new slave\n    this.pathToEntryFile = false;\n\n    // The task we use to perform the displays\n    this.displayTask = false;\n\n    //\n    // Options\n    //\n\n    // Are we displaying the logs ?\n    this.displayLog = true;\n\n    // Do we makes the error to be fatal ? One error -> Exit\n    this.makesErrorFatal = CONSTANT.MAKES_ERROR_FATAL;\n\n    // Do we consider warning as errors ?\n    this.considerWarningAsErrors = CONSTANT.CONSIDER_WARNING_AS_ERRORS;\n\n    // The amount of time a master wait for a slave message before to timeout\n    this.masterMessageWaitingTimeout = CONSTANT.MASTER_MESSAGE_WAITING_TIMEOUT;\n\n    // The amount of time a master wait for a slave message to acknowledge the state change before to timeout\n    this.masterMessageWaitingTimeoutStateChange = CONSTANT.MASTER_MESSAGE_WAITING_TIMEOUT_STATE_CHANGE;\n\n    // The amount of time a master wait for a slave message before to timeout\n    this.masterMessageWaitingTimeoutStopTask = CONSTANT.MASTER_MESSAGE_WAITING_TIMEOUT_STOP_TASK;\n\n    //\n    //\n\n    // Contains all the tasks referenced\n    this.tasks = [\n      ...Object.keys(CONSTANT.DEFAULT_TASK)\n      .map(x => CONSTANT.DEFAULT_TASK[x]),\n    ].filter(x => x.id !== -1);\n\n    // Contains all the roles referenced\n    this.roles = [\n      ...Object.keys(CONSTANT.DEFAULT_ROLES)\n      .map(x => CONSTANT.DEFAULT_ROLES[x]),\n    ].filter(x => x.id !== -1);\n\n    // Contains all the states the system can have\n    this.states = [\n      ...Object.keys(CONSTANT.DEFAULT_STATES)\n      .map(x => CONSTANT.DEFAULT_STATES[x]),\n    ];\n\n    // Array where we store the functions to call when the state change\n    this.stateChangeCallbacks = [];\n\n    // The state of program patform\n    this.programState = CONSTANT.DEFAULT_STATES.LAUNCHING;\n\n    // All the orders in a row to change the program state\n    this.programStateChangeWaitingList = [];\n\n    // When poping a new process, we start it using a \"launching mode\", there are two basic launching mode for \"slave\" and \"master\"\n    // You can set up a custom launching mode\n    this.customLaunchingMode = [];\n\n    // Are we quitting?\n    this.quitOrder = false;\n\n    // Contains the functions to call to validate mutex take and release in master/slave protocol\n    this.masterMutexValidationFunctions = [];\n\n    // Handle the signals\n    this.handleSignals();\n\n    instance = this;\n\n    return instance;\n  }\n\n  /**\n   * Set the configuration through one function\n   *\n   * Returns the list of the configuration that has been accepted and setted\n   */\n  setConfiguration(opts) {\n    const availableOpts = [\n      'displayTask',\n      'launchMasterSlaveConfigurationFile',\n      'pathToEntryFile',\n      'displayLog',\n      'makesErrorFatal',\n      'considerWarningAsErrors',\n      'masterMessageWaitingTimeout',\n      'masterMessageWaitingTimeoutStateChange',\n      'masterMessageWaitingTimeoutStopTask',\n    ];\n\n    const setted = Object.keys(opts)\n      .reduce((tmp, x) => {\n        // Unknown key\n        if (!availableOpts.includes(x)) return tmp;\n\n        // Set the option value\n        this[x] = opts[x];\n\n        tmp[x] = opts[x];\n\n        return tmp;\n      }, {});\n\n\n    // Display the options that has been setted up\n    this.displayMessage({\n      str: 'role-and-task : Following options has been setted up : ',\n    });\n\n    this.displayMessage({\n      str: setted,\n    });\n\n    return setted;\n  }\n\n  /**\n   * Singleton getter\n   */\n  static getInstance() {\n    return instance || new RoleAndTask();\n  }\n\n  /**\n   * In master/slave protocol, we ask to get a token\n   *\n   * SHORTCUT\n   */\n  takeMutex(id) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const role = await this.getSlaveNorMaster();\n\n        return role.takeMutex(id);\n      },\n    });\n  }\n\n  /**\n   * In master/slave protocol, we ask to release the token\n   *\n   * SHORTCUT\n   */\n  async releaseMutex(id) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const role = await this.getSlaveNorMaster();\n\n        return role.releaseMutex(id);\n      },\n    });\n  }\n\n  /**\n   * Contains the functions to call to validate mutex take and release in master/slave protocol\n   */\n  getMasterMutexFunctions() {\n    return this.masterMutexValidationFunctions;\n  }\n\n  /**\n   * Add a function to be called when a user want to take the Mutex related to the given id\n   *\n   * The function have to throw an error if the token cannot be taken, if it goes well, consider the mutex to be taken\n   */\n  addMasterMutexFunctions(id, funcTake, funcRelease) {\n    this.masterMutexValidationFunctions.push({\n      id,\n      funcTake,\n      funcRelease,\n    });\n  }\n\n  /**\n   * Get the good element to treat (Look at specific behavior described into lookAtProgramStateChangePipe comment)\n   * (If there is actually something in progress, do nothing)\n   */\n  getProgramStateChangeToTreat() {\n    // No change to perform\n    if (!this.programStateChangeWaitingList.length) return false;\n\n    let inProgress = false;\n    let errorElement = false;\n\n    this.programStateChangeWaitingList.some((x) => {\n      // We do nothing if something is in progress exept if error\n      if (x.inProgress) inProgress = true;\n\n      if (x.programState.id === CONSTANT.DEFAULT_STATES.ERROR.id) {\n        errorElement = x;\n\n        return true;\n      }\n\n      return false;\n    });\n\n    // Error comes first\n    if (errorElement) return errorElement;\n\n    // Then in progress\n    if (inProgress) return false;\n\n    // Then regular\n    return this.programStateChangeWaitingList[0];\n  }\n\n  /**\n   * Some program element got treated, remove them from the pipe\n   * @param {Object} elem\n   */\n  programChangeElementGotTreated(elem) {\n    this.programStateChangeWaitingList = this.programStateChangeWaitingList.filter(x => x !== elem);\n\n    // look if there is something else to do\n    this.lookAtProgramStateChangePipe();\n  }\n\n  /**\n   * Send the message saying the state change to whom is interested to know\n   */\n  spreadStateToListener() {\n    this.stateChangeCallbacks.forEach(({\n      callback,\n    }) => {\n      setImmediate(() => callback(this.states.find(x => x.id === this.programState.id)), 0);\n    });\n  }\n\n  /**\n   * Look at the programStateChangeWaitingList array, and perform an program state change if we need to\n   * Specific behavior:\n   *\n   * (1) Error change state always pass first\n   * (2) When you want to change the state as something already true, resolve() directly\n   */\n  lookAtProgramStateChangePipe() {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const elementToTreat = this.getProgramStateChangeToTreat();\n\n        // Nothing to do\n        if (!elementToTreat) return false;\n\n        elementToTreat.inProgress = true;\n\n        // If the state is already the good one\n        if (elementToTreat.programState.id === this.programState.id) {\n          // Resolve the program change as a success\n          elementToTreat.resolve();\n\n          return this.programChangeElementGotTreated(elementToTreat);\n        }\n\n        const oldProgramState = this.programState;\n\n        this.programState = elementToTreat.programState;\n\n        try {\n          const role = await this.getSlaveNorMaster();\n\n          // If we are the master - handle it\n          if (role.id === CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id) {\n            const ret = await role.handleProgramStateChange(elementToTreat.programState, oldProgramState);\n\n            // Say to everyone which is listening that the state changed\n            this.spreadStateToListener();\n\n            elementToTreat.resolve(ret);\n\n            return this.programChangeElementGotTreated(elementToTreat);\n          }\n\n          // If we are the slave - Do nothing here (we just set the this.programState)\n          elementToTreat.resolve();\n\n          return this.programChangeElementGotTreated(elementToTreat);\n        } catch (err) {\n          elementToTreat.reject(err);\n\n          return this.programChangeElementGotTreated(elementToTreat);\n        }\n      },\n    });\n  }\n\n  /**\n   * Launch the system\n   *\n   * We have to load dynamically systemBoot to avoid recursive import\n   */\n  boot() {\n    const SystemBoot = require('./systemBoot/systemBoot.js')\n      .default;\n\n    this.systemBoot = new SystemBoot()\n      .initialization();\n\n    // Get the instances of the roles class before to push it into the roleHandler\n    this.roles = this.roles.map(x => ({\n      ...x,\n\n      obj: x.class.getInstance(),\n    }));\n\n    // Initialize the role handler in here\n    this.roleHandler = new RoleHandler(this.roles);\n\n    this.systemBoot\n      .launch(this.launchMasterSlaveConfigurationFile);\n\n    this.startDate = new Date();\n  }\n\n  /**\n   * Launch the system ** can be called static **\n   */\n  static boot() {\n    RoleAndTask.getInstance()\n      .boot();\n  }\n\n  /**\n   * Subscribe to the state change. Returns the descriptor to use to unsubscribe\n   */\n  subscribeToStateChange(callback) {\n    const descriptor = Utils.generateLittleID();\n\n    this.stateChangeCallbacks.push({\n      callback,\n      descriptor,\n    });\n\n    return descriptor;\n  }\n\n  /**\n   * Unsubscribe to state change, passing the descriptor returned by subscribe function\n   */\n  unSubscribeToStateChange(descriptor) {\n    this.stateChangeCallbacks = this.stateChangeCallbacks.filter(x => x.descriptor !== descriptor);\n  }\n\n  /**\n   * Declare a new launching mode for processes\n   *\n   * Basics launching mode are 'slave' and 'master'.\n   *\n   * > If you want a custom Role maybe you would implement your curstom launching mode\n   */\n  declareLaunchingMode(name, func) {\n    this.customLaunchingMode.push({\n      name,\n      func,\n    });\n  }\n\n  /**\n   * Remove a custom launching mode\n   */\n  unDeclareLaunchingMode(name) {\n    this.customLaunchingMode = this.customLaunchingMode.filter(x => x.name !== name);\n  }\n\n  /**\n   * Declare a new state\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   * }\n   */\n  declareState(stateConfiguration) {\n    this.states.push(stateConfiguration);\n  }\n\n  /**\n   * Declare a new Role\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   *   class: ARole,\n   * }\n   */\n  declareRole(roleConfiguration) {\n    this.roles.push(roleConfiguration);\n  }\n\n  /**\n   * Declare the given task to the task system\n   *\n   * {\n   *   id: Number,\n   *   name: String,\n   *   color: String,\n   *   closureHierarchy: Number,\n   *   idsAllowedRole: [String],\n   *   obj: ATask,\n   *\n   *   // Only works if the task is started in master\n   *   notifyAboutArchitectureChange: Boolean,\n   * }\n   */\n  declareTask(taskConfiguration) {\n    this.tasks.push(taskConfiguration);\n  }\n\n  /**\n   * Remove the task from the task list using the task id\n   */\n  removeTask(taskName) {\n    this.tasks = this.tasks.filter(x => x.id !== taskName);\n  }\n\n  /**\n   * Get the tasks related to the given role id\n   */\n  getRoleTasks(idRole) {\n    return this.tasks.filter(x => x.idsAllowedRole.includes(idRole));\n  }\n\n  /**\n   * Get the roles configuration\n   */\n  getRoles() {\n    return this.roles.map((x) => {\n        if (x.id === -1) return false;\n\n        return {\n          ...x,\n\n          obj: x.class.getInstance(),\n        };\n      })\n      .filter(x => x);\n  }\n\n  /**\n   * Get the actual running role\n   */\n  getActualRole(possibilities, i) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // If there is no more possibilities - Error\n        if (i >= possibilities.length) throw new Errors('EXXXX', 'No role available');\n\n        // Try one\n        const role = await this.roleHandler.getRole(possibilities[i]);\n\n        // If its not active, do nothing\n        if (!role.isActive()) {\n          // Try next\n          return false;\n        }\n\n        // Its good we can stop now\n        return role;\n      },\n    });\n  }\n\n  /**\n   * Get the slave role nor the master\n   * Take the first that is active\n   */\n  getSlaveNorMaster() {\n    return new PromiseCommandPattern({\n      func: () => Utils.promiseCallUntilTrue({\n        functionToCall: this.getActualRole,\n        context: this,\n\n        args: [\n          this.roles.map(x => x.id),\n        ],\n      }),\n    });\n  }\n\n  /**\n   * Change the program state\n   * Role master: Set this.programState & spread the news to itselfs tasks and slaves\n   * Role slate: Set the this.programState\n   */\n  changeProgramState(idProgramState) {\n    return new PromiseCommandPattern({\n      func: () => new Promise((resolve, reject) => {\n        // Push the order in the list of state change to perform\n        this.programStateChangeWaitingList.push({\n          resolve,\n          reject,\n          programState: this.states.find(x => x.id === idProgramState),\n          inProgress: false,\n        });\n\n        this.lookAtProgramStateChangePipe();\n      }),\n    });\n  }\n\n  /**\n   * Get the name of the task who asked for the display\n   */\n  static getTheTaskWhoPerformTheDisplay(role) {\n    const activeTasks = role.getTaskHandler()\n      .getAllActiveTasks();\n\n    if (!activeTasks.length) return 'unknown';\n\n    return activeTasks[0].name;\n  }\n\n  /**\n   * Handle the display message throught the slaves and master\n   * If we are master we display the message\n   * If we are a slave we give the messsage to the master\n   * @param {Object} param\n   */\n  displayMessage(param) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        try {\n          const role = await this.getSlaveNorMaster();\n\n          // Handle the fact we are trying to display an object\n          const isString = Utils.isAString(param.str);\n\n          if (isString) {\n            return role.displayMessage({\n              ...param,\n\n              // Add the task who perform the display\n              from: RoleAndTask.getTheTaskWhoPerformTheDisplay(role),\n\n              time: Date.now(),\n            });\n          }\n\n          const newParam = {\n            ...param,\n\n            // Add the task who perform the display\n            from: RoleAndTask.getTheTaskWhoPerformTheDisplay(role),\n\n            time: Date.now(),\n          };\n\n          newParam.str = JSON.stringify(newParam.str, null, 2);\n\n          // Add here the task who performed the display and the time of it\n\n          return role.displayMessage(newParam);\n        } catch (e) {\n          // Here means that we have no role available, and so that we try to display message\n          // when the role is not even launched\n          // We simply ignore the message\n          // MESSAGE TO THE DEVELOPPER, DISPLAY NOTHING BEFORE ROLES GET STARTED\n          return false;\n        }\n      },\n    });\n  }\n\n  /**\n   * Here we come when an error happened on the system and we want to deal with it,\n   * If we are the master, we tell ourselves about it\n   * If we are a slave or ... we tell the master about it\n   */\n  errorHappened(err) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Error happens\n        Utils.displayMessage({\n          str: String((err && err.stack) || err),\n\n          out: process.stderr,\n        });\n\n        try {\n          const role = await this.getSlaveNorMaster();\n\n          if (role.id !== CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id) {\n            // Send a message to the master\n            return role.tellMasterErrorHappened(err);\n          }\n\n          try {\n            // If we are the master ourselves, we put program in error\n            await this.changeProgramState(CONSTANT.DEFAULT_STATES.ERROR.id);\n\n            // We did sent the message :)\n            // Display the error message\n            this.displayMessage({\n              str: String((err && err.stack) || err),\n\n              tags: [\n                CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n              ],\n            });\n\n            // If the errors are supposed to be fatal, exit!\n            if (RoleAndTask.getInstance()\n              .makesErrorFatal) {\n              RoleAndTask.exitProgramUnproperDueToError();\n            }\n          } catch (e) {\n            // We exit PROGRAM, nothing more we can do\n            // We locally display the error so it will finish into the node-error.log file\n            RoleAndTask.exitProgramMsg('Exit program unproper ERROR HAPPENED', err, e);\n\n            // We use setTimeout tho if there is some others things to do before the quit it will\n            RoleAndTask.exitProgramUnproperDueToError();\n          }\n        } catch (e) {\n          RoleAndTask.exitProgramMsg('Exit program unproper ERROR HAPPENED CATCH', err, e);\n\n          // We use setTimeout tho if there is some others things to do before the quit it will\n          RoleAndTask.exitProgramUnproperDueToError();\n        }\n\n        return false;\n      },\n    });\n  }\n\n  /**\n   * Display messages about exiting program in errorHappened\n   */\n  static exitProgramMsg(txt, err, e) {\n    // We exit PROGRAM, nothing more we can do\n    Utils.displayMessage({\n      str: String((err && err.stack) || err),\n      out: process.stderr,\n    });\n\n    // We locally display the error so it will finish into the node-error.log file\n    Utils.displayMessage({\n      str: String(e),\n      out: process.stderr,\n    });\n\n    Utils.displayMessage({\n      str: 'Exit program unproper ERROR HAPPENED CATCH',\n      out: process.stderr,\n    });\n  }\n\n  /**\n   * Make the master to quit every slaves and every task\n   * DO NOT QUIT THE APP\n   */\n  makeTheMasterToQuitEverySlaveAndTask() {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Do nothing when we already got an order for closure\n        if (this.quitOrder) return false;\n\n        this.quitOrder = true;\n\n        const role = await this.getSlaveNorMaster();\n\n        // If we are the master - handle it\n        if (role.id !== CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id) throw new Errors('EXXXX', 'Closure not possible in a slave');\n\n        /**\n         * We change the program state to CLOSE\n         */\n        await this.changeProgramState(CONSTANT.DEFAULT_STATES.CLOSE.id);\n\n        return this.quit();\n      },\n    });\n  }\n\n  /**\n   * Properly quit the app if we are on master\n   * Ignore if we are inside something else\n   */\n  makeTheMasterToQuitTheWholeApp() {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // If the state is LAUNCHING do not quit the app\n        if (this.programState.id === CONSTANT.DEFAULT_STATES.LAUNCHING.id) {\n          this.displayMessage({\n            str: 'Cannot close PROGRAM when the state is LAUNCHING',\n          });\n\n          return;\n        }\n\n        try {\n          const quit = await this.makeTheMasterToQuitEverySlaveAndTask();\n\n          if (quit) RoleAndTask.exitProgramGood();\n\n          // Do nothing if quit equal to false\n          // ...\n        } catch (err) {\n          RoleAndTask.getInstance()\n            .errorHappened(err);\n        }\n      },\n    });\n  }\n\n  /**\n   * We exit PROGRAM unproperly due to an error that can't be fixed regulary\n   * (Ex: lose the communication between the slave and the master and we are the slave)\n   */\n  static exitProgramUnproperDueToError() {\n    // Exit after a timeout to let the system makes the displays\n    setTimeout(() => process.exit(1), CONSTANT.TIMEOUT_LEAVE_PROGRAM_UNPROPER);\n  }\n\n  /**\n   * We exit PROGRAM when everything had been closed the right way\n   */\n  static exitProgramGood() {\n    Utils.displayMessage({\n      str: 'Exit program good',\n      out: process.stderr,\n    });\n\n    process.exit(0);\n  }\n\n  /**\n   * Handle signals\n   */\n  handleSignals() {\n    // Exit PROGRAM properly\n    const signalActionProper = async () => {\n      const role = await this.getSlaveNorMaster();\n\n      // If we are the master - handle it - if we are a slave ignore it\n      if (role.id !== CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id) return;\n\n      this.makeTheMasterToQuitTheWholeApp();\n    };\n\n    // Exit PROGRAM unproperly\n    const signalActionUnproper = () => {\n      RoleAndTask.exitProgramUnproperDueToError();\n    };\n\n    Object.keys(CONSTANT.SIGNAL)\n      .forEach((x) => {\n        process.on(CONSTANT.SIGNAL[x], () => signalActionProper());\n      });\n\n    Object.keys(CONSTANT.SIGNAL_UNPROPER)\n      .forEach((x) => {\n        process.on(CONSTANT.SIGNAL_UNPROPER[x], () => signalActionUnproper());\n      });\n  }\n\n  /**\n   * Spread data to every tasks we locally hold\n   * @param {{dataName: String, data: Object, timestamp: Date, limitToTaskList: [String] | false}} args\n   */\n  spreadDataToEveryLocalTask({\n    dataName,\n    data,\n    timestamp,\n    limitToTaskList,\n  }) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        try {\n          const role = await this.getSlaveNorMaster();\n\n          role.getTaskHandler()\n            .getAllActiveTasks()\n            .forEach((x) => {\n              // Do not tell the tasks that do not require to know\n              if (!limitToTaskList || limitToTaskList.some(y => x.id === y)) {\n                // Make it asynchronous!\n                setTimeout(() => {\n                  x.consumeNewsData(dataName, data, timestamp);\n                }, 0);\n              }\n            });\n        } catch (err) {\n          this.errorHappened(err);\n        }\n      },\n    });\n  }\n\n  /**\n   * THIS METHOD WORK ONLY IN THE MASTER\n   * (It get called by HandleProgramTask)\n   *\n   * It returns in an array the whole system pids (Master + Slaves processes)\n   */\n  getFullSystemPids() {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const role = await this.getMasterRole();\n\n        return role.getFullSystemPids();\n      },\n    });\n  }\n\n  /**\n   * Get the master role (error if we are not in master role process)\n   */\n  getMasterRole() {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const roleMaster = await this.getRoleHandler()\n          .getRole(CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id);\n\n        // If its not active, do nothing\n        if (!roleMaster.isActive()) throw new Errors('EXXXX', 'Master is not active in getMasterRole');\n\n        // Its good\n        return roleMaster;\n      },\n    });\n  }\n\n  // Getter\n  getRoleHandler() {\n    return this.roleHandler;\n  }\n\n  /**\n   * Quit everything that is open\n   *\n   * Including:\n   *\n   * -> Close the role (Slave or Master)\n   * ----> If slave: Close its running tasks\n   * ----> If master: Close all the slaves\n   */\n  quit() {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const role = await this.getSlaveNorMaster();\n\n        await role.stop();\n\n        return true;\n      },\n    });\n  }\n\n  /*\n   ********************************************************************\n   *               STATIC METHODS TO ACCESS DIRECTLY\n   ********************************************************************\n   */\n\n  /**\n   * Declare a new Role\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   *   class: ARole,\n   * }\n   */\n  static declareRole(roleConfiguration) {\n    this.getInstance()\n      .declareRole(roleConfiguration);\n  }\n\n  /**\n   * Declare a new State in addition of the defaults ones\n   *\n   * {\n   *   name: String,\n   *   id: String,\n   * }\n   */\n  static declareState(stateConfiguration) {\n    this.getInstance()\n      .declareState(stateConfiguration);\n  }\n\n  /**\n   * Declare the given task to the task system\n   *\n   * {\n   *   id: Number,\n   *   name: String,\n   *   color: String,\n   *   closureHierarchy: Number,\n   *   idsAllowedRole: [Number],\n   *   obj: ATask,\n   *\n   *   // Only works if the task is started in master\n   *   notifyAboutArchitectureChange: Boolean,\n   * }\n   */\n  static declareTask(taskConfiguration) {\n    this.getInstance()\n      .declareTask(taskConfiguration);\n  }\n\n  /**\n   * Remove the task from the task list using the task id\n   */\n  static removeTask(taskName) {\n    this.getInstance()\n      .removeTask(taskName);\n  }\n}\n"]}