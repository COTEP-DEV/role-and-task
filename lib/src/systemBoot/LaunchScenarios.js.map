{"version":3,"sources":["../../../src/systemBoot/LaunchScenarios.es6"],"names":["instance","LaunchScenarios","lastLaunch","name","CONSTANT","PROGRAM_LAUNCHING_MODE","MASTER","func","master","SLAVE","slave","RoleAndTask","getInstance","customLaunchingMode","options","launchMasterSlaveConfigurationFile","PromiseCommandPattern","method","spreadStateToListener","readLaunchMasterSlaveConfigurationFile","launchConfFileContent","changeProgramState","DEFAULT_STATES","READY_PROCESS","id","roleHandler","getRoleHandler","optCreatSlave","parseEqualsArrayOptions","PROGRAM_LAUNCHING_PARAMETERS","MODE_OPTIONS","parsedOptions","Object","keys","SLAVE_START_ARGS","map","x","forEach","startRole","DEFAULT_ROLES","SLAVE_ROLE","filename","Utils","readFile","parseHjsonContent","Array","Errors","ret","some","tmp","split","length"],"mappings":"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","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\nimport Utils from '../Utils/Utils.js';\nimport Errors from '../Utils/Errors.js';\nimport applyConfigurationMasterSlaveLaunch from './applyConfigurationMasterSlaveLaunch.js';\nimport RoleAndTask from '../RoleAndTask.js';\nimport PromiseCommandPattern from '../Utils/PromiseCommandPattern.js';\n\nlet instance = null;\n\n/**\n * This class implement the different launch scenarios of PROGRAM\n */\nexport default class LaunchScenarios {\n  constructor() {\n    if (instance) return instance;\n\n    this.lastLaunch = false;\n\n    instance = this;\n\n    return instance;\n  }\n\n  /**\n   * SINGLETON implementation\n   */\n  static getInstance() {\n    return instance || new LaunchScenarios();\n  }\n\n  /**\n   * Get the map of launching modes\n   */\n  getMapLaunchingModes() {\n    return [{\n        name: CONSTANT.PROGRAM_LAUNCHING_MODE.MASTER,\n        func: this.master,\n      }, {\n        name: CONSTANT.PROGRAM_LAUNCHING_MODE.SLAVE,\n        func: this.slave,\n      },\n\n      // Add the custom launching mode in the map so they are taken in count\n      ...RoleAndTask.getInstance()\n      .customLaunchingMode,\n    ];\n  }\n\n  /**\n   * Read the Master Slave launch configuration file\n   */\n  static readLaunchMasterSlaveConfigurationFile(filename) {\n    return new PromiseCommandPattern({\n      func: async () => Utils.parseHjsonContent(await Utils.readFile(filename)),\n    });\n  }\n\n  /**\n   * Start PROGRAM in master mode\n   */\n  master(options, launchMasterSlaveConfigurationFile) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        this.lastLaunch = {\n          method: this.master,\n          options,\n        };\n\n        // Say to people in which state we are at launch -> LAUNCHING\n        await RoleAndTask.getInstance()\n          .spreadStateToListener();\n\n        // LaunchScenarios the display of the program state (launching)\n        // Load the configuration file configuration\n        const launchConfFileContent = await LaunchScenarios.readLaunchMasterSlaveConfigurationFile(launchMasterSlaveConfigurationFile);\n\n        await applyConfigurationMasterSlaveLaunch(launchConfFileContent);\n\n        // Here we can put the system as ready\n        await RoleAndTask.getInstance()\n          .changeProgramState(CONSTANT.DEFAULT_STATES.READY_PROCESS.id);\n\n        return true;\n      },\n    });\n  }\n\n  /**\n   * Takes option-key = ['optA=12', 'optB=78', ...]\n   * and return [\n   *   optA: '12',\n   *   optB: '78',\n   * ]\n   *\n   * @param {Object} options\n   * @param {String} name\n   */\n  static parseEqualsArrayOptions(options, name) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // If there is none informations\n        if (!options || !options[name]) return {};\n\n        if (!(options[name] instanceof Array)) throw new Errors('INVALID_LAUNCHING_PARAMETER', `Parameter: ${name}`);\n\n        let tmp;\n\n        const parsedOptions = {};\n        const ret = options[name].some((x) => {\n          tmp = x.split('=');\n\n          // If the pattern optA=value isn't respected return an error\n          if (tmp.length !== 2) return true;\n\n          parsedOptions[tmp[0]] = tmp[1];\n\n          return false;\n        });\n\n        if (ret) throw new Errors('INVALID_LAUNCHING_PARAMETER', `Parameter: ${name}`);\n\n        return parsedOptions;\n      },\n    });\n  }\n\n  /**\n   * Start PROGRAM in slave mode\n   */\n  slave(options) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const roleHandler = RoleAndTask.getInstance()\n          .getRoleHandler();\n\n        const optCreatSlave = {};\n\n        this.lastLaunch = {\n          method: this.slave,\n          options,\n        };\n\n        // We have something like mode-options = ['optA=12', 'optB=78', ...]\n        const parsedOptions = await LaunchScenarios.parseEqualsArrayOptions(options, CONSTANT.PROGRAM_LAUNCHING_PARAMETERS.MODE_OPTIONS.name);\n\n        // Create dynamically the options to create a new slave depending on what the CLI gave to us\n        // Add as enter parameter all parameters that can be taken as Slave start\n        Object.keys(CONSTANT.SLAVE_START_ARGS)\n          .map(x => CONSTANT.SLAVE_START_ARGS[x])\n          .forEach((x) => {\n            if (parsedOptions[x]) optCreatSlave[x] = parsedOptions[x];\n          });\n\n        await roleHandler.startRole(CONSTANT.DEFAULT_ROLES.SLAVE_ROLE.id, optCreatSlave);\n\n        return true;\n      },\n    });\n  }\n}\n"],"file":"LaunchScenarios.js"}