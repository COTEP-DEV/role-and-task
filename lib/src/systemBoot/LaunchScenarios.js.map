{"version":3,"sources":["../../../src/systemBoot/LaunchScenarios.ts"],"names":["LaunchScenarios","name","CONSTANT","PROGRAM_LAUNCHING_MODE","MASTER","func","master","SLAVE","slave","RoleAndTask","getInstance","customLaunchingMode","filename","PromiseCommandPattern","Utils","readFile","parseHjsonContent","options","launchMasterSlaveConfigurationFile","spreadStateToListener","readLaunchMasterSlaveConfigurationFile","launchConfFileContent","changeProgramState","DEFAULT_STATES","READY_PROCESS","id","roleHandler","getRoleHandler","startRole","DEFAULT_ROLES","SLAVE_ROLE","modeoptions"],"mappings":";;;;;;;;;;;;;;;;;;;AAKA;;AACA;;AACA;;AACA;;AACA;;AATA;AACA;AACA;AAEA;;AAOA;;;IAGqBA,e;;;;;;;;;;AACnB;;;2CAG8B;AAC5B,cAAQ;AACJC,QAAAA,IAAI,EAAEC,qBAASC,sBAAT,CAAgCC,MADlC;AAEJC,QAAAA,IAAI,EAAEL,eAAe,CAACM;AAFlB,OAAR,EAGK;AACDL,QAAAA,IAAI,EAAEC,qBAASC,sBAAT,CAAgCI,KADrC;AAEDF,QAAAA,IAAI,EAAEL,eAAe,CAACQ;AAFrB,OAHL,6CASKC,wBAAYC,WAAZ,GACFC,mBAVH;AAYD;AAED;;;;;;2DAG8CC,Q,EAAU;AACtD,aAAO,IAAIC,iCAAJ,CAA0B;AAC/BR,QAAAA,IAAI;AAAA;AAAA;AAAA,uCAAE;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAYS,iBAAZ;AAAA;AAAA,2BAA0CA,kBAAMC,QAAN,CAAeH,QAAf,CAA1C;;AAAA;AAAA;AAAA,iEAAkBI,iBAAlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAD2B,OAA1B,CAAP;AAGD;AAED;;;;;;2BAGcC,O,EAASC,kC,EAAoC;AACzD,aAAO,IAAIL,iCAAJ,CAA0B;AAC/BR,QAAAA,IAAI;AAAA;AAAA;AAAA,uCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEEI,wBAAYC,WAAZ,GACHS,qBADG,EAFF;;AAAA;AAAA;AAAA,2BAOgCnB,eAAe,CAACoB,sCAAhB,CAAuDF,kCAAvD,CAPhC;;AAAA;AAOEG,oBAAAA,qBAPF;AAAA;AAAA,2BASE,qDAAoCA,qBAApC,CATF;;AAAA;AAAA;AAAA,2BAYEZ,wBAAYC,WAAZ,GACHY,kBADG,CACgBpB,qBAASqB,cAAT,CAAwBC,aAAxB,CAAsCC,EADtD,CAZF;;AAAA;AAAA,sDAeG,IAfH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAD2B,OAA1B,CAAP;AAmBD;AAED;;;;;;0BAGaR,O,EAAS;AACpB,aAAO,IAAIJ,iCAAJ,CAA0B;AAC/BR,QAAAA,IAAI;AAAA;AAAA;AAAA,uCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACEqB,oBAAAA,WADF,GACgBjB,wBAAYC,WAAZ,GACjBiB,cADiB,EADhB;AAAA;AAAA,2BAIED,WAAW,CAACE,SAAZ,CAAsB1B,qBAAS2B,aAAT,CAAuBC,UAAvB,CAAkCL,EAAxD,EAA4DR,OAAO,CAACc,WAApE,CAJF;;AAAA;AAAA,sDAMG,IANH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAD2B,OAA1B,CAAP;AAUD","sourcesContent":["//\n// Copyright (c) 2019 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\nimport Utils from '../Utils/Utils.js';\nimport applyConfigurationMasterSlaveLaunch from './applyConfigurationMasterSlaveLaunch.js';\nimport RoleAndTask from '../RoleAndTask.js';\nimport PromiseCommandPattern from '../Utils/PromiseCommandPattern.js';\n\n/**\n * This class implement the different launch scenarios of PROGRAM\n */\nexport default class LaunchScenarios {\n  /**\n   * Get the map of launching modes\n   */\n  static getMapLaunchingModes() {\n    return [{\n        name: CONSTANT.PROGRAM_LAUNCHING_MODE.MASTER,\n        func: LaunchScenarios.master,\n      }, {\n        name: CONSTANT.PROGRAM_LAUNCHING_MODE.SLAVE,\n        func: LaunchScenarios.slave,\n      },\n\n      // Add the custom launching mode in the map so they are taken in count\n      ...RoleAndTask.getInstance()\n      .customLaunchingMode,\n    ];\n  }\n\n  /**\n   * Read the Master Slave launch configuration file\n   */\n  static readLaunchMasterSlaveConfigurationFile(filename) {\n    return new PromiseCommandPattern({\n      func: async () => Utils.parseHjsonContent(await Utils.readFile(filename)),\n    });\n  }\n\n  /**\n   * Start PROGRAM in master mode\n   */\n  static master(options, launchMasterSlaveConfigurationFile) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Say to people in which state we are at launch -> LAUNCHING\n        await RoleAndTask.getInstance()\n          .spreadStateToListener();\n\n        // LaunchScenarios the display of the program state (launching)\n        // Load the configuration file configuration\n        const launchConfFileContent = await LaunchScenarios.readLaunchMasterSlaveConfigurationFile(launchMasterSlaveConfigurationFile);\n\n        await applyConfigurationMasterSlaveLaunch(launchConfFileContent);\n\n        // Here we can put the system as ready\n        await RoleAndTask.getInstance()\n          .changeProgramState(CONSTANT.DEFAULT_STATES.READY_PROCESS.id);\n\n        return true;\n      },\n    });\n  }\n\n  /**\n   * Start PROGRAM in slave mode\n   */\n  static slave(options) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const roleHandler = RoleAndTask.getInstance()\n          .getRoleHandler();\n\n        await roleHandler.startRole(CONSTANT.DEFAULT_ROLES.SLAVE_ROLE.id, options.modeoptions);\n\n        return true;\n      },\n    });\n  }\n}\n"],"file":"LaunchScenarios.js"}