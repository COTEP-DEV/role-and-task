{"version":3,"sources":["../../../src/systemBoot/LaunchScenarios.es6"],"names":["instance","LaunchScenarios","lastLaunch","name","CONSTANT","ELIOT_LAUNCHING_MODE","MASTER","func","master","SLAVE","slave","RoleAndTask","getInstance","customLaunchingMode","options","launchMasterSlaveConfigurationFile","method","spreadStateToListener","readLaunchMasterSlaveConfigurationFile","launchConfFileContent","changeEliotState","DEFAULT_STATES","READY_PROCESS","id","roleHandler","getRoleHandler","optCreatSlave","parseEqualsArrayOptions","ELIOT_LAUNCHING_PARAMETERS","MODE_OPTIONS","parsedOptions","SLAVE_START_ARGS","map","x","forEach","startRole","DEFAULT_ROLES","SLAVE_ROLE","filename","Utils","readFile","parseHjsonContent","Array","Error","tmp","ret","some","split","length"],"mappings":"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","file":"LaunchScenarios.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\nimport Utils from '../Utils/Utils.js';\nimport applyConfigurationMasterSlaveLaunch from './applyConfigurationMasterSlaveLaunch.js';\nimport RoleAndTask from '../RoleAndTask.js';\n\nlet instance = null;\n\n/**\n * This class implement the different launch scenarios of ELIOT\n */\nexport default class LaunchScenarios {\n  constructor() {\n    if (instance) return instance;\n\n    this.lastLaunch = false;\n\n    instance = this;\n\n    return instance;\n  }\n\n  /**\n   * SINGLETON implementation\n   */\n  static getInstance() {\n    return instance || new LaunchScenarios();\n  }\n\n  /**\n   * Get the map of launching modes\n   */\n  getMapLaunchingModes() {\n    return [{\n        name: CONSTANT.ELIOT_LAUNCHING_MODE.MASTER,\n        func: this.master,\n      }, {\n        name: CONSTANT.ELIOT_LAUNCHING_MODE.SLAVE,\n        func: this.slave,\n      },\n\n      // Add the custom launching mode in the map so they are taken in count\n      ...RoleAndTask.getInstance()\n      .customLaunchingMode,\n    ];\n  }\n\n  /**\n   * Read the Master Slave launch configuration file\n   */\n  static async readLaunchMasterSlaveConfigurationFile(filename) {\n    return Utils.parseHjsonContent(await Utils.readFile(filename));\n  }\n\n  /**\n   * Start ELIOT in master mode\n   */\n  async master(options, launchMasterSlaveConfigurationFile) {\n    this.lastLaunch = {\n      method: this.master,\n      options,\n    };\n\n    // Say to people in which state we are at launch -> LAUNCHING\n    await RoleAndTask.getInstance()\n      .spreadStateToListener();\n\n    // LaunchScenarios the display of the eliot state (launching)\n    // Load the configuration file configuration\n    const launchConfFileContent = await LaunchScenarios.readLaunchMasterSlaveConfigurationFile(launchMasterSlaveConfigurationFile);\n\n    await applyConfigurationMasterSlaveLaunch(launchConfFileContent);\n\n    // Here we can put the system as ready\n    await RoleAndTask.getInstance()\n      .changeEliotState(CONSTANT.DEFAULT_STATES.READY_PROCESS.id);\n\n    return true;\n  }\n\n  /**\n   * Takes option-key = ['optA=12', 'optB=78', ...]\n   * and return [\n   *   optA: '12',\n   *   optB: '78',\n   * ]\n   *\n   * @param {Object} options\n   * @param {String} name\n   */\n  static async parseEqualsArrayOptions(options, name) {\n    // If there is none informations\n    if (!options || !options[name]) return {};\n\n    if (!(options[name] instanceof Array)) throw new Error(`INVALID_LAUNCHING_PARAMETER : Parameter: ${name}`);\n\n    let tmp;\n\n    const parsedOptions = {};\n    const ret = options[name].some((x) => {\n      tmp = x.split('=');\n\n      // If the pattern optA=value isn't respected return an error\n      if (tmp.length !== 2) return true;\n\n      parsedOptions[tmp[0]] = tmp[1];\n\n      return false;\n    });\n\n    if (ret) throw new Error(`INVALID_LAUNCHING_PARAMETER : Parameter: ${name}`);\n\n    return parsedOptions;\n  }\n\n  /**\n   * Start ELIOT in slave mode\n   */\n  async slave(options) {\n    const roleHandler = RoleAndTask.getInstance()\n      .getRoleHandler();\n\n    const optCreatSlave = {};\n\n    this.lastLaunch = {\n      method: this.slave,\n      options,\n    };\n\n    // We have something like mode-options = ['optA=12', 'optB=78', ...]\n    const parsedOptions = await LaunchScenarios.parseEqualsArrayOptions(options, CONSTANT.ELIOT_LAUNCHING_PARAMETERS.MODE_OPTIONS.name);\n\n    // Create dynamically the options to create a new slave depending on what the CLI gave to us\n    // Add as enter parameter all parameters that can be taken as Slave start\n    Object.keys(CONSTANT.SLAVE_START_ARGS)\n      .map(x => CONSTANT.SLAVE_START_ARGS[x])\n      .forEach((x) => {\n        if (parsedOptions[x]) optCreatSlave[x] = parsedOptions[x];\n      });\n\n    await roleHandler.startRole(CONSTANT.DEFAULT_ROLES.SLAVE_ROLE.id, optCreatSlave);\n\n    return true;\n  }\n}\n"]}