{"version":3,"sources":["../../../src/systemBoot/systemBoot.es6"],"names":["SystemBoot","options","name","CONSTANT","ELIOT_LAUNCHING_PARAMETERS","MODE","alias","type","String","MODE_OPTIONS","multiple","launchingModesMap","LaunchScenarios","getInstance","getMapLaunchingModes","systemInitialization","eliotInitialization","launchMasterSlaveConfigurationFile","mode","DEFAULT_LAUNCHING_MODE","elem","find","x","Utils","displayMessage","str","Error","tags","MESSAGE_DISPLAY_TAGS","ERROR","func","call","RoleAndTask","errorHappened","process","on","PROCESS_EXCEPTION","err","stack","match","UNHANDLED_PROMISE_REJECTION","reason","NODE_WARNING","global","DEV","sd","out","stderr","EventEmitter","defaultMaxListeners","MAX_NUMBER_OF_LISTENER","DevUtils"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AACA;;AAEA;IACqBA,U;AACnB;;;AAGA,wBAAc;AAAA;;AACZ;AACA;AACA,SAAKC,OAAL,GAAe,+BAAgB,CAAC;AAC9B;AACAC,YAAMC,mBAASC,0BAAT,CAAoCC,IAApC,CAAyCH,IAFjB;AAG9BI,aAAOH,mBAASC,0BAAT,CAAoCC,IAApC,CAAyCC,KAHlB;AAI9BC,YAAMC;AAJwB,KAAD,EAK5B;AACD;AACAN,YAAMC,mBAASC,0BAAT,CAAoCK,YAApC,CAAiDP,IAFtD;AAGDI,aAAOH,mBAASC,0BAAT,CAAoCK,YAApC,CAAiDH,KAHvD;AAIDC,YAAMC,MAJL;AAKDE,gBAAU;AALT,KAL4B,CAAhB,CAAf;;AAaA,SAAKC,iBAAL,GAAyBC,0BAAgBC,WAAhB,GACtBC,oBADsB,EAAzB;AAED;;AAED;;;;;;;;;AAmDA;;;qCAGiB;AACfd,iBAAWe,oBAAX;;AAEAf,iBAAWgB,mBAAX;;AAEA,aAAO,IAAP;AACD;;AAED;;;;;;;2GAGaC,kC;;;;;;;;AACX;AACA,oBAAI,CAAC,KAAKhB,OAAL,CAAaiB,IAAlB,EAAwB,KAAKjB,OAAL,CAAaiB,IAAb,GAAoBf,mBAASgB,sBAA7B;;AAExB;AACMC,oB,GAAO,KAAKT,iBAAL,CAAuBU,IAAvB,CAA4B;AAAA,yBAAKC,EAAEpB,IAAF,KAAW,MAAKD,OAAL,CAAaiB,IAA7B;AAAA,iBAA5B,C;;oBAERE,I;;;;;AACHG,gCAAMC,cAAN,CAAqB;AACnBC,uBAAK,IAAIC,KAAJ,CAAU,wBAAV,CADc;;AAGnBC,wBAAM,CACJxB,mBAASyB,oBAAT,CAA8BC,KAD1B;AAHa,iBAArB;;iDAQO,I;;;;;uBAKDT,KAAKU,IAAL,CAAUC,IAAV,CAAenB,0BAAgBC,WAAhB,EAAf,EAA8C,KAAKZ,OAAnD,EAA4DgB,kCAA5D,C;;;;;;;;;;AAENe,sCAAYnB,WAAZ,GACGoB,aADH;;;iDAIK,I;;;;;;;;;;;;;;;;;;2CAzFqB;AAC5B;AACAC,cAAQC,EAAR,CAAWhC,mBAASiC,iBAApB,EAAuC,UAACC,GAAD,EAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAIA,OAAOA,IAAIC,KAAX,IAAoBD,IAAIC,KAAJ,CAAUC,KAAV,CAAgB,iBAAhB,CAAxB,EAA4D;;AAE5DP,8BAAYnB,WAAZ,GACGoB,aADH,CACiBI,GADjB;AAED,OAZD;;AAcA;AACAH,cAAQC,EAAR,CAAWhC,mBAASqC,2BAApB,EAAiD,UAACC,MAAD,EAAY;AAC3DT,8BAAYnB,WAAZ,GACGoB,aADH,CACiB,IAAIP,KAAJ,oBAA2BlB,OAAOiC,MAAP,CAA3B,CADjB;AAED,OAHD;;AAKA;AACAP,cAAQC,EAAR,CAAWhC,mBAASuC,YAApB,EAAkC,UAACD,MAAD,EAAY;AAC5CE,eAAOC,GAAP,CAAWC,EAAX,CAAc,aAAd;AACAF,eAAOC,GAAP,CAAWC,EAAX,CAAcJ,MAAd;;AAEAlB,wBAAMC,cAAN,CAAqB;AACnBC,eAAKgB,MADc;AAEnBK,eAAKZ,QAAQa;AAFM,SAArB;AAID,OARD;;AAUA;AACAC,uBAAaC,mBAAb,GAAmC9C,mBAAS+C,sBAA5C;AACD;;AAED;;;;;;0CAG6B;AAC3B;AACAlB,4BAAYnB,WAAZ;;AAEA;AACAsC,yBAAStC,WAAT;AACD;;;;;AA9EH;AAbA;AACA;AACA;;AAEA;;;kBAcqBb,U","file":"systemBoot.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport EventEmitter from 'events';\nimport commandLineArgs from 'command-line-args';\n\nimport LaunchScenarios from './LaunchScenarios.js';\nimport RoleAndTask from '../RoleAndTask.js';\nimport Utils from '../Utils/Utils.js';\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\n\n// Get the file to make it be in GLOBAL\nimport DevUtils from '../Utils/DevUtils.js';\n// -------------------------------------\n\n// We are in the main here\nexport default class SystemBoot {\n  /**\n   * Constructor\n   */\n  constructor() {\n    // Do we launch master or slave or oldway?\n    // Get the options\n    this.options = commandLineArgs([{\n      // Theses must be like --mode optA=12 optB=9\n      name: CONSTANT.ELIOT_LAUNCHING_PARAMETERS.MODE.name,\n      alias: CONSTANT.ELIOT_LAUNCHING_PARAMETERS.MODE.alias,\n      type: String,\n    }, {\n      // Theses must be like --mode-options optA=12 optB=9\n      name: CONSTANT.ELIOT_LAUNCHING_PARAMETERS.MODE_OPTIONS.name,\n      alias: CONSTANT.ELIOT_LAUNCHING_PARAMETERS.MODE_OPTIONS.alias,\n      type: String,\n      multiple: true,\n    }]);\n\n    this.launchingModesMap = LaunchScenarios.getInstance()\n      .getMapLaunchingModes();\n  }\n\n  /**\n   * System initialization (not ELIOT)\n   */\n  static systemInitialization() {\n    // We catch uncaught exceptions\n    process.on(CONSTANT.PROCESS_EXCEPTION, (err) => {\n      //\n      // SPECIFIC TO BLESSED PLUGIN\n      //\n      //\n      // Ignore blessed errors because there is a non blocking issue unresolved in the plugin\n      //\n      //\n      if (err && err.stack && err.stack.match(/^.+blessed.+$/im)) return;\n\n      RoleAndTask.getInstance()\n        .errorHappened(err);\n    });\n\n    // We catch unhandled promises\n    process.on(CONSTANT.UNHANDLED_PROMISE_REJECTION, (reason) => {\n      RoleAndTask.getInstance()\n        .errorHappened(new Error(`GENERAL_CATCH ${String(reason)}`));\n    });\n\n    // We catch warnings\n    process.on(CONSTANT.NODE_WARNING, (reason) => {\n      global.DEV.sd('Warning -> ');\n      global.DEV.sd(reason);\n\n      Utils.displayMessage({\n        str: reason,\n        out: process.stderr,\n      });\n    });\n\n    // Set the maximum number of listeners Default is 11\n    EventEmitter.defaultMaxListeners = CONSTANT.MAX_NUMBER_OF_LISTENER;\n  }\n\n  /**\n   * ELIOT System initialization\n   */\n  static eliotInitialization() {\n    // LaunchScenarios the RoleAndTask initialization\n    RoleAndTask.getInstance();\n\n    // LaunchScenarios the dev utilitary initialization\n    DevUtils.getInstance();\n  }\n\n  /**\n   * All initializations\n   */\n  initialization() {\n    SystemBoot.systemInitialization();\n\n    SystemBoot.eliotInitialization();\n\n    return this;\n  }\n\n  /**\n   * LaunchScenarios ELIOT\n   */\n  async launch(launchMasterSlaveConfigurationFile) {\n    // Default launch mode\n    if (!this.options.mode) this.options.mode = CONSTANT.DEFAULT_LAUNCHING_MODE;\n\n    // Look if we have a mode that correspond to it\n    const elem = this.launchingModesMap.find(x => x.name === this.options.mode);\n\n    if (!elem) {\n      Utils.displayMessage({\n        str: new Error('Invalid launching mode'),\n\n        tags: [\n          CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n        ],\n      });\n\n      return true;\n    }\n\n    try {\n      // LaunchScenarios the thing\n      await elem.func.call(LaunchScenarios.getInstance(), this.options, launchMasterSlaveConfigurationFile);\n    } catch (err) {\n      RoleAndTask.getInstance()\n        .errorHappened(err);\n    }\n\n    return true;\n  }\n}\n"]}