{"version":3,"sources":["../../../src/systemBoot/systemBoot.es6"],"names":["SystemBoot","mode","modeoptions","options","launchingModesMap","LaunchScenarios","getMapLaunchingModes","systemInitialization","programInitialization","launchMasterSlaveConfigurationFile","PromiseCommandPattern","func","Errors","elem","find","x","name","Utils","displayMessage","str","tags","CONSTANT","MESSAGE_DISPLAY_TAGS","ERROR","call","RoleAndTask","getInstance","errorHappened","process","on","PROCESS_EXCEPTION","err","stack","match","UNHANDLED_PROMISE_REJECTION","reason","String","NODE_WARNING","out","stderr","considerWarningAsErrors","EventEmitter","defaultMaxListeners","MAX_NUMBER_OF_LISTENER"],"mappings":"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","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport EventEmitter from 'events';\n\nimport LaunchScenarios from './LaunchScenarios.js';\nimport RoleAndTask from '../RoleAndTask.js';\nimport Utils from '../Utils/Utils.js';\nimport Errors from '../Utils/Errors.js';\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\nimport PromiseCommandPattern from '../Utils/PromiseCommandPattern.js';\n\n// We are in the main here\nexport default class SystemBoot {\n  /**\n   * Constructor\n   */\n  constructor({\n    mode,\n    modeoptions,\n  }) {\n    this.options = {\n      mode,\n      modeoptions,\n    };\n\n    this.launchingModesMap = LaunchScenarios.getMapLaunchingModes();\n  }\n\n  /**\n   * System initialization (not PROGRAM)\n   */\n  static systemInitialization() {\n    // We catch uncaught exceptions\n    process.on(CONSTANT.PROCESS_EXCEPTION, (err) => {\n      //\n      // SPECIFIC TO BLESSED PLUGIN\n      //\n      //\n      // Ignore blessed errors because there is a non blocking issue unresolved in the plugin\n      //\n      //\n      if (err && err.stack && err.stack.match(/^.+blessed.+$/im)) return;\n\n      RoleAndTask.getInstance()\n        .errorHappened(err);\n    });\n\n    // We catch unhandled promises\n    process.on(CONSTANT.UNHANDLED_PROMISE_REJECTION, (reason) => {\n      RoleAndTask.getInstance()\n        .errorHappened(new Errors('GENERAL_CATCH', `${String(reason)}`));\n    });\n\n    // We catch warnings\n    process.on(CONSTANT.NODE_WARNING, (reason) => {\n      Utils.displayMessage({\n        str: reason,\n        out: process.stderr,\n      });\n\n      if (RoleAndTask.considerWarningAsErrors) {\n        RoleAndTask.getInstance()\n          .errorHappened(new Errors('GENERAL_CATCH', String(reason)));\n      }\n    });\n\n    // Set the maximum number of listeners Default is 11\n    EventEmitter.defaultMaxListeners = CONSTANT.MAX_NUMBER_OF_LISTENER;\n  }\n\n  /**\n   * PROGRAM System initialization\n   */\n  static programInitialization() {\n    // LaunchScenarios the RoleAndTask initialization\n    RoleAndTask.getInstance();\n  }\n\n  /**\n   * All initializations\n   */\n  initialization() {\n    SystemBoot.systemInitialization();\n\n    SystemBoot.programInitialization();\n\n    return this;\n  }\n\n  /**\n   * LaunchScenarios PROGRAM\n   */\n  launch(launchMasterSlaveConfigurationFile) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Default launch mode\n        if (!this.options.mode) {\n          throw new Errors('INVALID_LAUNCHING_MODE', 'Missing launching mode');\n        }\n\n        // Look if we have a mode that correspond to it\n        const elem = this.launchingModesMap.find(x => x.name === this.options.mode);\n\n        if (!elem) {\n          Utils.displayMessage({\n            str: new Errors('INVALID_LAUNCHING_MODE', 'Invalid launching mode'),\n\n            tags: [\n              CONSTANT.MESSAGE_DISPLAY_TAGS.ERROR,\n            ],\n          });\n\n          return true;\n        }\n\n        try {\n          // LaunchScenarios the thing\n          await elem.func.call(LaunchScenarios, this.options, launchMasterSlaveConfigurationFile);\n        } catch (err) {\n          RoleAndTask.getInstance()\n            .errorHappened(err);\n        }\n\n        return true;\n      },\n    });\n  }\n}\n"],"file":"systemBoot.js"}