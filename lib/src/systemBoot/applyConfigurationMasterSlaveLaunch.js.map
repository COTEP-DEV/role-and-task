{"version":3,"sources":["../../../src/systemBoot/applyConfigurationMasterSlaveLaunch.es6"],"names":["LocalClass","roleHandler","optionsMaster","PromiseCommandPattern","func","getRole","CONSTANT","DEFAULT_ROLES","MASTER_ROLE","id","role","setPathToEntryFile","RoleAndTask","getInstance","getPathToEntryFile","setDisplayTask","getDisplayTask","startRole","masterRole","slave","tasks","all","map","startTaskToSlave","programIdentifier","x","args","startNewSlave","startXTasksForSlave","startTask","slaves","addNewSlaveWithGivenTasks","rets","xi","name","tasksConnects","Utils","executePromiseQueue","functionToCall","connectOneTaskWithAnOther","context","taskConnect","goodSlaveClient","find","name_slave_client","Errors","connectMasterToTask","id_task_client","id_task_server","connectTaskToTask","conf","checkTask","data","some","isAJSON","task","isAString","master","isAnArray","task_connect","options","body","length","forEach","String","getRoleHandler","checkConfigurationFile","startMasterRoleOnCurrentProcess","startXTasksForMaster","startMultipleSlavesAndTheirsTasks","connectTasksTogethers","applyConfigurationMasterSlaveLaunch"],"mappings":"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","file":"applyConfigurationMasterSlaveLaunch.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport Utils from '../Utils/Utils.js';\nimport Errors from '../Utils/Errors.js';\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\nimport RoleAndTask from '../RoleAndTask.js';\nimport PromiseCommandPattern from '../Utils/PromiseCommandPattern.js';\n\nclass LocalClass {\n  /**\n   * Start the master role on current process\n   */\n  static startMasterRoleOnCurrentProcess(roleHandler, optionsMaster) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const role = await roleHandler.getRole(CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id);\n\n        // Role here is a AMaster so we can use method of it\n        role.setPathToEntryFile(RoleAndTask.getInstance()\n          .getPathToEntryFile());\n\n        role.setDisplayTask(RoleAndTask.getInstance()\n          .getDisplayTask());\n\n        // Start the master on the current process\n        await roleHandler.startRole(CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id, optionsMaster);\n\n        return role;\n      },\n    });\n  }\n\n  /**\n   * Start all given task for the given slave\n   * @param {Object} masterRole\n   * @param {Object} slave\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static startXTasksForSlave(masterRole, slave, tasks) {\n    // Start a tasks\n    return new PromiseCommandPattern({\n      func: () => Promise.all(tasks.map(x => masterRole.startTaskToSlave(slave.programIdentifier, x.id, x.args))),\n    });\n  }\n\n  /**\n   * Add a new slaves with the given tasks on it\n   * @param {Object} masterRole\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static addNewSlaveWithGivenTasks(masterRole, tasks = []) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Add a new slave\n        const slave = await masterRole.startNewSlave();\n\n        await LocalClass.startXTasksForSlave(masterRole, slave, tasks);\n\n        return slave;\n      },\n    });\n  }\n\n  /**\n   * Start all given task for the master\n   * @param {Object} masterRole\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static startXTasksForMaster(masterRole, tasks = []) {\n    return new PromiseCommandPattern({\n      func: () => Promise.all(tasks.map(x => masterRole.startTask(x.id, x.args))),\n    });\n  }\n\n  /**\n   * Start multiple slaves and theirs related tasks\n   *\n   * @param {Object} masterRole\n   * @param {[{\n   *       name: String,\n   *       tasks: [{\n   *          id: String,\n   *          args: {},\n   *       }],\n   *    }]} slaves\n   *\n   * ret => [{\n   *    slave: Object,\n   *    name: String,\n   * }]\n   */\n  static startMultipleSlavesAndTheirsTasks(masterRole, slaves) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Perform one launch\n        const rets = await Promise.all(slaves.map(x => LocalClass.addNewSlaveWithGivenTasks(masterRole, x.tasks)));\n\n        return rets.map((x, xi) => ({\n          slave: x,\n          name: slaves[xi].name,\n        }));\n      },\n    });\n  }\n\n  /**\n   * Connect all tasks to each othes following the configuration\n   * @param {Object} masterRole\n   *\n   *  @param {[{\n   *    slave: Object,\n   *    name: String,\n   * }]} slaves\n   *\n   * @param {[{\n   *        id_task_server: String,\n   *        name_slave_client: String,\n   *        id_task_client: String,\n   *        args: {},\n   *    }]} taskConnect\n   */\n  static connectTasksTogethers(masterRole, slaves, tasksConnects) {\n    return new PromiseCommandPattern({\n      func: () => Utils.executePromiseQueue(tasksConnects.map(x => ({\n        functionToCall: LocalClass.connectOneTaskWithAnOther,\n\n        context: LocalClass,\n\n        args: [\n          masterRole,\n          slaves,\n          x,\n        ],\n      }))),\n    });\n  }\n\n  /**\n   * Connect one task\n   */\n  static connectOneTaskWithAnOther(masterRole, slaves, taskConnect) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const goodSlaveClient = slaves.find(x => x.name === taskConnect.name_slave_client);\n\n        // If the configuration is bad\n        // EMPTY FIELD MEANS THE CLIENT IS THE MASTER\n        if (!goodSlaveClient && taskConnect.name_slave_client !== '') {\n          throw new Errors('EXXXX', 'Bad task connection configuration');\n        }\n\n        // Connect one\n        if (!goodSlaveClient) {\n          return masterRole.connectMasterToTask(\n            taskConnect.id_task_client,\n            taskConnect.id_task_server,\n            taskConnect.args,\n          );\n        }\n\n        return masterRole.connectTaskToTask(\n          (goodSlaveClient && goodSlaveClient.slave.programIdentifier) || false,\n          taskConnect.id_task_client,\n          taskConnect.id_task_server,\n          taskConnect.args,\n        );\n      },\n    });\n  }\n\n  /**\n   * Check the configuration file\n   * @param {String} conf\n   */\n  static checkConfigurationFile(conf) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const checkTask = data => !data.some(task => [\n          () => Utils.isAJSON(task),\n\n          () => Utils.isAString(task.id),\n\n          () => Utils.isAJSON(task.args),\n        ].some(x => !x()));\n\n        //\n        //  We perform sequentials checks\n        //  (Same as if/if/if/if/if/if... but much more sexier 8D )\n        [\n          () => Utils.isAJSON(conf.master),\n\n          () => Utils.isAnArray(conf.slaves),\n\n          () => Utils.isAnArray(conf.task_connect),\n\n          //\n          // Master body\n          //\n          () => Utils.isAJSON(conf.master.options),\n\n          () => Utils.isAnArray(conf.master.tasks),\n\n          // Master -> Tasks\n          () => checkTask(conf.master.tasks),\n\n          //\n          // Slaves body\n          //\n          () => !conf.slaves.some(slave => [\n            () => Utils.isAJSON(slave),\n\n            () => Utils.isAString(slave.name),\n\n            () => Utils.isAnArray(slave.tasks),\n\n            () => checkTask(slave.tasks),\n          ].some(x => !x())),\n\n          //\n          // Task connect body\n          //\n          () => !conf.task_connect.some(body => [\n            () => Utils.isAJSON(body),\n\n            () => Utils.isAString(body.id_task_server) && body.id_task_server.length > 0,\n\n            () => Utils.isAString(body.name_slave_client),\n\n            () => Utils.isAString(body.id_task_client) && body.id_task_client.length > 0,\n\n            () => Utils.isAJSON(body.args),\n          ].some(x => !x())),\n\n        ].forEach((x, xi) => {\n          // Put xi to debug in case\n          if (!x()) throw new Errors('E8092', `${String(xi)}`);\n        });\n\n        return true;\n      },\n    });\n  }\n\n  /**\n   * Function to apply a master and slaves configuration to launch\n   *\n   * @param {Object} conf\n   *\n   * {\n   *    // Master configuration\n   *    master: {\n   *       options: {},\n   *       tasks: [{\n   *         id: String,\n   *         args: {},\n   *       }, ...],\n   *    },\n   *    // Slaves configuration\n   *    slaves: [{\n   *       name: String,\n   *       tasks: [{\n   *          id: String,\n   *          args: {},\n   *       }, ...],\n   *    }],\n   *    // Define the connection between the slave/master tasks\n   *    task_connect: [{\n   *        id_task_server: String,\n   *        name_slave_client: String,\n   *        id_task_client: String,\n   *        args: {},\n   *    }],\n   * }\n   */\n  static applyConfigurationMasterSlaveLaunch(conf) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const roleHandler = RoleAndTask.getInstance()\n          .getRoleHandler();\n\n        // Check the configuration to be good\n        await LocalClass.checkConfigurationFile(conf);\n\n        // Start the master\n        const masterRole = await LocalClass.startMasterRoleOnCurrentProcess(roleHandler, conf.master.options);\n\n        const [, slaves] = await Promise.all([\n          // Start the master tasks\n          LocalClass.startXTasksForMaster(masterRole, conf.master.tasks),\n\n          // Start all slaves and theirs tasks\n          LocalClass.startMultipleSlavesAndTheirsTasks(masterRole, conf.slaves),\n        ]);\n\n        // Connect all tasks to each othes following the configuration\n        return LocalClass.connectTasksTogethers(masterRole, slaves, conf.task_connect);\n      },\n    });\n  }\n}\n\n// Export the function to use\nexport default (...args) => LocalClass.applyConfigurationMasterSlaveLaunch(...args);\n"]}