{"version":3,"sources":["../../../src/systemBoot/applyConfigurationMasterSlaveLaunch.es6"],"names":["LocalClass","roleHandler","optionsMaster","getRole","CONSTANT","DEFAULT_ROLE","MASTER_ROLE","id","role","setPathToEntryFile","RoleAndTask","getInstance","getPathToEntryFile","setDisplayTask","getDisplayTask","startRole","masterRole","slave","tasks","all","map","startTaskToSlave","eliotIdentifier","x","args","startNewSlave","startXTasksForSlave","startTask","slaves","addNewSlaveWithGivenTasks","rets","xi","name","tasksConnects","Utils","executePromiseQueue","functionToCall","connectOneTaskWithAnOther","context","taskConnect","goodSlaveClient","find","name_slave_client","Error","connectMasterToTask","id_task_client","id_task_server","connectTaskToTask","conf","checkTask","data","some","isAJSON","task","isAString","master","isAnArray","task_connect","options","body","length","forEach","String","pathToEntryFile","getRoleHandler","checkConfigurationFile","startMasterRoleOnCurrentProcess","startXTasksForMaster","startMultipleSlavesAndTheirsTasks","connectTasksTogethers","applyConfigurationMasterSlaveLaunch"],"mappings":"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","file":"applyConfigurationMasterSlaveLaunch.js","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport Utils from '../Utils/Utils.js';\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\nimport RoleAndTask from '../RoleAndTask.js';\n\nclass LocalClass {\n  /**\n   * Start the master role on current process\n   */\n  static async startMasterRoleOnCurrentProcess(roleHandler, optionsMaster) {\n    const role = await roleHandler.getRole(CONSTANT.DEFAULT_ROLE.MASTER_ROLE.id);\n\n    // Role here is a AMaster so we can use method of it\n    role.setPathToEntryFile(RoleAndTask.getInstance()\n      .getPathToEntryFile());\n\n    role.setDisplayTask(RoleAndTask.getInstance()\n      .getDisplayTask());\n\n    // Start the master on the current process\n    await roleHandler.startRole(CONSTANT.DEFAULT_ROLE.MASTER_ROLE.id, optionsMaster);\n\n    return role;\n  }\n\n  /**\n   * Start all given task for the given slave\n   * @param {Object} masterRole\n   * @param {Object} slave\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static async startXTasksForSlave(masterRole, slave, tasks) {\n    // Start a tasks\n    return Promise.all(tasks.map(x => masterRole.startTaskToSlave(slave.eliotIdentifier, x.id, x.args)));\n  }\n\n  /**\n   * Add a new slaves with the given tasks on it\n   * @param {Object} masterRole\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static async addNewSlaveWithGivenTasks(masterRole, tasks = []) {\n    // Add a new slave\n    const slave = await masterRole.startNewSlave();\n\n    await LocalClass.startXTasksForSlave(masterRole, slave, tasks);\n\n    return slave;\n  }\n\n  /**\n   * Start all given task for the master\n   * @param {Object} masterRole\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static async startXTasksForMaster(masterRole, tasks = []) {\n    return Promise.all(tasks.map(x => masterRole.startTask(x.id, x.args)));\n  }\n\n  /**\n   * Start multiple slaves and theirs related tasks\n   *\n   * @param {Object} masterRole\n   * @param {[{\n   *       name: String,\n   *       tasks: [{\n   *          id: String,\n   *          args: {},\n   *       }],\n   *    }]} slaves\n   *\n   * ret => [{\n   *    slave: Object,\n   *    name: String,\n   * }]\n   */\n  static async startMultipleSlavesAndTheirsTasks(masterRole, slaves) {\n    // Perform one launch\n    const rets = await Promise.all(slaves.map(x => LocalClass.addNewSlaveWithGivenTasks(masterRole, x.tasks)));\n\n    return rets.map((x, xi) => ({\n      slave: x,\n      name: slaves[xi].name,\n    }));\n  }\n\n  /**\n   * Connect all tasks to each othes following the configuration\n   * @param {Object} masterRole\n   *\n   *  @param {[{\n   *    slave: Object,\n   *    name: String,\n   * }]} slaves\n   *\n   * @param {[{\n   *        id_task_server: String,\n   *        name_slave_client: String,\n   *        id_task_client: String,\n   *        args: {},\n   *    }]} taskConnect\n   */\n  static async connectTasksTogethers(masterRole, slaves, tasksConnects) {\n    return Utils.executePromiseQueue(tasksConnects.map(x => ({\n      functionToCall: LocalClass.connectOneTaskWithAnOther,\n\n      context: LocalClass,\n\n      args: [\n        masterRole,\n        slaves,\n        x,\n      ],\n    })));\n  }\n\n  /**\n   * Connect one task\n   */\n  static async connectOneTaskWithAnOther(masterRole, slaves, taskConnect) {\n    const goodSlaveClient = slaves.find(x => x.name === taskConnect.name_slave_client);\n\n    // If the configuration is bad\n    // EMPTY FIELD MEANS THE CLIENT IS THE MASTER\n    if (!goodSlaveClient && taskConnect.name_slave_client !== '') {\n      throw new Error('EXXXX : Bad task connection configuration');\n    }\n\n    // Connect one\n    if (!goodSlaveClient) {\n      return masterRole.connectMasterToTask(\n        taskConnect.id_task_client,\n        taskConnect.id_task_server,\n        taskConnect.args,\n      );\n    }\n\n    return masterRole.connectTaskToTask(\n      (goodSlaveClient && goodSlaveClient.slave.eliotIdentifier) || false,\n      taskConnect.id_task_client,\n      taskConnect.id_task_server,\n      taskConnect.args,\n    );\n  }\n\n  /**\n   * Check the configuration file\n   * @param {String} conf\n   */\n  static async checkConfigurationFile(conf) {\n    const checkTask = data => !data.some(task => [\n      () => Utils.isAJSON(task),\n\n      () => Utils.isAString(task.id),\n\n      () => Utils.isAJSON(task.args),\n    ].some(x => !x()));\n\n    //\n    //  We perform sequentials checks\n    //  (Same as if/if/if/if/if/if... but much more sexier 8D )\n    [\n      () => Utils.isAJSON(conf.master),\n\n      () => Utils.isAnArray(conf.slaves),\n\n      () => Utils.isAnArray(conf.task_connect),\n\n      //\n      // Master body\n      //\n      () => Utils.isAJSON(conf.master.options),\n\n      () => Utils.isAnArray(conf.master.tasks),\n\n      // Master -> Tasks\n      () => checkTask(conf.master.tasks),\n\n      //\n      // Slaves body\n      //\n      () => !conf.slaves.some(slave => [\n        () => Utils.isAJSON(slave),\n\n        () => Utils.isAString(slave.name),\n\n        () => Utils.isAnArray(slave.tasks),\n\n        () => checkTask(slave.tasks),\n      ].some(x => !x())),\n\n      //\n      // Task connect body\n      //\n      () => !conf.task_connect.some(body => [\n        () => Utils.isAJSON(body),\n\n        () => Utils.isAString(body.id_task_server) && body.id_task_server.length > 0,\n\n        () => Utils.isAString(body.name_slave_client),\n\n        () => Utils.isAString(body.id_task_client) && body.id_task_client.length > 0,\n\n        () => Utils.isAJSON(body.args),\n      ].some(x => !x())),\n\n    ].forEach((x, xi) => {\n      // Put xi to debug in case\n      if (!x()) throw new Error(`E8092 ${String(xi)}`);\n    });\n\n    return true;\n  }\n\n  /**\n   * Function to apply a master and slaves configuration to launch\n   *\n   * @param {Object} conf\n   *\n   * {\n   *    // Master configuration\n   *    master: {\n   *       options: {},\n   *       tasks: [{\n   *         id: String,\n   *         args: {},\n   *       }, ...],\n   *    },\n   *    // Slaves configuration\n   *    slaves: [{\n   *       name: String,\n   *       tasks: [{\n   *          id: String,\n   *          args: {},\n   *       }, ...],\n   *    }],\n   *    // Define the connection between the slave/master tasks\n   *    task_connect: [{\n   *        id_task_server: String,\n   *        name_slave_client: String,\n   *        id_task_client: String,\n   *        args: {},\n   *    }],\n   * }\n   */\n  static async applyConfigurationMasterSlaveLaunch(conf, pathToEntryFile) {\n    const roleHandler = RoleAndTask.getInstance()\n      .getRoleHandler();\n\n    // Check the configuration to be good\n    await LocalClass.checkConfigurationFile(conf);\n\n    // Start the master\n    const masterRole = await LocalClass.startMasterRoleOnCurrentProcess(roleHandler, conf.master.options);\n\n    const [, slaves] = await Promise.all([\n      // Start the master tasks\n      LocalClass.startXTasksForMaster(masterRole, conf.master.tasks),\n\n      // Start all slaves and theirs tasks\n      LocalClass.startMultipleSlavesAndTheirsTasks(masterRole, conf.slaves),\n    ]);\n\n    // Connect all tasks to each othes following the configuration\n    return LocalClass.connectTasksTogethers(masterRole, slaves, conf.task_connect);\n  }\n}\n\n// Export the function to use\nexport default (...args) => LocalClass.applyConfigurationMasterSlaveLaunch(...args);\n"]}