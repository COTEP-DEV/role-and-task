{"version":3,"sources":["../../../src/systemBoot/applyConfigurationMasterSlaveLaunch.es6"],"names":["LocalClass","roleHandler","optionsMaster","PromiseCommandPattern","func","getRole","CONSTANT","DEFAULT_ROLES","MASTER_ROLE","id","role","pathToEntryFile","RoleAndTask","getInstance","displayTask","startRole","masterRole","slave","tasks","Promise","all","map","x","startTaskToSlave","programIdentifier","args","startNewSlave","startXTasksForSlave","startTask","slaves","addNewSlaveWithGivenTasks","rets","xi","name","tasksConnects","Utils","executePromiseQueue","functionToCall","connectOneTaskWithAnOther","context","taskConnect","goodSlaveClient","find","name_slave_client","Errors","connectMasterToTask","id_task_client","id_task_server","connectTaskToTask","conf","checkTask","data","some","task","isAJSON","isAString","master","isAnArray","task_connect","options","body","length","forEach","String","getRoleHandler","checkConfigurationFile","startMasterRoleOnCurrentProcess","startXTasksForMaster","startMultipleSlavesAndTheirsTasks","connectTasksTogethers","applyConfigurationMasterSlaveLaunch"],"mappings":"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","sourcesContent":["//\n// Copyright (c) 2016 by Cotep. All Rights Reserved.\n//\n\n// Imports\nimport Utils from '../Utils/Utils.js';\nimport Errors from '../Utils/Errors.js';\nimport CONSTANT from '../Utils/CONSTANT/CONSTANT.js';\nimport RoleAndTask from '../RoleAndTask.js';\nimport PromiseCommandPattern from '../Utils/PromiseCommandPattern.js';\n\nclass LocalClass {\n  /**\n   * Start the master role on current process\n   */\n  static startMasterRoleOnCurrentProcess(roleHandler, optionsMaster) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const role = await roleHandler.getRole(CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id);\n\n        // Role here is a AMaster so we can use method of it\n        role.pathToEntryFile = RoleAndTask.getInstance()\n          .pathToEntryFile;\n\n        role.displayTask = RoleAndTask.getInstance()\n          .displayTask;\n\n        // Start the master on the current process\n        await roleHandler.startRole(CONSTANT.DEFAULT_ROLES.MASTER_ROLE.id, optionsMaster);\n\n        return role;\n      },\n    });\n  }\n\n  /**\n   * Start all given task for the given slave\n   * @param {Object} masterRole\n   * @param {Object} slave\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static startXTasksForSlave(masterRole, slave, tasks) {\n    // Start a tasks\n    return new PromiseCommandPattern({\n      func: () => Promise.all(tasks.map(x => masterRole.startTaskToSlave(slave.programIdentifier, x.id, x.args))),\n    });\n  }\n\n  /**\n   * Add a new slaves with the given tasks on it\n   * @param {Object} masterRole\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static addNewSlaveWithGivenTasks(masterRole, tasks = []) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Add a new slave\n        const slave = await masterRole.startNewSlave();\n\n        await LocalClass.startXTasksForSlave(masterRole, slave, tasks);\n\n        return slave;\n      },\n    });\n  }\n\n  /**\n   * Start all given task for the master\n   * @param {Object} masterRole\n   * @param {[{ id: String, args: Object }]} tasks\n   */\n  static startXTasksForMaster(masterRole, tasks = []) {\n    return new PromiseCommandPattern({\n      func: () => Promise.all(tasks.map(x => masterRole.startTask(x.id, x.args))),\n    });\n  }\n\n  /**\n   * Start multiple slaves and theirs related tasks\n   *\n   * @param {Object} masterRole\n   * @param {[{\n   *       name: String,\n   *       tasks: [{\n   *          id: String,\n   *          args: {},\n   *       }],\n   *    }]} slaves\n   *\n   * ret => [{\n   *    slave: Object,\n   *    name: String,\n   * }]\n   */\n  static startMultipleSlavesAndTheirsTasks(masterRole, slaves) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        // Perform one launch\n        const rets = await Promise.all(slaves.map(x => LocalClass.addNewSlaveWithGivenTasks(masterRole, x.tasks)));\n\n        return rets.map((x, xi) => ({\n          slave: x,\n          name: slaves[xi].name,\n        }));\n      },\n    });\n  }\n\n  /**\n   * Connect all tasks to each othes following the configuration\n   * @param {Object} masterRole\n   *\n   *  @param {[{\n   *    slave: Object,\n   *    name: String,\n   * }]} slaves\n   *\n   * @param {[{\n   *        id_task_server: String,\n   *        name_slave_client: String,\n   *        id_task_client: String,\n   *        args: {},\n   *    }]} taskConnect\n   */\n  static connectTasksTogethers(masterRole, slaves, tasksConnects) {\n    return new PromiseCommandPattern({\n      func: () => Utils.executePromiseQueue(tasksConnects.map(x => ({\n        functionToCall: LocalClass.connectOneTaskWithAnOther,\n\n        context: LocalClass,\n\n        args: [\n          masterRole,\n          slaves,\n          x,\n        ],\n      }))),\n    });\n  }\n\n  /**\n   * Connect one task\n   */\n  static connectOneTaskWithAnOther(masterRole, slaves, taskConnect) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const goodSlaveClient = slaves.find(x => x.name === taskConnect.name_slave_client);\n\n        // If the configuration is bad\n        // EMPTY FIELD MEANS THE CLIENT IS THE MASTER\n        if (!goodSlaveClient && taskConnect.name_slave_client !== '') {\n          throw new Errors('EXXXX', 'Bad task connection configuration');\n        }\n\n        // Connect one\n        if (!goodSlaveClient) {\n          return masterRole.connectMasterToTask(\n            taskConnect.id_task_client,\n            taskConnect.id_task_server,\n            taskConnect.args,\n          );\n        }\n\n        return masterRole.connectTaskToTask(\n          (goodSlaveClient && goodSlaveClient.slave.programIdentifier) || false,\n          taskConnect.id_task_client,\n          taskConnect.id_task_server,\n          taskConnect.args,\n        );\n      },\n    });\n  }\n\n  /**\n   * Check the configuration file\n   * @param {String} conf\n   */\n  static checkConfigurationFile(conf) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const checkTask = data => !data.some(task => [\n          () => Utils.isAJSON(task),\n\n          () => Utils.isAString(task.id),\n\n          () => Utils.isAJSON(task.args),\n        ].some(x => !x()));\n\n        //\n        //  We perform sequentials checks\n        //  (Same as if/if/if/if/if/if... but much more sexier 8D )\n        [\n          () => Utils.isAJSON(conf.master),\n\n          () => Utils.isAnArray(conf.slaves),\n\n          () => Utils.isAnArray(conf.task_connect),\n\n          //\n          // Master body\n          //\n          () => Utils.isAJSON(conf.master.options),\n\n          () => Utils.isAnArray(conf.master.tasks),\n\n          // Master -> Tasks\n          () => checkTask(conf.master.tasks),\n\n          //\n          // Slaves body\n          //\n          () => !conf.slaves.some(slave => [\n            () => Utils.isAJSON(slave),\n\n            () => Utils.isAString(slave.name),\n\n            () => Utils.isAnArray(slave.tasks),\n\n            () => checkTask(slave.tasks),\n          ].some(x => !x())),\n\n          //\n          // Task connect body\n          //\n          () => !conf.task_connect.some(body => [\n            () => Utils.isAJSON(body),\n\n            () => Utils.isAString(body.id_task_server) && body.id_task_server.length > 0,\n\n            () => Utils.isAString(body.name_slave_client),\n\n            () => Utils.isAString(body.id_task_client) && body.id_task_client.length > 0,\n\n            () => Utils.isAJSON(body.args),\n          ].some(x => !x())),\n\n        ].forEach((x, xi) => {\n          // Put xi to debug in case\n          if (!x()) throw new Errors('E8092', `${String(xi)}`);\n        });\n\n        return true;\n      },\n    });\n  }\n\n  /**\n   * Function to apply a master and slaves configuration to launch\n   *\n   * @param {Object} conf\n   *\n   * {\n   *    // Master configuration\n   *    master: {\n   *       options: {},\n   *       tasks: [{\n   *         id: String,\n   *         args: {},\n   *       }, ...],\n   *    },\n   *    // Slaves configuration\n   *    slaves: [{\n   *       name: String,\n   *       tasks: [{\n   *          id: String,\n   *          args: {},\n   *       }, ...],\n   *    }],\n   *    // Define the connection between the slave/master tasks\n   *    task_connect: [{\n   *        id_task_server: String,\n   *        name_slave_client: String,\n   *        id_task_client: String,\n   *        args: {},\n   *    }],\n   * }\n   */\n  static applyConfigurationMasterSlaveLaunch(conf) {\n    return new PromiseCommandPattern({\n      func: async () => {\n        const roleHandler = RoleAndTask.getInstance()\n          .getRoleHandler();\n\n        // Check the configuration to be good\n        await LocalClass.checkConfigurationFile(conf);\n\n        // Start the master\n        const masterRole = await LocalClass.startMasterRoleOnCurrentProcess(roleHandler, conf.master.options);\n\n        const [, slaves] = await Promise.all([\n          // Start the master tasks\n          LocalClass.startXTasksForMaster(masterRole, conf.master.tasks),\n\n          // Start all slaves and theirs tasks\n          LocalClass.startMultipleSlavesAndTheirsTasks(masterRole, conf.slaves),\n        ]);\n\n        // Connect all tasks to each othes following the configuration\n        return LocalClass.connectTasksTogethers(masterRole, slaves, conf.task_connect);\n      },\n    });\n  }\n}\n\n// Export the function to use\nexport default (...args) => LocalClass.applyConfigurationMasterSlaveLaunch(...args);\n"],"file":"applyConfigurationMasterSlaveLaunch.js"}